<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on iBlog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on iBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Focus - iOS 中的 Category</title>
      <link>/posts/2019/category_in_obj-c/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/category_in_obj-c/</guid>
      <description>Date Notes Source Code Demo     2019-04-13 首次提交 objc4-750、xnu-4903.221.2 Category_in_Obj-C    Preface 在 Obj-C 中，我们经常会使用 Category（中文常译作分类，但为表述清晰，下文仍将使用 Category）来对一个类进行扩展，使得类可以具备更多的功能；也会对一个类进行拆分，使得其结构更加清晰条理。本文将由浅入深，谈谈 iOS 中 Category 的结构、实现原理、以及与 Class Extension 的区别等。对于 + load 等专题性更强的内容，将单独放置在独立篇章中讲述，请各位参考文末的「Reference」。
category_t // Person+Life.h /** LifeProtocol */ @protocol LifeProtocol &amp;lt;NSObject&amp;gt; - (void)eat; @end /** Person+Life */ @interface Person (Life) &amp;lt;LifeProtocol&amp;gt; @property (nonatomic, copy) NSString *name; // Instance method - (void)run; // Class method + (void)foo; // Protocol method - (void)eat; @end  以 Person 类为例，创建一个 Life 的 Category，并在其中遵守协议、声明属性、定义并实现对象方法和类方法。为了便于分析，我们使用 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc Person+Life.</description>
    </item>
    
    <item>
      <title>Focus - Xcode 中的 Link Map 文件</title>
      <link>/posts/2019/link_map_file_in_xcode/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/link_map_file_in_xcode/</guid>
      <description>Date Notes Xcode     2019-04-01 首次提交 10.1    Preface Link Map File，译作链接映射文件（下文将称 Link Map 文件）。在构建可执行文件之前，需要先编译为目标文件（Object File），并链接所需要的其他库，那么 Link Map 文件就记录了链接器（Linker）在链接过程中产生的一些信息，本文将谈谈这个文件的构成。
What Xcode 中默认是不会将 Link Map 文件在构建时暴露出来的，需要我们手动在「Build Settings」-「Write Link Map File」-「Yes」打开该写入该文件的设置。这样当我们再次编译项目，默认就可以在 ~/Library/Developer/Xcode/DerivedData/&amp;lt;TARGET_NAME&amp;gt;-&amp;lt;Random_ID&amp;gt;/Build/Intermediates.noindex/&amp;lt;TARGET_NAME&amp;gt;.build/Debug-&amp;lt;Device_Type&amp;gt;/&amp;lt;TARGET_NAME&amp;gt;.build/&amp;lt;TARGET_NAME&amp;gt;-LinkMap-normal-&amp;lt;Arch&amp;gt;.txt 中找到。如有更改 Link Map 文件路径的需求也可以在「Path to Link Map File」中更改。
举个例子，我的 DemoiOS 项目中 Link Map 文件的完整路径为：/Users/kingcos/Library/Developer/Xcode/DerivedData/DemoiOS-hifhuapijabsaxgpelrpiwhbzlqv/Build/Intermediates.noindex/DemoiOS.build/Debug-iphonesimulator/DemoiOS.build/DemoiOS-LinkMap-normal-x86_64.txt。
How 下面来分析一下 Link Map 文件的构成。
Path # Path: /Users/kingcos/Library/Developer/Xcode/DerivedData/DemoiOS-hifhuapijabsaxgpelrpiwhbzlqv/Build/Products/Debug-iphonesimulator/DemoiOS.app/DemoiOS  Path 为最终生成「可执行文件」的路径。
Arch // Target: Simulator # Arch: x86_64 // Target: iPhone # Arch: arm64  Arch 为「可执行文件」的架构，具体架构与设备的对照可参考下表：</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on kingcos</title>
    <link>https://kingcos.me/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://kingcos.me/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MustOverride 源码解读</title>
      <link>https://kingcos.me/posts/2019/dive_into_mustoverride/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/dive_into_mustoverride/</guid>
      <description>Release Notes ↕ Date Notes Source Code Commit / Tag 2019-12-07 首次提交 nicklockwood/MustOverride c63007e / 1.1 2020-01-05 增加 Extension 一节 - - Preface MustOverride 是 nicklockwood 多年前开源的一个 Obj-C 库。其作用正如其名「MustOverride」即可以使得子类必须重写父类中的某些方法，防止子类因未实现父类的某些方法而出</description>
    </item>
    
    <item>
      <title>将 Obj-C 代码翻译为 C/C&#43;&#43; 代码</title>
      <link>https://kingcos.me/posts/2019/obj-c_to_c&#43;&#43;/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/obj-c_to_c&#43;&#43;/</guid>
      <description>Date Notes 2019-05-17 首次提交 2019-06-15 增加常用参数列表 2019-11-30 细节补充 Solution ➜ ~ clang --version Apple LLVM version 10.0.0 (clang-1000.11.45.5) Target: x86_64-apple-darwin18.2.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin Xcode 中，C/C++/Obj-C/C++ 的编译器是 clang，其通过 -rewrite-objc 参数可以将 Obj-C 代码翻译为 C++ 代码，即 clang -rewrite-objc main.m -o main.cpp；</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 中的位域与共用体</title>
      <link>https://kingcos.me/posts/2019/bit_field_union_in_cpp/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/bit_field_union_in_cpp/</guid>
      <description>Date Notes Env 2019-08-17 首次提交 clang++、macOS 10.14.4 Preface C/C++ 中有许多「奇技淫巧」来让开发者能够以效率更高的方式使用内存，这也是一些高级语言着力去避讳的一点，但这种能够直面内存细节的「踏实感」让我个人觉得非常安心。</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 中的 const、static &amp; extern</title>
      <link>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</guid>
      <description>Release Notes ↕ Date Notes Env 2019-07-23 首次提交 clang++、macOS 10.14.4 2021-04-25 更新 static 一节 - const 基础类型 int a = 0; a = 10; 对于基础类型，其在内存中存储的即是该类型的变量本身，经过 const 修饰后，此处的变量不可变，即常量。const 的位置并不</description>
    </item>
    
  </channel>
</rss>

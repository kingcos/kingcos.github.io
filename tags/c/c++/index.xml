<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on iBlog</title>
    <link>/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on iBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C/C&#43;&#43;/Obj-C/C&#43;&#43; 中的 const、static &amp; extern</title>
      <link>/posts/2019/const_static_extern_in_cpp_obj-c/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/const_static_extern_in_cpp_obj-c/</guid>
      <description>Date Notes Env     2019-07-23 首次提交 clang++, macOS 10.14.6    Preface 熟悉又陌生的 const、static &amp;amp; extern 关键词，是时候全部搞清楚啦。
const 基础类型 对于基础类型，其在内存中存储的即是该类型的变量本身，经过 const 修饰后，此处的变量不可变，即常量。const 的位置并不会影响其作用，更为推荐的写法应当是编译器提示的 const &amp;lt;TYPE&amp;gt;。
以下是在 C/C++ 中的用例，由于 Obj-C/C++ 分别是 C/C++ 的超集，对于 C/C++ 的基础类型，其在 Obj-C/C++ 中的表现是一致的：
int a = 0; a = 10; const int b = 0; // error: cannot assign to variable &#39;b&#39; with const-qualified type &#39;const int&#39; // b = 10; int const c = 0; // c = 10;  对于 Obj-C 中特有的基础类型，const 也与修饰 C/C++ 中基础类型的行为一致：</description>
    </item>
    
    <item>
      <title>将 Obj-C 代码翻译为 C/C&#43;&#43; 代码</title>
      <link>/posts/2019/obj-c_to_c&#43;&#43;/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/obj-c_to_c&#43;&#43;/</guid>
      <description>Date Notes     2019-06-15 增加常用参数列表   2019-05-17 首次提交    Solution ➜ ~ clang --version Apple LLVM version 10.0.0 (clang-1000.11.45.5) Target: x86_64-apple-darwin18.2.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin  Xcode 中，C/C++/Obj-C/C++ 的编译器是 clang，其通过 -rewrite-objc 参数可以将 Obj-C 代码翻译为 C++ 代码，即 clang -rewrite-objc main.m -o main.cpp；也可以结合 xcrun -sdk 命令设置编译所基于的 SDK。
   Options Usage     -arch arm64 指定编译架构   -framework UIKit 依赖 UIKit 框架   -fobjc-arc 使用 ARC（自动引用计数）模式   -fobjc-runtime=ios-8.</description>
    </item>
    
  </channel>
</rss>
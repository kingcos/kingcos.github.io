<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Obj-C on iBlog</title>
    <link>/tags/obj-c/</link>
    <description>Recent content in Obj-C on iBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 13 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/obj-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Focus - iOS 中的 Category</title>
      <link>/posts/2019/category_in_obj-c/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/category_in_obj-c/</guid>
      <description>Date Notes Source Code Demo     2019-04-13 首次提交 objc4-750、xnu-4903.221.2 Category_in_Obj-C    Preface 在 Obj-C 中，我们经常会使用 Category（中文常译作分类，但为表述清晰，下文仍将使用 Category）来对一个类进行扩展，使得类可以具备更多的功能；也会对一个类进行拆分，使得其结构更加清晰条理。本文将由浅入深，谈谈 iOS 中 Category 的结构、实现原理、以及与 Class Extension 的区别等。对于 + load 等专题性更强的内容，将单独放置在独立篇章中讲述，请各位参考文末的「Reference」。
category_t // Person+Life.h /** LifeProtocol */ @protocol LifeProtocol &amp;lt;NSObject&amp;gt; - (void)eat; @end /** Person+Life */ @interface Person (Life) &amp;lt;LifeProtocol&amp;gt; @property (nonatomic, copy) NSString *name; // Instance method - (void)run; // Class method + (void)foo; // Protocol method - (void)eat; @end  以 Person 类为例，创建一个 Life 的 Category，并在其中遵守协议、声明属性、定义并实现对象方法和类方法。为了便于分析，我们使用 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc Person+Life.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Obj-C on kingcos</title>
    <link>https://kingcos.me/tags/obj-c/</link>
    <description>Recent content in Obj-C on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/obj-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS 多线程技术实践之 @synchronized（四）</title>
      <link>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</guid>
      <description>Release Notes ↕ Date Notes 2021-06-01 首次提交 objc4-818.2 What 大致流程 为了保护代码的并发执行，我们尝试使用 @synchronized 即同步代码块写一段代码： // SomeClass.m #import &amp;lt;Foundation/Foundation.h&amp;gt; @implementation SomeClass - (void)someFunc { printf(&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;\n&amp;#34;); @synchronized(self) { printf(&amp;#34;Protected code.\n&amp;#34;); } printf(&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;\n&amp;#34;); } @end 接着，我们使用 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc SomeClass.m -o SomeClass.cpp 命令将以上代码重写为 C++，并找到 someFunc</description>
    </item>
    
    <item>
      <title>Obj-C 中的 DisguisedPtr</title>
      <link>https://kingcos.me/posts/2021/disguised_ptr_in_objc/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2021/disguised_ptr_in_objc/</guid>
      <description>Release Notes ↕ Date Notes 2021-06-01 首次提交 objc4-818.2 What 正如 Apple 官方对于 DisguisedPtr&amp;lt;T&amp;gt; 的注释：「acts like pointer type T*（行为类似于指针类型 T*）」，即其本身的作用等同于指针引用对象，而不同之处则在于其将引用对象的内存地址隐藏了。我们可以在 Apple 开源的 objc4-818.2 中</description>
    </item>
    
    <item>
      <title>《Effective Objective-C 2.0》笔记</title>
      <link>https://kingcos.me/posts/2019/effective_obj-c_2.0_notes/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/effective_obj-c_2.0_notes/</guid>
      <description>Release Notes ↕ Book ISBN Notes Effective Objective-C 2.0 9787111451297 - Date Num. Env 2019-05 1-3 Xcode 10.2.1 2019-06 4 Xcode 10.2.1 2019-07 5-12 Xcode 10.2.1 2019-10 13-20 Xcode 11.1 &amp;amp; 11.2 2019-11 20-52 Xcode 11.1 &amp;amp; 11.2 2021-05-24 - 补充属性特性中的可空性与 direct Preface 《Effective Objective-C 2.0》中文版书名为《编写高质量 iOS 与 OS X 代码的 52 个有效方法》，是类似笔</description>
    </item>
    
    <item>
      <title>iOS 中的断言</title>
      <link>https://kingcos.me/posts/2020/assertion_in_ios/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/assertion_in_ios/</guid>
      <description>Date Notes 2020-07-27 首次提交 Preface 断言（Assertion）是我们常用于 Debug 时的得力助手，其使得程序得以崩溃在早期，引起我们足够的重视，保障代码质量又不影响用户的体验。本文将简单介绍 iOS 中的断言类型以及使用方式与原理。 assert NSAssert</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Boolean</title>
      <link>https://kingcos.me/posts/2020/booleans_in_objc/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/booleans_in_objc/</guid>
      <description>Date Notes 2020-06-02 首次提交 2020-06-16 增加「逻辑表达式」一节 Preface Boolean，即布尔值，通常用来表明逻辑中的真或假。但在 Obj-C 中，我们似乎既可以使用 BOOL 又可以使用 bool，既可以使用 YES/NO 又可以使用 true/false，那么它们到底</description>
    </item>
    
    <item>
      <title>Obj-C 中实例变量和类的访问控制</title>
      <link>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</guid>
      <description>Date Notes 2019-06-14 增加 man nm 截图 2019-04-29 完善 @package 2019-03-30 gcc, clang; macOS 10.14.2 2020-01-17 勘误，部分细节调整 Preface Obj-C 中的实例变量，即 Instance Variables，简称为 ivar。在面向对象的概念中，一个类的对外暴露决定了其所提供的能力，对子类则需要提供一定的扩展性</description>
    </item>
    
    <item>
      <title>MustOverride 源码解读</title>
      <link>https://kingcos.me/posts/2019/dive_into_mustoverride/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/dive_into_mustoverride/</guid>
      <description>Release Notes ↕ Date Notes Source Code Commit / Tag 2019-12-07 首次提交 nicklockwood/MustOverride c63007e / 1.1 2020-01-05 增加 Extension 一节 - - 2021-04-26 增加 __attribute__((used)) 部分内容 - - How 这个库的使用非常简单，我们可以在需要子类必须重写的父类（或其分类）方法中放入 SUBCLASS_MUST_OVERRIDE; 宏即可： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Obj-C 中的对象</title>
      <link>https://kingcos.me/posts/2019/objects_in_obj-c/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objects_in_obj-c/</guid>
      <description>Date Notes Refer. 2019-03-18 首次提交 objc4-750 2019-08-18 抽离 isa 部分； 重整文章结构 Obj-C 中的 isa 指针 - kingcos 2019-08-29 增加 class_rw_t 等细节 - 2019-12-23 细节微调 objc4-756.2 Preface Obj-C 中的对象分为实例对象（Instance Object）、类对象（Class Object）、以及元类对象（Met</description>
    </item>
    
    <item>
      <title>iOS 多线程技术实践之 pthreads（一）</title>
      <link>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2019-03-08 首次提交 4.2 10.1 2019-12-14 内容重整 5.1 10.3 Preface 在现代计算机中，操作系统一般都会支持多进程（Process）以及多线程（Thread）技术，使得其可以同时运行多个程序且效率更高。而我们在开发 iOS app 中也时常需</description>
    </item>
    
    <item>
      <title>将 Obj-C 代码翻译为 C/C&#43;&#43; 代码</title>
      <link>https://kingcos.me/posts/2019/obj-c_to_c&#43;&#43;/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/obj-c_to_c&#43;&#43;/</guid>
      <description>Date Notes 2019-05-17 首次提交 2019-06-15 增加常用参数列表 2019-11-30 细节补充 Solution ➜ ~ clang --version Apple LLVM version 10.0.0 (clang-1000.11.45.5) Target: x86_64-apple-darwin18.2.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin Xcode 中，C/C++/Obj-C/C++ 的编译器是 clang，其通过 -rewrite-objc 参数可以将 Obj-C 代码翻译为 C++ 代码，即 clang -rewrite-objc main.m -o main.cpp；</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Block</title>
      <link>https://kingcos.me/posts/2019/block_in_obj-c/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/block_in_obj-c/</guid>
      <description>Date Notes Demo Source Code 2019-07-27 首次提交 - - 2019-11-24 重新整理部分内容；补充《Effective Objective-C 2.0》&amp;amp;《Objective-C 高级编程》相关内容 Block_in_Obj-C objc4-756.2、libclosure-73 Preface 从 OS X Snow Leopard 和 iOS 4</description>
    </item>
    
    <item>
      <title>iOS 中的库与框架</title>
      <link>https://kingcos.me/posts/2019/libraries_in_ios/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/libraries_in_ios/</guid>
      <description>Date Notes 2019-09-14 首次提交，持续更新完善 2019-09-22 适配 Xcode 11，持续更新完善 2019-10-29 添加 Demo：libraries_in_ios-demo Preface 随着软件工程的发展，很多我们需要的功能前人都已经很好地实现了，为了提高效率避免重复建设</description>
    </item>
    
    <item>
      <title>iOS 中的 Category</title>
      <link>https://kingcos.me/posts/2019/category_in_ios/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/category_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-16 优化结构 - - 2019-04-13 首次提交 objc4-750、xnu-4903.221.2 Category in iOS 2019-10-23 添加首图，细节微调 - - Preface iOS 中的 Category 中文常译作分类、类别（为表述统一，本文将使用 Category 特指该技术）。我们经常会使用 Category 来</description>
    </item>
    
    <item>
      <title>浅尝 objc_msgSend</title>
      <link>https://kingcos.me/posts/2019/objc_msgsend/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objc_msgsend/</guid>
      <description>Date Notes Refers. 2019-07-20 首次提交 objc4-750.1 2019-09-07 完成「缓存、动态方法解析」等部分 Obj-C 中的对象 - kingcos 2019-10-21 补充《Effective Objective-C 2.0》相关内容 《〈编写高质量 iOS 与 OS X 代码的 52 个有效方法〉阅读笔记 - kingcos》 Preface Obj-C 中方法调用的本质是</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;load 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;load_in_ios/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;load_in_ios/</guid>
      <description>Release Notes ↕ Date Notes Source Code Demo 2019-04-20 首次提交 objc4-750 Load_Obj-C_Demo 2019-09-13 增加 Swift 等部分 - - Preface 在 iOS 开发中，我们经常会使用 +load 方法来做一些在 main 函数之前的操作，比如方法交换（Method Swizzle）等。那么本文就来简单了解下 iOS 中 +load 方法。 What iOS 中的 +load</description>
    </item>
    
    <item>
      <title>Obj-C 中的 isa 指针</title>
      <link>https://kingcos.me/posts/2019/isa_in_objc/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/isa_in_objc/</guid>
      <description>Date Notes Refer. 2019-08-18 首次提交 objc4-750.1 Preface isa 指针是所有 Obj-C 对象中都拥有的一个成员。因为除了继承链之外，Obj-C 还特有一条从实例对象到类对象、元类对象的链。而后者正是依靠 isa 而串联起来的，那么本文就将结合源码谈谈 Obj-C 中的 isa。</description>
    </item>
    
    <item>
      <title>Xcode 中的 Link Map 文件</title>
      <link>https://kingcos.me/posts/2019/link_map_file_in_xcode/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/link_map_file_in_xcode/</guid>
      <description>Date Notes Xcode Swift 2019-04-01 首次提交 10.1 - 2019-04-16 增加 Swift 项目 10.1 4.2 2019-07-28 增加目录导图，折叠过长内容 - - Preface Link Map File，译作链接映射文件（下文将称 Link Map 文件）。Xcode 在构建可执行文件之前，需要先编译为目标文件（Object File）</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 中的 const、static &amp; extern</title>
      <link>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</guid>
      <description>Release Notes ↕ Date Notes Env 2019-07-23 首次提交 clang++、macOS 10.14.4 2021-04-25 完善 static 一节 - const 基础类型 int a = 0; a = 10; 对于基础类型，其在内存中存储的即是该类型的变量本身，经过 const 修饰后，此处的变量不可变，即常量。const 的位置并不</description>
    </item>
    
    <item>
      <title>iOS 中的关联对象</title>
      <link>https://kingcos.me/posts/2019/associated_objects_in_ios/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/associated_objects_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-05-18 首次提交 objc4-750 - Preface 提到 iOS 中的关联对象，即 Associated Objects，又可以算是一项利用 Runtime 的「黑魔法」。然而作为初学者，很难从其名称联想到是为谁关联对象，以及是如何关联对象的，那么今天就来一起研究下 iOS 中的</description>
    </item>
    
    <item>
      <title>[译] 在 Objective-C API 中指定可空性</title>
      <link>https://kingcos.me/posts/2019/nullability_in_obj-c/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/nullability_in_obj-c/</guid>
      <description>作者 原文链接 Apple Developer Designating Nullability in Objective-C APIs 使用可空性（Nullability）标志或标志一块区域，以控制将 Objective-C 声明导入 Swift 中的方式。 概览 在 Objective-C 中，常用可以为空的指针来和对象的引用打交道，这（个空）就是 Objective-C 中的 nil。在 Swift 中，</description>
    </item>
    
    <item>
      <title>Swift/Obj-C 混编项目升级 Swift 5.0 踩坑</title>
      <link>https://kingcos.me/posts/2019/swift_4_to_5/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_4_to_5/</guid>
      <description>Date Note 2019-05-08 Swift 4.2 -&amp;gt; 5.0 2019-07-08 完善内容 Preface 在 ABI 稳定前，每次 Swift 升级都是一个比较「痛苦」的体验。这次笔者花费约总共一天时间将 Swift/Obj-C 混编项目升级到 Swift 5.0，其中还是有一些踩坑经验值得分享的。 Xcode 为了适配 Swift 5.0，首先需要安装 Xcode 1</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;initialize 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-21 首次提交 objc4-750 - 2019-05-01 补充细节 - Initialize_Demo Preface 在 iOS 中，经常与 +load 相提并论的一个方法便是 +initialize。从方法名来看，它的作用是进行初始化，但不同于平时使用的 init，+initialize 是一个类方法</description>
    </item>
    
    <item>
      <title>Obj-C &amp; Swift 的类型内省与反射</title>
      <link>https://kingcos.me/posts/2019/type_introspection_and_reflection/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/type_introspection_and_reflection/</guid>
      <description>Date Notes Swift Demo 2019-04-08 首次提交 4.2 Type Introspection and Reflection Preface 许多编程语言中都有类型内省（又称自省，Introspection）和反射（Reflection）这两个概念，本文将探讨一下 Obj-C 和 Swift 中类型内省和反射的相关概念与具体使用。 What 维</description>
    </item>
    
    <item>
      <title>iOS 中的 KVC</title>
      <link>https://kingcos.me/posts/2019/kvc_in_ios/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvc_in_ios/</guid>
      <description>Date Notes 2019-03-25 首次提交 Preface KVC，即 Key-Value Coding，译作键值编码（下文简称 KVC）。当对象兼容 KVC 时，可以通过统一的 API 访问对象中某个键对应的属性值。Cocoa 中的许多功能都依赖 KVC，比如，KVO、Cocoa 绑定</description>
    </item>
    
    <item>
      <title>Obj-C 中的重载与重写</title>
      <link>https://kingcos.me/posts/2019/override_and_overload_in_obj-c/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/override_and_overload_in_obj-c/</guid>
      <description>Date Platform 2019-03-20 macOS 10.14.2 Preface 重载（Overload）和重写（Override）是面向对象语言中十分基本的两个概念，本文将谈谈 Obj-C 中的重载与重写。 重载 In some programming languages, function overloading or method overloading is the ability to create multiple functions of the same name with different implementations. Calls to an overloaded function will run a specific implementation of that</description>
    </item>
    
    <item>
      <title>iOS 中的 KVO</title>
      <link>https://kingcos.me/posts/2019/kvo_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvo_in_ios/</guid>
      <description>Date Notes 2019-03-13 首次提交 Preface KVO 即 Key-Value Observing，译作键值监听（下文简称 KVO），通常用于监听对象的某个特定属性值的变化。本文将由浅入深，谈谈 iOS 中的 KVO。 How #import &amp;#34;ViewController.h&amp;#34; @interface Computer : NSObject @property (nonatomic, assign) int buttonClickTimes; @end @implementation Computer @end @interface ViewController () @property (nonatomic, strong) Computer *cpt; @end @implementation</description>
    </item>
    
    <item>
      <title>iOS 中的 NSObject</title>
      <link>https://kingcos.me/posts/2019/nsobject_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/nsobject_in_ios/</guid>
      <description>Date Notes Source Code 2019-03-13 首次提交 objc4-750、libmalloc-166.220.1、glibc-2.29 NSObject 实例对象的大小 // NSObject Obj-C -&amp;gt; C NSObject_IMPL struct NSObject_IMPL { Class isa; }; // 指向 objc_class 结构体的指针 typedef struct objc_class *Class; 将 Obj-C 源码通过 clang -rewrite-objc 翻译为 C++（其实</description>
    </item>
    
    <item>
      <title>Objective-C 与 Swift 桥接中的坑</title>
      <link>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</guid>
      <description>Date Notes 2019-01-17 添加「Optional 与 Nullability」 添加「NSNotificationName 与 Notification.Name」 Preface Objective-C 与 Swift 的混编是全面转向 Swift 中的必经之路，本文即是这一过程中的踩坑「</description>
    </item>
    
    <item>
      <title>浅谈 iOS 应用启动过程</title>
      <link>https://kingcos.me/posts/2017/ios_app_start_up/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/ios_app_start_up/</guid>
      <description>Date Notes Swift Xcode 2017-05-26 CS193p UIApplication 3.1 8.3.2 2017-03-28 首次提交 3.0 8.2.1 Preface 首先要感谢没故事的卓同学大大送的泊学会员，在泊学学了几节课，了解了很多不同角度的 iOS 开发知识。这篇文章就启发自其 iOS 101 中的一个纯手工的 Single View Application 一文。但本文将更加深入的叙述了</description>
    </item>
    
  </channel>
</rss>

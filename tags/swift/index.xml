<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on kingcos</title>
    <link>https://kingcos.me/tags/swift/</link>
    <description>Recent content in Swift on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS 多线程技术实践之 @synchronized（四）</title>
      <link>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</guid>
      <description>Release Notes ↕ Date Notes 2021-06-01 首次提交 objc4-818.2 What 大致流程 为了保护代码的并发执行，我们尝试使用 @synchronized 即同步代码块写一段代码： // SomeClass.m #import &amp;lt;Foundation/Foundation.h&amp;gt; @implementation SomeClass - (void)someFunc { printf(&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;\n&amp;#34;); @synchronized(self) { printf(&amp;#34;Protected code.\n&amp;#34;); } printf(&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;\n&amp;#34;); } @end 接着，我们使用 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc SomeClass.m -o SomeClass.cpp 命令将以上代码重写为 C++，并找到 someFunc</description>
    </item>
    
    <item>
      <title>[译] Swift 编译器性能</title>
      <link>https://kingcos.me/posts/2020/swift_compiler_performance/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_compiler_performance/</guid>
      <description>作者 原文链接 版本 apple/swift Swift Compiler Performance b23b335 本文档是一份关于理解、诊断并报告 Swift 编译器编译性能问题的指南。即：编译器编译代码的速度，而非代码运行的速度。 虽然本指南较长，但内容其实相当简单。在很大程度上，性能分析需要耐住性</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 访问控制</title>
      <link>https://kingcos.me/posts/2016/swift_access_control/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2016/swift_access_control/</guid>
      <description>Release Notes ↕ Date Notes Env 2016-10-20 首次提交 Xcode 8.1 Beta 3 Swift 3.0 2021-05-24 全文重构 Xcode 12.5 Swift 5.4 /* .table_div_1 table th:first-of-type { width: 20%; } .table_div_1 table th:nth-of-type(2) { width: 20%; } .table_div_1 table th:nth-of-type(3) { width: 20%; } */ .table_div_1 table th:nth-of-type(4) { width: 40%; } 限制等级 跨模块*访问 跨文件访问 细节 open 🉑️ 🉑️ 1. 仅可修饰类与类的成员变量 2. 修饰的类可被跨模</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - Swift Tips</title>
      <link>https://kingcos.me/posts/2020/swift_tips/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_tips/</guid>
      <description>Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。那么作为起始篇，随着整个系列的进行，其中「遗」漏的基本使用内容将在本文中得</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 方法</title>
      <link>https://kingcos.me/posts/2020/swift_methods/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_methods/</guid>
      <description>Date Notes 2020-09-20 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究 Swift 中的方法。 结构体 Swift 中的结构体是值类型</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 属性</title>
      <link>https://kingcos.me/posts/2016/swift_properties/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2016/swift_properties/</guid>
      <description>Date Notes Info 2020-09-18 纳入 Swift 拾遗系列，并重新整理完善 Swift 5.3, Xcode 12.0 2017-04-27 扩充「延迟存储属性」部分并新增「devxoul/Then」一节 Swift 3.1, Xcode 8.3.2 2016-10-26 首次提交 Swift 3.0, Xcode 8.1 Beta 3 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章</description>
    </item>
    
    <item>
      <title>Swift 中的 @autoclosure</title>
      <link>https://kingcos.me/posts/2018/swift_autoclosure/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/swift_autoclosure/</guid>
      <description>Date Notes Swift Xcode Source Code 2020-08-23 完善排版与表述 5.1 11.3 - 2018-04-05 更新并明确源代码所用版本 4.1 9.3 Swift 4.1 Release 2018-01-13 首次提交 4.0.3 9.2 - Preface Swift 中的闭包（Closure）十分类似于 Obj-C 中的 Block，但不仅写法更加简洁，也带来了许多新的特性。@autocl</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 闭包</title>
      <link>https://kingcos.me/posts/2020/swift_closure/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_closure/</guid>
      <description>Date Notes 2020-08-16 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究 Swift 中的闭包（Closure）。 闭包捕获</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 汇编</title>
      <link>https://kingcos.me/posts/2020/swift_with_asm/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_with_asm/</guid>
      <description>Date Notes 2020-08-10 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。本文涉及了各个部分关于汇编的内容。 struct &amp;amp; class struct 分配在栈区 // main.swift struct Foo</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - struct &amp; class</title>
      <link>https://kingcos.me/posts/2020/swift_struct_and_class/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_struct_and_class/</guid>
      <description>Date Notes 2020-08-06 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究 Swift 中的枚举 struct 和 class。&amp;quot;</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - enum</title>
      <link>https://kingcos.me/posts/2020/swift_enum/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_enum/</guid>
      <description>Date Notes 2020-08-01 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究 Swift 中的枚举 enum。 内存布局 内存布局（</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - 内联函数</title>
      <link>https://kingcos.me/posts/2020/swift_inline/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_inline/</guid>
      <description>Date Notes 2020-07-26 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究 Swift 中的内联函数。 编译器优化等级 由于内联</description>
    </item>
    
    <item>
      <title>Swift 拾遗 - inout</title>
      <link>https://kingcos.me/posts/2020/swift_inout/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_inout/</guid>
      <description>Date Notes 2020-07-25 首次提交 Preface 《Swift 拾遗》是一个关于 Swift 的新文章专辑，这个系列的文章将不会涉及基本语法的层面，而是尝试从底层「拾」起之前所忽视的内容。今天我们将一起简单探究修饰 Swift 中函数参数的 inout 关键字。 本质 我们声</description>
    </item>
    
    <item>
      <title>iOS 中的数组</title>
      <link>https://kingcos.me/posts/2020/array_in_ios/</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/array_in_ios/</guid>
      <description>Preface 数组，是我们在开发中经常使用的数据结构，其使用一段连续的内存空间存储。在 Obj-C 中，数组的类型分为 NSArray 不可变数组 Objective-C NSArray &amp;amp; NSMutableArray 我们都知道，NSArray 是 Obj-C 中的不可变数组，而 NSMutableArray 是 Obj-C 的可变数组。这里我将 Obj-C 中几乎所有</description>
    </item>
    
    <item>
      <title>[译] Swift 编译器</title>
      <link>https://kingcos.me/posts/2020/swift_compiler/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_compiler/</guid>
      <description>作者 原文链接 Swift.org Swift Compiler Swift 主仓库中包含了 Swift 编译器和标准库的源代码、相关组件，如 SourceKit（用于 IDE 集成），以及 Swift 回归测试套件和实现级别的文档。 Swift 驱动库中包含了 Swift 编译器驱动（Driver）的新版实现，目</description>
    </item>
    
    <item>
      <title>iOS 多线程技术实践之 pthreads（一）</title>
      <link>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2019-03-08 首次提交 4.2 10.1 2019-12-14 内容重整 5.1 10.3 Preface 在现代计算机中，操作系统一般都会支持多进程（Process）以及多线程（Thread）技术，使得其可以同时运行多个程序且效率更高。而我们在开发 iOS app 中也时常需</description>
    </item>
    
    <item>
      <title>iOS 中的库与框架</title>
      <link>https://kingcos.me/posts/2019/libraries_in_ios/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/libraries_in_ios/</guid>
      <description>Date Notes 2019-09-14 首次提交，持续更新完善 2019-09-22 适配 Xcode 11，持续更新完善 2019-10-29 添加 Demo：libraries_in_ios-demo Preface 随着软件工程的发展，很多我们需要的功能前人都已经很好地实现了，为了提高效率避免重复建设</description>
    </item>
    
    <item>
      <title>SwiftTips in Reverse</title>
      <link>https://kingcos.me/posts/2019/swift_tips_in_reverse/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_tips_in_reverse/</guid>
      <description>Preface SwiftTips 是 John Sundell 在 GitHub 开源的 Swift 小技巧列表。随着 Swift 5 的发布以及 ABI 稳定，是时候再学习一遍 Swift 啦。本文将是该列表的实践版本，并保证文中代码的可运行性，且尽可能做到倒序日更。（But why in reverse? 🤫） 关于本文的代码，都可以在 swift-tips-in-practice</description>
    </item>
    
    <item>
      <title>Xcode 中的 Link Map 文件</title>
      <link>https://kingcos.me/posts/2019/link_map_file_in_xcode/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/link_map_file_in_xcode/</guid>
      <description>Date Notes Xcode Swift 2019-04-01 首次提交 10.1 - 2019-04-16 增加 Swift 项目 10.1 4.2 2019-07-28 增加目录导图，折叠过长内容 - - Preface Link Map File，译作链接映射文件（下文将称 Link Map 文件）。Xcode 在构建可执行文件之前，需要先编译为目标文件（Object File）</description>
    </item>
    
    <item>
      <title>[译] 摊平由「try?」造成的嵌套可选</title>
      <link>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</guid>
      <description>提案: SE-0230 作者: BJ Homer 审查管理员: John McCall 状态: 已实现 (Swift 5) 实现: apple/swift#16942 审查: (论坛帖子) (验收) 介绍 Swift 中的 try? 语句目前很容易引入嵌套可选（译者注：嵌套可选即类似 var foo: String?? 可选的可选类型）。而用户难以推断嵌套可选的产生原</description>
    </item>
    
    <item>
      <title>Swift/Obj-C 混编项目升级 Swift 5.0 踩坑</title>
      <link>https://kingcos.me/posts/2019/swift_4_to_5/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_4_to_5/</guid>
      <description>Date Note 2019-05-08 Swift 4.2 -&amp;gt; 5.0 2019-07-08 完善内容 Preface 在 ABI 稳定前，每次 Swift 升级都是一个比较「痛苦」的体验。这次笔者花费约总共一天时间将 Swift/Obj-C 混编项目升级到 Swift 5.0，其中还是有一些踩坑经验值得分享的。 Xcode 为了适配 Swift 5.0，首先需要安装 Xcode 1</description>
    </item>
    
    <item>
      <title>Obj-C &amp; Swift 的类型内省与反射</title>
      <link>https://kingcos.me/posts/2019/type_introspection_and_reflection/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/type_introspection_and_reflection/</guid>
      <description>Date Notes Swift Demo 2019-04-08 首次提交 4.2 Type Introspection and Reflection Preface 许多编程语言中都有类型内省（又称自省，Introspection）和反射（Reflection）这两个概念，本文将探讨一下 Obj-C 和 Swift 中类型内省和反射的相关概念与具体使用。 What 维</description>
    </item>
    
    <item>
      <title>[译] Swift 名字修饰（Name Mangling）</title>
      <link>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</guid>
      <description>作者 原文链接 Gwynne Raskind Friday Q&amp;A 2014-08-08: Swift Name Mangling 译者注 1.「Name Mangling」在本文中将译作「名字修饰」，这主要是参考了 Wikipedia 中关于该项技术的翻译； 2.「Friday Q&amp;amp;A」中文意为「周五问与答」，但限于该名</description>
    </item>
    
    <item>
      <title>Combine</title>
      <link>https://kingcos.me/posts/draft/combine_1/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/draft/combine_1/</guid>
      <description>Foundation and UIKit/AppKit 中的异步机制： NotificationCenter：事件发生时执行一段代码（eg. 设备方向改变，软键盘显示或隐藏） 代理（Delegate）模式：定义代表另一个对象的代理对象（eg. AppDelegate 中定义当新的</description>
    </item>
    
    <item>
      <title>Objective-C 与 Swift 桥接中的坑</title>
      <link>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</guid>
      <description>Date Notes 2019-01-17 添加「Optional 与 Nullability」 添加「NSNotificationName 与 Notification.Name」 Preface Objective-C 与 Swift 的混编是全面转向 Swift 中的必经之路，本文即是这一过程中的踩坑「</description>
    </item>
    
    <item>
      <title>在 Swift 中尝试对数组元素弱引用</title>
      <link>https://kingcos.me/posts/2018/weakly_collections/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/weakly_collections/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2018-03-15 更新部分表述，并将题目扩展至集合类型 4.0 9.2 2018-03-08 首次提交 4.0 9.2 2021-05-25 内容组织微调 - - What 在 Swift 中，当我们创建一个数组，那么数组本身对于添加进去的对象元素默认是强引用（Strong）的，这会使得元素的引</description>
    </item>
    
    <item>
      <title>浅谈 iOS 应用启动过程</title>
      <link>https://kingcos.me/posts/2017/ios_app_start_up/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/ios_app_start_up/</guid>
      <description>Date Notes Swift Xcode 2017-05-26 CS193p UIApplication 3.1 8.3.2 2017-03-28 首次提交 3.0 8.2.1 Preface 首先要感谢没故事的卓同学大大送的泊学会员，在泊学学了几节课，了解了很多不同角度的 iOS 开发知识。这篇文章就启发自其 iOS 101 中的一个纯手工的 Single View Application 一文。但本文将更加深入的叙述了</description>
    </item>
    
    <item>
      <title>探究 UIViewController 生命周期</title>
      <link>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-10 首次提交 3.0 8.2.1 前言 对象的生命周期一直是开发者所需要关心的，教授 CS193p 的老师 Paul 也详细的讲述了 UIViewController 的生命周期。为了记述这一过程，故作此文。由于 Xcode 提供了纯代码和 Storyboard（Xib 同理）两种</description>
    </item>
    
    <item>
      <title>Swift 中的 Selector</title>
      <link>https://kingcos.me/posts/2017/swift_selector/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/swift_selector/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-01-31 首次发布 （简书 &amp;amp; 掘金） 3.0 8.2.1 Preface Focus，即专注。笔者希望可以尽力将一些不是那么透彻的点透过 Demo 和 Source Code 而看到其本质。 由于国内软件开发仍很大程度依赖国外的语言、知识，所以该博客中的术语将使用</description>
    </item>
    
    <item>
      <title>初探 iOS 中自定义 UIView 的初始化过程</title>
      <link>https://kingcos.me/posts/2016/uiview_life_cycle/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2016/uiview_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-07 首次提交 3.0 8.2 Beta 1 awakeFromNib() init(frame:) init(coder:) Update 2017.03.07 - UIView 生命周期 Demo 由于本文之前虽有代码，但没有相应的 Demo，借探究 UIViewController 生命周期之际，加入了 UIView 生命周期的 Demo。您可以在 https://github.com/kingcos/UIViewController-UIView-LifecycleDemo 查看、下载。 2017.02.27 - CS193p Lecture 04 通常，UIView</description>
    </item>
    
  </channel>
</rss>

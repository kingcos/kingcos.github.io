<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Read on iBlog</title>
    <link>/tags/read/</link>
    <description>Recent content in Read on iBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/read/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Effective Objective-C 2.0 笔记</title>
      <link>/posts/2019/effective_objc_2.0_notes/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/effective_objc_2.0_notes/</guid>
      <description>Book ISBN     编写高质量 iOS 与 OS X 代码的 52 个有效方法 9787111451297   Date Chapters   2019-05-01     熟悉 Objective-C 了解 Objective-C 语言的起源  消息结构（Message Structure）的语言，运行时执行的代码由运行环境决定；函数调用（Function Calling）的语言，运行时所执行的代码由编译器决定，对于多态，则按照虚函数表（Virtual Method Table）寻找。 运行时组件（Runtime Component） 本质上是一种与开发者所编写代码相链接的「动态库（Dynamic Library），这样的好处是只需要更新运行时组件（无需重新编译）即可提升程序性能。 Obj-C 是 C 的超集。 Obj-C 中的对象所占内存总是分配在堆空间（Heap Stack）；而指向对象的指针所占内存总是分配在栈帧（Stack Frame）中。 堆中的内存需要程序员自己管理，栈中的内存会在其栈帧弹出（Pop）时自动清理。 创建对象相比创建结构体（C 结构体）需要额外开销，例如分配和释放堆内存等。  // @&amp;quot;string&amp;quot; 被分配在堆上；a &amp;amp; b &amp;amp; c 被分配在栈上 NSString *a = @&amp;quot;string&amp;quot;; NSString *b = a; NSString *c = @&amp;quot;string&amp;quot;; // (lldb) p a // (__NSCFConstantString *) $0 = 0x0000000100001020 @&amp;quot;string&amp;quot; // (lldb) p b // (__NSCFConstantString *) $1 = 0x0000000100001020 @&amp;quot;string&amp;quot; // (lldb) p c // (__NSCFConstantString *) $2 = 0x0000000100001020 @&amp;quot;string&amp;quot; // (lldb) p &amp;amp;a // (NSString **) $4 = 0x00007ffeefbff548 // (lldb) p &amp;amp;b // (NSString **) $5 = 0x00007ffeefbff540 // (lldb) p &amp;amp;c // (NSString **) $6 = 0x00007ffeefbff538 // (lldb)  在类的头文件中尽量少引入其他头文件  当需要知道有一个类的存在时，而不关心其内部细节时，可以使用向前声明（Forward Declaring）告知编译器，即可以在 .</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translation on kingcos</title>
    <link>https://kingcos.me/tags/translation/</link>
    <description>Recent content in Translation on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/translation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译] Swift 编译器</title>
      <link>https://kingcos.me/posts/2020/swift_compiler/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_compiler/</guid>
      <description>作者 原文链接 Swift.org Swift Compiler Swift 主仓库中包含了 Swift 编译器和标准库的源代码、相关组件，如 SourceKit（用于 IDE 集成），以及 Swift 回归测试套件和实现级别的文档。 Swift 驱动库中包含了 Swift 编译器驱动（Driver）的新版实现，目</description>
    </item>
    
    <item>
      <title>[译] 摊平由「try?」造成的嵌套可选</title>
      <link>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</guid>
      <description>提案: SE-0230 作者: BJ Homer 审查管理员: John McCall 状态: 已实现 (Swift 5) 实现: apple/swift#16942 审查: (论坛帖子) (验收) 介绍 Swift 中的 try? 语句目前很容易引入嵌套可选（译者注：嵌套可选即类似 var foo: String?? 可选的可选类型）。而用户难以推断嵌套可选的产生原</description>
    </item>
    
    <item>
      <title>[译] 在 Objective-C API 中指定可空性</title>
      <link>https://kingcos.me/posts/2019/nullability_in_obj-c/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/nullability_in_obj-c/</guid>
      <description>作者 原文链接 Apple Developer Designating Nullability in Objective-C APIs 使用可空性（Nullability）标志或标志一块区域，以控制将 Objective-C 声明导入 Swift 中的方式。 概览 在 Objective-C 中，常用可以为空的指针来和对象的引用打交道，这（个空）就是 Objective-C 中的 nil。在 Swift 中，</description>
    </item>
    
    <item>
      <title>[译] URL 加载系统</title>
      <link>https://kingcos.me/posts/2019/url_loading_system/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/url_loading_system/</guid>
      <description>作者 原文链接 Apple Inc. URL Loading System 使用标准互联网协议与 URL 交互，并和服务器通信。 框架： Foundation 概览 URL 加载系统通过标准协议比如 HTTPS 或自建协议提供对 URL 标识资源的访问。加载过程是异步的，所以 App 可以保持响应并当数据到达或出错时进行</description>
    </item>
    
    <item>
      <title>[译] Swift 名字修饰（Name Mangling）</title>
      <link>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</guid>
      <description>作者 原文链接 Gwynne Raskind Friday Q&amp;A 2014-08-08: Swift Name Mangling 译者注 1.「Name Mangling」在本文中将译作「名字修饰」，这主要是参考了 Wikipedia 中关于该项技术的翻译； 2.「Friday Q&amp;amp;A」中文意为「周五问与答」，但限于该名</description>
    </item>
    
    <item>
      <title>[译] 为 App 执行一次性设置</title>
      <link>https://kingcos.me/posts/2018/performing_one-time_setup_for_your_app/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/performing_one-time_setup_for_your_app/</guid>
      <description>作者 原文链接 Apple Inc. Performing One-Time Setup for Your App 确保 App 环境被正确配置。 框架 UIKit 概览 当用户第一次启动 App，我们可能希望通过一些一次性任务预备 App 环境。举个例子，可能想要： 从服务器下载必要的数据。 从 App 包（bundle）中拷贝文</description>
    </item>
    
    <item>
      <title>[译] 关于 App 启动顺序</title>
      <link>https://kingcos.me/posts/2018/about_the_app_launch_sequence/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/about_the_app_launch_sequence/</guid>
      <description>作者 原文链接 Apple Developer About the App Launch Sequence 学习在启动时的代码执行顺序。 概览 一个 App 的启动需要经过许多复杂的步骤，其中大部分由 UIKit 自动处理。在启动过程中，UIKit 会调用 App 代理中的方法，因此我们可以执行自定义的任务。图中的</description>
    </item>
    
    <item>
      <title>[译] 起底 SourceKit</title>
      <link>https://kingcos.me/posts/2018/uncovering_sourcekit/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/uncovering_sourcekit/</guid>
      <description>作者 原文链接 JP Simard Uncovering SourceKit 为了支持一门新颖的语言（译者注：这里指 Swift），灵活的实时 IDE 特性，以及令人印象深刻的跨语言协同能力（译者注：这里指 Swift 与 Obj-C），Apple 必须开发一些新的基础工具。这里我们</description>
    </item>
    
    <item>
      <title>[译] Swift 编译器性能</title>
      <link>https://kingcos.me/posts/2020/swift_compiler_performance/</link>
      <pubDate>Sun, 25 Jun 2000 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_compiler_performance/</guid>
      <description>作者 原文链接 版本 apple/swift Swift Compiler Performance 5dcc32f 本文档是一份关于理解、诊断并报告 Swift 编译器编译性能问题的指南。即：编译器编译代码的速度，而非代码运行的速度。 虽然本指南较长，但内容其实相当简单。在很大程度上，性能分析需要耐住性</description>
    </item>
    
  </channel>
</rss>

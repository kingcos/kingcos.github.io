<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Focus on kingcos</title>
    <link>https://kingcos.me/tags/focus/</link>
    <description>Recent content in Focus on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/focus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从 npm 说开去...（草稿）</title>
      <link>https://kingcos.me/posts/2023/from_npm_to_future/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2023/from_npm_to_future/</guid>
      <description>概念摸底 Node.js 根据维基百科： Node.js is a cross-platform, open-source server environment that can run on Windows, Linux, Unix, macOS, and more. Node.js is a back-end JavaScript runtime environment, runs on the V8 JavaScript Engine, and executes JavaScript code outside a web browser. Node.js 是一个跨平台、开源的服务器环境，可以运行在 Windows、Linux、Unix、macOS 以及更多</description>
    </item>
    
    <item>
      <title>Combine 基础</title>
      <link>https://kingcos.me/posts/2022/swift_combine_basics/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/swift_combine_basics/</guid>
      <description>Release Notes ↕ Date Notes 2022-06-29 首次提交 Preface Combine 是 Apple 为响应式编程推出的全新框架。 概览 Combine 中最基本的三个元素是： Pulisher（发布者）-&amp;gt; Operator（操作符）-&amp;gt; Subscriber（订阅者） 即发布事件、操</description>
    </item>
    
    <item>
      <title>Swift 中的 ObservableObject</title>
      <link>https://kingcos.me/posts/2022/swift_observable_object/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/swift_observable_object/</guid>
      <description>Release Notes ↕ Date Notes 2022-06-29 首次提交 Preface ObservableObject 相比 @State 更自由一些。仅 class 类型可以遵守该协议。视图使用时可以声明为 @ObservedObject，也可使用 @EnvironmentObject 注入。 实现 先来看下 ObservableObject 的部分代码： /// A type of object with a publisher that emits before the object has changed. /// 一种带有</description>
    </item>
    
    <item>
      <title>Swift 中的 propertyWrapper</title>
      <link>https://kingcos.me/posts/2022/swift_property_wrapper/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/swift_property_wrapper/</guid>
      <description>Release Notes ↕ Date Notes 2022-06-28 首次提交 Preface SwiftUI 中，我们经常可以见到 @State、@Binding 等类似 @ 开头的代码，其官方名称为 Property Wrapper —— 属性包装器。 @State 在 Xcode 中，我们可以进入到 @State 的定义中，即： /// A property wrapper type that can read and write a value managed by SwiftUI. /// 属</description>
    </item>
    
    <item>
      <title>浅学 git rebase</title>
      <link>https://kingcos.me/posts/2022/git_rebase/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/git_rebase/</guid>
      <description>Release Notes ↕ Date Notes 2022-04-16 首次提交 🤔 「什么是 git？什么又是 rebase？我这是关注了个什么？？？」 不好意思啦～非技术的同学可能会有点懵，甚至有点想~~取关~~...不过等等！​这只是一篇技术类内容，取关就见外啦，</description>
    </item>
    
    <item>
      <title>计算机网络实例（三）— ping 的过程</title>
      <link>https://kingcos.me/posts/2022/network_demos_3/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/network_demos_3/</guid>
      <description>Release Notes ↕ Date Notes 2022-03-13 首次提交 ARP &amp;amp; ICMP 这里我们尝试 ping 一台位于同一个 Wi-Fi 局域网下的 iPhone 的 IP。在开始 ping 之前，首先需要打开 Wireshark（m1 芯片的 Mac 也可正常使用 Intel 版本的 Wireshark）并开启抓包，并在命令行中查</description>
    </item>
    
    <item>
      <title>计算机网络实例（二）— 子网划分 &amp; 合并网段</title>
      <link>https://kingcos.me/posts/2022/network_demos_2/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/network_demos_2/</guid>
      <description>Release Notes ↕ Date Notes 2022-03-08 首次提交 子网划分 目的：避免浪费 IP 地址资源。 原理：借用主机位作为子网位，划分出多个子网。 等长子网划分 等长子网划分（Fixed Length Subnet Mask）：每个子网的可用 IP 地址数量相同。 等长 · C 类一分为二 将</description>
    </item>
    
    <item>
      <title>计算机网络实例（一）— 在同一网段与不同网段中传递数据</title>
      <link>https://kingcos.me/posts/2022/network_demos_1/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2022/network_demos_1/</guid>
      <description>Release Notes ↕ Date Notes 2022-03-06 首次提交 网络拓扑结构： 同一网段 发送方：192.168.1.10（PC4） 接收方：192.168.1.11（PC5） 初始状态 PC4 ARP 缓存： C:\&amp;gt;arp -a No ARP Entries Found 交换机 MAC 地址表： Switch#show mac-address-table Mac Address Table ------------------------------------------- Vlan Mac Address Type Ports ---- ----------- --------</description>
    </item>
    
    <item>
      <title>计算机网络核心笔记</title>
      <link>https://kingcos.me/posts/2021/computer_network_notes/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2021/computer_network_notes/</guid>
      <description>Release Notes ↕ Date Notes 2021-05-22 首次提交 基础知识 ARP 欺骗 TODO. 传输层 ★ .table_div_4 table th:first-of-type { width: 20%; } TCP UDP 连接性 面向连接（需要基于连接） 无连接 可靠性 可靠传输，不丢包 不可靠传输，尽最大努力交付，可能丢包 首部大小 大 小 传输速率 慢 快 资源消耗 大 小 应用场景</description>
    </item>
    
    <item>
      <title>深入 Vue（三） —— Vue 中的 el 是如何被挂载的？</title>
      <link>https://kingcos.me/posts/2023/dive_in_vue_03/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2023/dive_in_vue_03/</guid>
      <description>Release Notes ↕ Date Notes 2023-02-22 首次提交 开始 Watcher 的具体功能类似 miniVue 实现中的 Watcher，负责依赖收集与通知。这里我们暂时略过 Watcher 的源码分析，先对 _render 与 _update 一探究竟： function lifecycleMixin(Vue) { Vue.prototype._update = function (vnode, hydrating) { var vm = this; var prevEl = vm.$el; var prevVnode = vm._vnode; var restoreActiveInstance = setActiveInstance(vm); vm._vnode = vnode; // Vue.prototype.__patch__ is injected</description>
    </item>
    
    <item>
      <title>深入 Vue（二）—— Vue 2 的运行时与编译器</title>
      <link>https://kingcos.me/posts/2023/dive_in_vue_02/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2023/dive_in_vue_02/</guid>
      <description>Release Notes ↕ Date Notes 2023-02-22 首次提交 前言 在深入 Vue 源码前，我们再尝试弄清楚一些模糊的概念。在早期使用 Vue CLI 创建 Vue 2 项目时，会有以下选项： ➜ demo vue init webpack my-project ? Project name my-project ? Project description A Vue.js project ? Author kingcos &amp;lt;2821836721v@gmail.com&amp;gt; ? Vue build (Use arrow keys) ❯ Runtime + Compiler: recommended for most users Runtime-only: about 6KB lighter min+gzip, but templates (or</description>
    </item>
    
    <item>
      <title>深入 Vue（一）—— 从学习 miniVue 2.x 实现开始</title>
      <link>https://kingcos.me/posts/2023/dive_in_vue_01/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2023/dive_in_vue_01/</guid>
      <description>Release Notes ↕ Date Notes 2023-02-21 首次提交 前言 Vue 是我们常用的 JavaScript 框架，然而仅仅作为使用者总归是有些肤浅。于是，从今天开始，我要开始深入研究 Vue 原理，通过源码窥探其内部机制。 第一篇文章我们将从一个小型的 Vue 实现着手。注意，本文的主</description>
    </item>
    
    <item>
      <title>Swift 中的 @autoclosure</title>
      <link>https://kingcos.me/posts/2018/swift_autoclosure/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/swift_autoclosure/</guid>
      <description>Date Notes Swift Xcode Source Code 2020-08-23 完善排版与表述 5.1 11.3 - 2018-04-05 更新并明确源代码所用版本 4.1 9.3 Swift 4.1 Release 2018-01-13 首次提交 4.0.3 9.2 - Preface Swift 中的闭包（Closure）十分类似于 Obj-C 中的 Block，但不仅写法更加简洁，也带来了许多新的特性。@autocl</description>
    </item>
    
    <item>
      <title>iOS 中的断言</title>
      <link>https://kingcos.me/posts/2020/assertion_in_ios/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/assertion_in_ios/</guid>
      <description>Date Notes 2020-07-27 首次提交 Preface 断言（Assertion）是我们常用于 Debug 时的得力助手，其使得程序得以崩溃在早期，引起我们足够的重视，保障代码质量又不影响用户的体验。本文将简单介绍 iOS 中的断言类型以及使用方式与原理。 assert NSAssert</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Boolean</title>
      <link>https://kingcos.me/posts/2020/booleans_in_objc/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/booleans_in_objc/</guid>
      <description>Date Notes 2020-06-02 首次提交 2020-06-16 增加「逻辑表达式」一节 Preface Boolean，即布尔值，通常用来表明逻辑中的真或假。但在 Obj-C 中，我们似乎既可以使用 BOOL 又可以使用 bool，既可以使用 YES/NO 又可以使用 true/false，那么它们到底</description>
    </item>
    
    <item>
      <title>MustOverride 源码解读</title>
      <link>https://kingcos.me/posts/2019/dive_into_mustoverride/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/dive_into_mustoverride/</guid>
      <description>Release Notes ↕ Date Notes Source Code Commit / Tag 2019-12-07 首次提交 nicklockwood/MustOverride c63007e / 1.1 2020-01-05 增加 Extension 一节 - - 2021-04-26 增加 __attribute__((used)) 部分内容 - - How 这个库的使用非常简单，我们可以在需要子类必须重写的父类（或其分类）方法中放入 SUBCLASS_MUST_OVERRIDE; 宏即可： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>Obj-C 中的对象</title>
      <link>https://kingcos.me/posts/2019/objects_in_obj-c/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objects_in_obj-c/</guid>
      <description>Date Notes Refer. 2019-03-18 首次提交 objc4-750 2019-08-18 抽离 isa 部分； 重整文章结构 Obj-C 中的 isa 指针 - kingcos 2019-08-29 增加 class_rw_t 等细节 - 2019-12-23 细节微调 objc4-756.2 Preface Obj-C 中的对象分为实例对象（Instance Object）、类对象（Class Object）、以及元类对象（Met</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Block</title>
      <link>https://kingcos.me/posts/2019/block_in_obj-c/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/block_in_obj-c/</guid>
      <description>Date Notes Demo Source Code 2019-07-27 首次提交 - - 2019-11-24 重新整理部分内容；补充《Effective Objective-C 2.0》&amp;amp;《Objective-C 高级编程》相关内容 Block_in_Obj-C objc4-756.2、libclosure-73 Preface 从 OS X Snow Leopard 和 iOS 4</description>
    </item>
    
    <item>
      <title>iOS 中的库与框架</title>
      <link>https://kingcos.me/posts/2019/libraries_in_ios/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/libraries_in_ios/</guid>
      <description>Date Notes 2019-09-14 首次提交，持续更新完善 2019-09-22 适配 Xcode 11，持续更新完善 2019-10-29 添加 Demo：libraries_in_ios-demo Preface 随着软件工程的发展，很多我们需要的功能前人都已经很好地实现了，为了提高效率避免重复建设</description>
    </item>
    
    <item>
      <title>iOS 中的 Category</title>
      <link>https://kingcos.me/posts/2019/category_in_ios/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/category_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-16 优化结构 - - 2019-04-13 首次提交 objc4-750、xnu-4903.221.2 Category in iOS 2019-10-23 添加首图，细节微调 - - Preface iOS 中的 Category 中文常译作分类、类别（为表述统一，本文将使用 Category 特指该技术）。我们经常会使用 Category 来</description>
    </item>
    
    <item>
      <title>浅尝 objc_msgSend</title>
      <link>https://kingcos.me/posts/2019/objc_msgsend/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objc_msgsend/</guid>
      <description>Date Notes Refers. 2019-07-20 首次提交 objc4-750.1 2019-09-07 完成「缓存、动态方法解析」等部分 Obj-C 中的对象 - kingcos 2019-10-21 补充《Effective Objective-C 2.0》相关内容 《〈编写高质量 iOS 与 OS X 代码的 52 个有效方法〉阅读笔记 - kingcos》 Preface Obj-C 中方法调用的本质是</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;load 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;load_in_ios/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;load_in_ios/</guid>
      <description>Release Notes ↕ Date Notes Source Code Demo 2019-04-20 首次提交 objc4-750 Load_Obj-C_Demo 2019-09-13 增加 Swift 等部分 - - Preface 在 iOS 开发中，我们经常会使用 +load 方法来做一些在 main 函数之前的操作，比如方法交换（Method Swizzle）等。那么本文就来简单了解下 iOS 中 +load 方法。 What iOS 中的 +load</description>
    </item>
    
    <item>
      <title>Obj-C 中的 isa 指针</title>
      <link>https://kingcos.me/posts/2019/isa_in_objc/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/isa_in_objc/</guid>
      <description>Date Notes Refer. 2019-08-18 首次提交 objc4-750.1 Preface isa 指针是所有 Obj-C 对象中都拥有的一个成员。因为除了继承链之外，Obj-C 还特有一条从实例对象到类对象、元类对象的链。而后者正是依靠 isa 而串联起来的，那么本文就将结合源码谈谈 Obj-C 中的 isa。</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 中的位域与共用体</title>
      <link>https://kingcos.me/posts/2019/bit_field_union_in_cpp/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/bit_field_union_in_cpp/</guid>
      <description>Date Notes Env 2019-08-17 首次提交 clang++、macOS 10.14.4 Preface C/C++ 中有许多「奇技淫巧」来让开发者能够以效率更高的方式使用内存，这也是一些高级语言着力去避讳的一点，但这种能够直面内存细节的「踏实感」让我个人觉得非常安心。</description>
    </item>
    
    <item>
      <title>Xcode 中的 Link Map 文件</title>
      <link>https://kingcos.me/posts/2019/link_map_file_in_xcode/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/link_map_file_in_xcode/</guid>
      <description>Date Notes Xcode Swift 2019-04-01 首次提交 10.1 - 2019-04-16 增加 Swift 项目 10.1 4.2 2019-07-28 增加目录导图，折叠过长内容 - - Preface Link Map File，译作链接映射文件（下文将称 Link Map 文件）。Xcode 在构建可执行文件之前，需要先编译为目标文件（Object File）</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; 中的 const、static &amp; extern</title>
      <link>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/const_static_extern_in_cpp/</guid>
      <description>Release Notes ↕ Date Notes Env 2019-07-23 首次提交 clang++、macOS 10.14.4 2021-04-25 完善 static 一节 - const 基础类型 int a = 0; a = 10; 对于基础类型，其在内存中存储的即是该类型的变量本身，经过 const 修饰后，此处的变量不可变，即常量。const 的位置并不</description>
    </item>
    
    <item>
      <title>iOS 中的关联对象</title>
      <link>https://kingcos.me/posts/2019/associated_objects_in_ios/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/associated_objects_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-05-18 首次提交 objc4-750 - Preface 提到 iOS 中的关联对象，即 Associated Objects，又可以算是一项利用 Runtime 的「黑魔法」。然而作为初学者，很难从其名称联想到是为谁关联对象，以及是如何关联对象的，那么今天就来一起研究下 iOS 中的</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;initialize 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-21 首次提交 objc4-750 - 2019-05-01 补充细节 - Initialize_Demo Preface 在 iOS 中，经常与 +load 相提并论的一个方法便是 +initialize。从方法名来看，它的作用是进行初始化，但不同于平时使用的 init，+initialize 是一个类方法</description>
    </item>
    
    <item>
      <title>iOS 中的 KVC</title>
      <link>https://kingcos.me/posts/2019/kvc_in_ios/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvc_in_ios/</guid>
      <description>Date Notes 2019-03-25 首次提交 Preface KVC，即 Key-Value Coding，译作键值编码（下文简称 KVC）。当对象兼容 KVC 时，可以通过统一的 API 访问对象中某个键对应的属性值。Cocoa 中的许多功能都依赖 KVC，比如，KVO、Cocoa 绑定</description>
    </item>
    
    <item>
      <title>iOS 中的 KVO</title>
      <link>https://kingcos.me/posts/2019/kvo_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvo_in_ios/</guid>
      <description>Date Notes 2019-03-13 首次提交 Preface KVO 即 Key-Value Observing，译作键值监听（下文简称 KVO），通常用于监听对象的某个特定属性值的变化。本文将由浅入深，谈谈 iOS 中的 KVO。 How #import &amp;#34;ViewController.h&amp;#34; @interface Computer : NSObject @property (nonatomic, assign) int buttonClickTimes; @end @implementation Computer @end @interface ViewController () @property (nonatomic, strong) Computer *cpt; @end @implementation</description>
    </item>
    
    <item>
      <title>iOS 中的 NSObject</title>
      <link>https://kingcos.me/posts/2019/nsobject_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/nsobject_in_ios/</guid>
      <description>Date Notes Source Code 2019-03-13 首次提交 objc4-750、libmalloc-166.220.1、glibc-2.29 NSObject 实例对象的大小 // NSObject Obj-C -&amp;gt; C NSObject_IMPL struct NSObject_IMPL { Class isa; }; // 指向 objc_class 结构体的指针 typedef struct objc_class *Class; 将 Obj-C 源码通过 clang -rewrite-objc 翻译为 C++（其实</description>
    </item>
    
    <item>
      <title>谈谈 iOS 中的 dyld_shared_cache</title>
      <link>https://kingcos.me/posts/2018/dyld_shared_cache/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/dyld_shared_cache/</guid>
      <description>Date Notes Source Code 2019-06-11 更新 Shortcuts 相关 - 2018-12-12 补充 dyld_shared_cache 路径来源 system_cmds-805.220.1 2018-10-14 首次提交 dyld-551.4 What iOS &amp;amp; macOS 作为操作系统，其中内置了许多系统库（Library）。dyld_shared_cache，即动态库共享缓存。自 iOS 3.1 后，所有系统动态库被集合成</description>
    </item>
    
    <item>
      <title>浅谈 iOS 应用启动过程</title>
      <link>https://kingcos.me/posts/2017/ios_app_start_up/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/ios_app_start_up/</guid>
      <description>Date Notes Swift Xcode 2017-05-26 CS193p UIApplication 3.1 8.3.2 2017-03-28 首次提交 3.0 8.2.1 Preface 首先要感谢没故事的卓同学大大送的泊学会员，在泊学学了几节课，了解了很多不同角度的 iOS 开发知识。这篇文章就启发自其 iOS 101 中的一个纯手工的 Single View Application 一文。但本文将更加深入的叙述了</description>
    </item>
    
    <item>
      <title>探究 UIViewController 生命周期</title>
      <link>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-10 首次提交 3.0 8.2.1 前言 对象的生命周期一直是开发者所需要关心的，教授 CS193p 的老师 Paul 也详细的讲述了 UIViewController 的生命周期。为了记述这一过程，故作此文。由于 Xcode 提供了纯代码和 Storyboard（Xib 同理）两种</description>
    </item>
    
    <item>
      <title>Swift 中的 Selector</title>
      <link>https://kingcos.me/posts/2017/swift_selector/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/swift_selector/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-01-31 首次发布 （简书 &amp;amp; 掘金） 3.0 8.2.1 Preface Focus，即专注。笔者希望可以尽力将一些不是那么透彻的点透过 Demo 和 Source Code 而看到其本质。 由于国内软件开发仍很大程度依赖国外的语言、知识，所以该博客中的术语将使用</description>
    </item>
    
    <item>
      <title>初探 iOS 中自定义 UIView 的初始化过程</title>
      <link>https://kingcos.me/posts/2016/uiview_life_cycle/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2016/uiview_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-07 首次提交 3.0 8.2 Beta 1 awakeFromNib() init(frame:) init(coder:) Update 2017.03.07 - UIView 生命周期 Demo 由于本文之前虽有代码，但没有相应的 Demo，借探究 UIViewController 生命周期之际，加入了 UIView 生命周期的 Demo。您可以在 https://github.com/kingcos/UIViewController-UIView-LifecycleDemo 查看、下载。 2017.02.27 - CS193p Lecture 04 通常，UIView</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practice on kingcos</title>
    <link>https://kingcos.me/tags/practice/</link>
    <description>Recent content in Practice on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/practice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS 多线程技术实践之 @synchronized（四）</title>
      <link>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2021/multithreading_techs_in_ios-4/</guid>
      <description>Release Notes ↕ Date Notes 2021-06-01 首次提交 objc4-818.2 What 大致流程 为了保护代码的并发执行，我们尝试使用 @synchronized 即同步代码块写一段代码： // SomeClass.m #import &amp;lt;Foundation/Foundation.h&amp;gt; @implementation SomeClass - (void)someFunc { printf(&amp;#34;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;\n&amp;#34;); @synchronized(self) { printf(&amp;#34;Protected code.\n&amp;#34;); } printf(&amp;#34;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;\n&amp;#34;); } @end 接着，我们使用 xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc SomeClass.m -o SomeClass.cpp 命令将以上代码重写为 C++，并找到 someFunc</description>
    </item>
    
    <item>
      <title>Obj-C 中实例变量和类的访问控制</title>
      <link>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</guid>
      <description>Date Notes 2019-06-14 增加 man nm 截图 2019-04-29 完善 @package 2019-03-30 gcc, clang; macOS 10.14.2 2020-01-17 勘误，部分细节调整 Preface Obj-C 中的实例变量，即 Instance Variables，简称为 ivar。在面向对象的概念中，一个类的对外暴露决定了其所提供的能力，对子类则需要提供一定的扩展性</description>
    </item>
    
    <item>
      <title>iOS 多线程技术实践之 pthreads（一）</title>
      <link>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2019-03-08 首次提交 4.2 10.1 2019-12-14 内容重整 5.1 10.3 Preface 在现代计算机中，操作系统一般都会支持多进程（Process）以及多线程（Thread）技术，使得其可以同时运行多个程序且效率更高。而我们在开发 iOS app 中也时常需</description>
    </item>
    
    <item>
      <title>SwiftTips in Reverse</title>
      <link>https://kingcos.me/posts/2019/swift_tips_in_reverse/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_tips_in_reverse/</guid>
      <description>Preface SwiftTips 是 John Sundell 在 GitHub 开源的 Swift 小技巧列表。随着 Swift 5 的发布以及 ABI 稳定，是时候再学习一遍 Swift 啦。本文将是该列表的实践版本，并保证文中代码的可运行性，且尽可能做到倒序日更。（But why in reverse? 🤫） 关于本文的代码，都可以在 swift-tips-in-practice</description>
    </item>
    
    <item>
      <title>Obj-C &amp; Swift 的类型内省与反射</title>
      <link>https://kingcos.me/posts/2019/type_introspection_and_reflection/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/type_introspection_and_reflection/</guid>
      <description>Date Notes Swift Demo 2019-04-08 首次提交 4.2 Type Introspection and Reflection Preface 许多编程语言中都有类型内省（又称自省，Introspection）和反射（Reflection）这两个概念，本文将探讨一下 Obj-C 和 Swift 中类型内省和反射的相关概念与具体使用。 What 维</description>
    </item>
    
    <item>
      <title>iOS 项目持续集成实践（一）</title>
      <link>https://kingcos.me/posts/2018/ci_practice_in_ios-1/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/ci_practice_in_ios-1/</guid>
      <description>Preface 一个软件工程项目从编写、到测试、再最终交付到用户通常有很多重复且固定的步骤。虽然作为开发者，我们的核心任务是编写代码，而这些其他的步骤却也不能忽视，持续集成（Continuous Integratio</description>
    </item>
    
    <item>
      <title>在 Swift 中尝试对数组元素弱引用</title>
      <link>https://kingcos.me/posts/2018/weakly_collections/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/weakly_collections/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2018-03-15 更新部分表述，并将题目扩展至集合类型 4.0 9.2 2018-03-08 首次提交 4.0 9.2 2021-05-25 内容组织微调 - - What 在 Swift 中，当我们创建一个数组，那么数组本身对于添加进去的对象元素默认是强引用（Strong）的，这会使得元素的引</description>
    </item>
    
    <item>
      <title>从 0 开始使用 Docker 快速搭建 Hadoop 集群环境</title>
      <link>https://kingcos.me/posts/2017/docker_for_hadoop/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/docker_for_hadoop/</guid>
      <description>Date Notes Hadoop Other 2017-03-27 首次提交 2.7.2 Docker CE, IntelliJ IDEA 2016.3 Preface 自从学习 iOS/Swift 以来，就没有太多时间分配给 Java 专业课，毕竟我不是个三心二用还能样样学好的人。不过作为大三的专业课，分布式计算技术还是有去上课的，毕竟不能最后挂科吧 :] 曾有人说，「</description>
    </item>
    
  </channel>
</rss>

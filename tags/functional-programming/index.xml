<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on iBlog</title>
    <link>/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on iBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅谈 Swift 中的 Functor、Applicative 和 Monad</title>
      <link>/posts/2019/functor_applicative_monad_in_swift/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019/functor_applicative_monad_in_swift/</guid>
      <description>Optional let nilString: String? = nil let string : String? = &amp;quot;string&amp;quot;  // swift/stdlib/public/core/Optional.swift @frozen public enum Optional&amp;lt;Wrapped&amp;gt; : ExpressibleByNilLiteral { case none case some(Wrapped) /// Creates an instance that stores the given value. @_transparent public init(_ some: Wrapped) { self = .some(some) } /// Creates an instance initialized with `nil`. /// /// Do not call this initializer directly. It is used by the compiler when you /// initialize an `Optional` instance with a `nil` literal.</description>
    </item>
    
  </channel>
</rss>
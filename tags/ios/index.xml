<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on kingcos</title>
    <link>https://kingcos.me/tags/ios/</link>
    <description>Recent content in iOS on kingcos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 24 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kingcos.me/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《Effective Objective-C 2.0》笔记</title>
      <link>https://kingcos.me/posts/2019/effective_obj-c_2.0_notes/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/effective_obj-c_2.0_notes/</guid>
      <description>Release Notes ↕ Book ISBN Notes Effective Objective-C 2.0 9787111451297 - Date Num. Env 2019-05 1-3 Xcode 10.2.1 2019-06 4 Xcode 10.2.1 2019-07 5-12 Xcode 10.2.1 2019-10 13-20 Xcode 11.1 &amp;amp; 11.2 2019-11 20-52 Xcode 11.1 &amp;amp; 11.2 2021-05-24 - 补充属性特性中的可空性与 direct Preface 《Effective Objective-C 2.0》中文版书名为《编写高质量 iOS 与 OS X 代码的 52 个有效方法》，是类似笔</description>
    </item>
    
    <item>
      <title>Swift 中的 @autoclosure</title>
      <link>https://kingcos.me/posts/2018/swift_autoclosure/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/swift_autoclosure/</guid>
      <description>Date Notes Swift Xcode Source Code 2020-08-23 完善排版与表述 5.1 11.3 - 2018-04-05 更新并明确源代码所用版本 4.1 9.3 Swift 4.1 Release 2018-01-13 首次提交 4.0.3 9.2 - Preface Swift 中的闭包（Closure）十分类似于 Obj-C 中的 Block，但不仅写法更加简洁，也带来了许多新的特性。@autocl</description>
    </item>
    
    <item>
      <title>iOS 中的断言</title>
      <link>https://kingcos.me/posts/2020/assertion_in_ios/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/assertion_in_ios/</guid>
      <description>Date Notes 2020-07-27 首次提交 Preface 断言（Assertion）是我们常用于 Debug 时的得力助手，其使得程序得以崩溃在早期，引起我们足够的重视，保障代码质量又不影响用户的体验。本文将简单介绍 iOS 中的断言类型以及使用方式与原理。 assert NSAssert</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Boolean</title>
      <link>https://kingcos.me/posts/2020/booleans_in_objc/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/booleans_in_objc/</guid>
      <description>Date Notes 2020-06-02 首次提交 2020-06-16 增加「逻辑表达式」一节 Preface Boolean，即布尔值，通常用来表明逻辑中的真或假。但在 Obj-C 中，我们似乎既可以使用 BOOL 又可以使用 bool，既可以使用 YES/NO 又可以使用 true/false，那么它们到底</description>
    </item>
    
    <item>
      <title>[译] Swift 编译器</title>
      <link>https://kingcos.me/posts/2020/swift_compiler/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2020/swift_compiler/</guid>
      <description>作者 原文链接 Swift.org Swift Compiler Swift 主仓库中包含了 Swift 编译器和标准库的源代码、相关组件，如 SourceKit（用于 IDE 集成），以及 Swift 回归测试套件和实现级别的文档。 Swift 驱动库中包含了 Swift 编译器驱动（Driver）的新版实现，目</description>
    </item>
    
    <item>
      <title>Obj-C 中实例变量和类的访问控制</title>
      <link>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/ivar_access_control_in_obj-c/</guid>
      <description>Date Notes 2019-06-14 增加 man nm 截图 2019-04-29 完善 @package 2019-03-30 gcc, clang; macOS 10.14.2 2020-01-17 勘误，部分细节调整 Preface Obj-C 中的实例变量，即 Instance Variables，简称为 ivar。在面向对象的概念中，一个类的对外暴露决定了其所提供的能力，对子类则需要提供一定的扩展性</description>
    </item>
    
    <item>
      <title>Obj-C 中的对象</title>
      <link>https://kingcos.me/posts/2019/objects_in_obj-c/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objects_in_obj-c/</guid>
      <description>Date Notes Refer. 2019-03-18 首次提交 objc4-750 2019-08-18 抽离 isa 部分； 重整文章结构 Obj-C 中的 isa 指针 - kingcos 2019-08-29 增加 class_rw_t 等细节 - 2019-12-23 细节微调 objc4-756.2 Preface Obj-C 中的对象分为实例对象（Instance Object）、类对象（Class Object）、以及元类对象（Met</description>
    </item>
    
    <item>
      <title>iOS 多线程技术实践之 pthreads（一）</title>
      <link>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/multithreading_techs_in_ios-1/</guid>
      <description>Date Notes Swift Xcode 2019-03-08 首次提交 4.2 10.1 2019-12-14 内容重整 5.1 10.3 Preface 在现代计算机中，操作系统一般都会支持多进程（Process）以及多线程（Thread）技术，使得其可以同时运行多个程序且效率更高。而我们在开发 iOS app 中也时常需要利用</description>
    </item>
    
    <item>
      <title>Obj-C 中的 Block</title>
      <link>https://kingcos.me/posts/2019/block_in_obj-c/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/block_in_obj-c/</guid>
      <description>Date Notes Demo Source Code 2019-07-27 首次提交 - - 2019-11-24 重新整理部分内容；补充《Effective Objective-C 2.0》&amp;amp;《Objective-C 高级编程》相关内容 Block_in_Obj-C objc4-756.2、libclosure-73 Preface 从 OS X Snow Leopard 和 iOS 4</description>
    </item>
    
    <item>
      <title>iOS 中的库与框架</title>
      <link>https://kingcos.me/posts/2019/libraries_in_ios/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/libraries_in_ios/</guid>
      <description>Date Notes 2019-09-14 首次提交，持续更新完善 2019-09-22 适配 Xcode 11，持续更新完善 2019-10-29 添加 Demo：libraries_in_ios-demo Preface 随着软件工程的发展，很多我们需要的功能前人都已经很好地实现了，为了提高效率避免重复建设</description>
    </item>
    
    <item>
      <title>iOS 中的 Category</title>
      <link>https://kingcos.me/posts/2019/category_in_ios/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/category_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-16 优化结构 - - 2019-04-13 首次提交 objc4-750、xnu-4903.221.2 Category in iOS 2019-10-23 添加首图，细节微调 - - Preface iOS 中的 Category 中文常译作分类、类别（为表述统一，本文将使用 Category 特指该技术）。我们经常会使用 Category 来</description>
    </item>
    
    <item>
      <title>浅尝 objc_msgSend</title>
      <link>https://kingcos.me/posts/2019/objc_msgsend/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/objc_msgsend/</guid>
      <description>Date Notes Refers. 2019-07-20 首次提交 objc4-750.1 2019-09-07 完成「缓存、动态方法解析」等部分 Obj-C 中的对象 - kingcos 2019-10-21 补充《Effective Objective-C 2.0》相关内容 《〈编写高质量 iOS 与 OS X 代码的 52 个有效方法〉阅读笔记 - kingcos》 Preface Obj-C 中方法调用的本质是</description>
    </item>
    
    <item>
      <title>iOS 自动化测试之 WDA &amp; Appium</title>
      <link>https://kingcos.me/posts/2019/ios_test_automation/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/ios_test_automation/</guid>
      <description>Date Notes 2019-09-19 首次提交 WebDriverAgent 安装依赖： ./Scripts/bootstrap.sh 打开 WebDriverAgent.xcodeproj，选择 WebDriverAgentLib，并使用「Command + B」编译： 编译后，我们将 Scheme 改为 WebDriverAge</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;load 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;load_in_ios/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;load_in_ios/</guid>
      <description>Release Notes ↕ Date Notes Source Code Demo 2019-04-20 首次提交 objc4-750 Load_Obj-C_Demo 2019-09-13 增加 Swift 等部分 - - Preface 在 iOS 开发中，我们经常会使用 +load 方法来做一些在 main 函数之前的操作，比如方法交换（Method Swizzle）等。那么本文就来简单了解下 iOS 中 +load 方法。 What iOS 中的 +load</description>
    </item>
    
    <item>
      <title>App Store 面面观</title>
      <link>https://kingcos.me/posts/2019/app_store/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/app_store/</guid>
      <description>Preface 一款 app 从开发者手里到最终交付到用户桌面的整个过程中，编写代码只是其中小小的一环，我们需要搭建相应的开发环境、分发完整产物进行测试、并最终将其配以合适的宣传文案以供用户享用。本文将叙述作为一名一线 iOS 开</description>
    </item>
    
    <item>
      <title>SwiftTips in Reverse</title>
      <link>https://kingcos.me/posts/2019/swift_tips_in_reverse/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_tips_in_reverse/</guid>
      <description>Preface SwiftTips 是 John Sundell 在 GitHub 开源的 Swift 小技巧列表。随着 Swift 5 的发布以及 ABI 稳定，是时候再学习一遍 Swift 啦。本文将是该列表的实践版本，并保证文中代码的可运行性，且尽可能做到倒序日更。（But why in reverse? 🤫） 关于本文的代码，都可以在 swift-tips-in-practice</description>
    </item>
    
    <item>
      <title>Obj-C 中的 isa 指针</title>
      <link>https://kingcos.me/posts/2019/isa_in_objc/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/isa_in_objc/</guid>
      <description>Date Notes Refer. 2019-08-18 首次提交 objc4-750.1 Preface isa 指针是所有 Obj-C 对象中都拥有的一个成员。因为除了继承链之外，Obj-C 还特有一条从实例对象到类对象、元类对象的链。而后者正是依靠 isa 而串联起来的，那么本文就将结合源码谈谈 Obj-C 中的 isa。</description>
    </item>
    
    <item>
      <title>Xcode 中的 Link Map 文件</title>
      <link>https://kingcos.me/posts/2019/link_map_file_in_xcode/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/link_map_file_in_xcode/</guid>
      <description>Date Notes Xcode Swift 2019-04-01 首次提交 10.1 - 2019-04-16 增加 Swift 项目 10.1 4.2 2019-07-28 增加目录导图，折叠过长内容 - - Preface Link Map File，译作链接映射文件（下文将称 Link Map 文件）。Xcode 在构建可执行文件之前，需要先编译为目标文件（Object File）</description>
    </item>
    
    <item>
      <title>[译] 摊平由「try?」造成的嵌套可选</title>
      <link>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/0230-flatten-optional-try_zh/</guid>
      <description>提案: SE-0230 作者: BJ Homer 审查管理员: John McCall 状态: 已实现 (Swift 5) 实现: apple/swift#16942 审查: (论坛帖子) (验收) 介绍 Swift 中的 try? 语句目前很容易引入嵌套可选（译者注：嵌套可选即类似 var foo: String?? 可选的可选类型）。而用户难以推断嵌套可选的产生原</description>
    </item>
    
    <item>
      <title>iOS 中的关联对象</title>
      <link>https://kingcos.me/posts/2019/associated_objects_in_ios/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/associated_objects_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-05-18 首次提交 objc4-750 - Preface 提到 iOS 中的关联对象，即 Associated Objects，又可以算是一项利用 Runtime 的「黑魔法」。然而作为初学者，很难从其名称联想到是为谁关联对象，以及是如何关联对象的，那么今天就来一起研究下 iOS 中的</description>
    </item>
    
    <item>
      <title>Swift/Obj-C 混编项目升级 Swift 5.0 踩坑</title>
      <link>https://kingcos.me/posts/2019/swift_4_to_5/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/swift_4_to_5/</guid>
      <description>Date Note 2019-05-08 Swift 4.2 -&amp;gt; 5.0 2019-07-08 完善内容 Preface 在 ABI 稳定前，每次 Swift 升级都是一个比较「痛苦」的体验。这次笔者花费约总共一天时间将 Swift/Obj-C 混编项目升级到 Swift 5.0，其中还是有一些踩坑经验值得分享的。 Xcode 为了适配 Swift 5.0，首先需要安装 Xcode 1</description>
    </item>
    
    <item>
      <title>[译] URL 加载系统</title>
      <link>https://kingcos.me/posts/2019/url_loading_system/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/url_loading_system/</guid>
      <description>作者 原文链接 Apple Inc. URL Loading System 使用标准互联网协议与 URL 交互，并和服务器通信。 框架： Foundation 概览 URL 加载系统通过标准协议比如 HTTPS 或自建协议提供对 URL 标识资源的访问。加载过程是异步的，所以 App 可以保持响应并当数据到达或出错时进行</description>
    </item>
    
    <item>
      <title>iOS 中的 &#43;initialize 方法</title>
      <link>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/&#43;initialize_in_ios/</guid>
      <description>Date Notes Source Code Demo 2019-04-21 首次提交 objc4-750 - 2019-05-01 补充细节 - Initialize_Demo Preface 在 iOS 中，经常与 +load 相提并论的一个方法便是 +initialize。从方法名来看，它的作用是进行初始化，但不同于平时使用的 init，+initialize 是一个类方法</description>
    </item>
    
    <item>
      <title>Obj-C &amp; Swift 的类型内省与反射</title>
      <link>https://kingcos.me/posts/2019/type_introspection_and_reflection/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/type_introspection_and_reflection/</guid>
      <description>Date Notes Swift Demo 2019-04-08 首次提交 4.2 Type Introspection and Reflection Preface 许多编程语言中都有类型内省（又称自省，Introspection）和反射（Reflection）这两个概念，本文将探讨一下 Obj-C 和 Swift 中类型内省和反射的相关概念与具体使用。 What 维</description>
    </item>
    
    <item>
      <title>iOS 中的 KVC</title>
      <link>https://kingcos.me/posts/2019/kvc_in_ios/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvc_in_ios/</guid>
      <description>Date Notes 2019-03-25 首次提交 Preface KVC，即 Key-Value Coding，译作键值编码（下文简称 KVC）。当对象兼容 KVC 时，可以通过统一的 API 访问对象中某个键对应的属性值。Cocoa 中的许多功能都依赖 KVC，比如，KVO、Cocoa 绑定</description>
    </item>
    
    <item>
      <title>Obj-C 中的重载与重写</title>
      <link>https://kingcos.me/posts/2019/override_and_overload_in_obj-c/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/override_and_overload_in_obj-c/</guid>
      <description>Date Platform 2019-03-20 macOS 10.14.2 Preface 重载（Overload）和重写（Override）是面向对象语言中十分基本的两个概念，本文将谈谈 Obj-C 中的重载与重写。 重载 In some programming languages, function overloading or method overloading is the ability to create multiple functions of the same name with different implementations. Calls to an overloaded function will run a specific implementation of that</description>
    </item>
    
    <item>
      <title>[译] Swift 名字修饰（Name Mangling）</title>
      <link>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/draft/friday_qa_swift_name_mangling/</guid>
      <description>作者 原文链接 Gwynne Raskind Friday Q&amp;A 2014-08-08: Swift Name Mangling 译者注 1.「Name Mangling」在本文中将译作「名字修饰」，这主要是参考了 Wikipedia 中关于该项技术的翻译； 2.「Friday Q&amp;amp;A」中文意为「周五问与答」，但限于该名</description>
    </item>
    
    <item>
      <title>iOS 中的 KVO</title>
      <link>https://kingcos.me/posts/2019/kvo_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/kvo_in_ios/</guid>
      <description>Date Notes 2019-03-13 首次提交 Preface KVO 即 Key-Value Observing，译作键值监听（下文简称 KVO），通常用于监听对象的某个特定属性值的变化。本文将由浅入深，谈谈 iOS 中的 KVO。 How #import &amp;#34;ViewController.h&amp;#34; @interface Computer : NSObject @property (nonatomic, assign) int buttonClickTimes; @end @implementation Computer @end @interface ViewController () @property (nonatomic, strong) Computer *cpt; @end @implementation</description>
    </item>
    
    <item>
      <title>iOS 中的 NSObject</title>
      <link>https://kingcos.me/posts/2019/nsobject_in_ios/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/nsobject_in_ios/</guid>
      <description>Date Notes Source Code 2019-03-13 首次提交 objc4-750、libmalloc-166.220.1、glibc-2.29 NSObject 实例对象的大小 // NSObject Obj-C -&amp;gt; C NSObject_IMPL struct NSObject_IMPL { Class isa; }; // 指向 objc_class 结构体的指针 typedef struct objc_class *Class; 将 Obj-C 源码通过 clang -rewrite-objc 翻译为 C++（其实</description>
    </item>
    
    <item>
      <title>Objective-C 与 Swift 桥接中的坑</title>
      <link>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2019/obj-c_swift_bridge_tips/</guid>
      <description>Date Notes 2019-01-17 添加「Optional 与 Nullability」 添加「NSNotificationName 与 Notification.Name」 Preface Objective-C 与 Swift 的混编是全面转向 Swift 中的必经之路，本文即是这一过程中的踩坑「</description>
    </item>
    
    <item>
      <title>[译] 为 App 执行一次性设置</title>
      <link>https://kingcos.me/posts/2018/performing_one-time_setup_for_your_app/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/performing_one-time_setup_for_your_app/</guid>
      <description>作者 原文链接 Apple Inc. Performing One-Time Setup for Your App 确保 App 环境被正确配置。 框架 UIKit 概览 当用户第一次启动 App，我们可能希望通过一些一次性任务预备 App 环境。举个例子，可能想要： 从服务器下载必要的数据。 从 App 包（bundle）中拷贝文</description>
    </item>
    
    <item>
      <title>[译] 关于 App 启动顺序</title>
      <link>https://kingcos.me/posts/2018/about_the_app_launch_sequence/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/about_the_app_launch_sequence/</guid>
      <description>作者 原文链接 Apple Developer About the App Launch Sequence 学习在启动时的代码执行顺序。 概览 一个 App 的启动需要经过许多复杂的步骤，其中大部分由 UIKit 自动处理。在启动过程中，UIKit 会调用 App 代理中的方法，因此我们可以执行自定义的任务。图中的</description>
    </item>
    
    <item>
      <title>谈谈 iOS 中的 dyld_shared_cache</title>
      <link>https://kingcos.me/posts/2018/dyld_shared_cache/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/dyld_shared_cache/</guid>
      <description>Date Notes Source Code 2019-06-11 更新 Shortcuts 相关 - 2018-12-12 补充 dyld_shared_cache 路径来源 system_cmds-805.220.1 2018-10-14 首次提交 dyld-551.4 What iOS &amp;amp; macOS 作为操作系统，其中内置了许多系统库（Library）。dyld_shared_cache，即动态库共享缓存。自 iOS 3.1 后，所有系统动态库被集合成</description>
    </item>
    
    <item>
      <title>使用 usbmuxd 连接 iPhone</title>
      <link>https://kingcos.me/posts/2018/usbmuxd/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/usbmuxd/</guid>
      <description>macOS iOS libimobiledevice/usbmuxd 10.13.6 9.0.1 (Jailbroken) v1.0.8 What usbmuxd 全称「USB Multiplexing Daemon」，即 USB 多路传输驻留程序。当 Mac/PC 与 iPhone 之间使用 USB 数据线连接时，iTunes 与 iPhone 间的通信交流便是通过 usbmuxd 服务。usbmuxd 通过给定的端口号和 localhost 建立 TCP 连接。 在 Mac 端，</description>
    </item>
    
    <item>
      <title>Xcode 10 beta 趟坑</title>
      <link>https://kingcos.me/posts/2018/xcode_10_beta/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/xcode_10_beta/</guid>
      <description>Xcode macOS 10 beta 2 10.14 beta 2 $(TeamIdentifierPrefix) Xcode 10 已知 Bug，无法自动替换。 Workaround 可以手动将 entitlements 文件的 Pass Type ID 值设置为 mobileversion 文件中com.apple.developer.pass-type-identifiers 对应值。 libstdc++ Xcode 10 取消了内置支持</description>
    </item>
    
    <item>
      <title>iOS 开发问题解决集锦</title>
      <link>https://kingcos.me/posts/2018/ios_dev_issue_list/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/ios_dev_issue_list/</guid>
      <description>Unable to boot device in current state: Creating Xcode: 9.4.1 macOS: 10.13 在使用模拟器或者 xcodebuild test 时可能会出现此问题。 Solution 使用 xcrun simctl list 命令列出所有模拟器机型，用 xcrun simctl erase UDID 还原相应的设备，重试即可。 下面是一个 Python 3 脚本，可以使用 python erase_simulators.py -d &#39;DEVICE_TYPE&#39; 来直接还原相应设备类型的所有</description>
    </item>
    
    <item>
      <title>[译] 起底 SourceKit</title>
      <link>https://kingcos.me/posts/2018/uncovering_sourcekit/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/uncovering_sourcekit/</guid>
      <description>作者 原文链接 JP Simard Uncovering SourceKit 为了支持一门新颖的语言（译者注：这里指 Swift），灵活的实时 IDE 特性，以及令人印象深刻的跨语言协同能力（译者注：这里指 Swift 与 Obj-C），Apple 必须开发一些新的基础工具。这里我们</description>
    </item>
    
    <item>
      <title>iOS 项目持续集成实践（一）</title>
      <link>https://kingcos.me/posts/2018/ci_practice_in_ios-1/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/ci_practice_in_ios-1/</guid>
      <description>Preface 一个软件工程项目从编写、到测试、再最终交付到用户通常有很多重复且固定的步骤。虽然作为开发者，我们的核心任务是编写代码，而这些其他的步骤却也不能忽视，持续集成（Continuous Integratio</description>
    </item>
    
    <item>
      <title>在 Swift 中尝试对数组元素弱引用</title>
      <link>https://kingcos.me/posts/2018/weakly_collections/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2018/weakly_collections/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2018-03-15 更新部分表述，并将题目扩展至集合类型 4.0 9.2 2018-03-08 首次提交 4.0 9.2 2021-05-25 内容组织微调 - - What 在 Swift 中，当我们创建一个数组，那么数组本身对于添加进去的对象元素默认是强引用（Strong）的，这会使得元素的引</description>
    </item>
    
    <item>
      <title>浅谈 iOS 应用启动过程</title>
      <link>https://kingcos.me/posts/2017/ios_app_start_up/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/ios_app_start_up/</guid>
      <description>Date Notes Swift Xcode 2017-05-26 CS193p UIApplication 3.1 8.3.2 2017-03-28 首次提交 3.0 8.2.1 Preface 首先要感谢没故事的卓同学大大送的泊学会员，在泊学学了几节课，了解了很多不同角度的 iOS 开发知识。这篇文章就启发自其 iOS 101 中的一个纯手工的 Single View Application 一文。但本文将更加深入的叙述了</description>
    </item>
    
    <item>
      <title>探究 UIViewController 生命周期</title>
      <link>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/uiviewcontroller_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-10 首次提交 3.0 8.2.1 前言 对象的生命周期一直是开发者所需要关心的，教授 CS193p 的老师 Paul 也详细的讲述了 UIViewController 的生命周期。为了记述这一过程，故作此文。由于 Xcode 提供了纯代码和 Storyboard（Xib 同理）两种</description>
    </item>
    
    <item>
      <title>Swift 中的 Selector</title>
      <link>https://kingcos.me/posts/2017/swift_selector/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2017/swift_selector/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-01-31 首次发布 （简书 &amp;amp; 掘金） 3.0 8.2.1 Preface Focus，即专注。笔者希望可以尽力将一些不是那么透彻的点透过 Demo 和 Source Code 而看到其本质。 由于国内软件开发仍很大程度依赖国外的语言、知识，所以该博客中的术语将使用</description>
    </item>
    
    <item>
      <title>初探 iOS 中自定义 UIView 的初始化过程</title>
      <link>https://kingcos.me/posts/2016/uiview_life_cycle/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://kingcos.me/posts/2016/uiview_life_cycle/</guid>
      <description>Release Notes ↕ Date Notes Swift Xcode 2017-03-07 首次提交 3.0 8.2 Beta 1 awakeFromNib() init(frame:) init(coder:) Update 2017.03.07 - UIView 生命周期 Demo 由于本文之前虽有代码，但没有相应的 Demo，借探究 UIViewController 生命周期之际，加入了 UIView 生命周期的 Demo。您可以在 https://github.com/kingcos/UIViewController-UIView-LifecycleDemo 查看、下载。 2017.02.27 - CS193p Lecture 04 通常，UIView</description>
    </item>
    
  </channel>
</rss>

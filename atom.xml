<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V2M</title>
  <subtitle>Way to MM.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maimieng.com/"/>
  <updated>2016-10-20T09:11:13.000Z</updated>
  <id>https://maimieng.com/</id>
  
  <author>
    <name>kingcos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 项目中新建 Module</title>
    <link href="https://maimieng.com/2016/24/"/>
    <id>https://maimieng.com/2016/24/</id>
    <published>2016-10-19T16:00:00.000Z</published>
    <updated>2016-10-20T09:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Access Control Prerequisite Article<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS X 10.12.1 Beta 3</li>
<li>Xcode 8.1 Beta 3</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Module，中文译为「标准部件；模块」。iOS 中的 Module 类似于 Java 中的 Jar 包，也可以称作第三方库，或者框架（Framework)。Swift 中的访问控制就涉及到了不同 Module 下的情况，因此简单记录下如何在 iOS 项目中新建 Module。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>首先建立一个 iOS Single View Application。</p>
<p>选择 File-New-Target。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/new_module_1.png" alt="File"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/new_module_2.png" alt="New"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/new_module_3.png" alt="Target"></p>
<p>选择 Cocoa Touch Framework。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/new_module_4.png" alt="Cocoa Touch Framework"></p>
<p>如图，即为建立的 Module（此处建立两个方便后续测试访问控制修饰符）。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/new_module_5.png" alt="新建完成"></p>
<p>使用时，<code>import ModuleA</code> 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Access Control Prerequisite Article&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Intellij IDEA 配置 Code Style</title>
    <link href="https://maimieng.com/2016/23/"/>
    <id>https://maimieng.com/2016/23/</id>
    <published>2016-10-02T16:00:00.000Z</published>
    <updated>2016-10-03T02:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>IDE 已经如此完备了，<br>为什么还是懒得用？<br></blockquote><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天自说自话，闲扯了界面设计和代码规范。设计确实需要一些经验，也不一定能取悦所有人。而代码规范却是程序员所起码应当做到的，多人协作中，杂乱的代码就好像批阅潦草的作文，可读性极差。</p>
<p>然而这是个懒人驱动的世界，IDE 其实已经为你准备好了各种工具，等着你去使用。但是由于这些软件基本都是国外开发，汉化不全，新手往往望着密密麻麻的按钮不知所措。</p>
<p>但没办法，英文是程序员所不得不克服的一个「障碍」，障碍我打了引号，因为语言并能算是障碍。语言是共同不同种族的桥梁，然而却阻碍了很多人的前进。</p>
<p>这次，就简单介绍下 Intellij IDEA 如何配置 Code Style 文件，之后便可以通过快捷键规整代码。当然，Code Style 能力有限，更高级的开发者也许早已烂熟于胸。</p>
<p>这里以 Google 的 Java Code Style 为例。</p>
<h2 id="intellij-java-google-style-xml"><a href="#intellij-java-google-style-xml" class="headerlink" title="intellij-java-google-style.xml"></a>intellij-java-google-style.xml</h2><p>Google 在 GitHub 上有一个专门放置编码规范的仓库，地址在：<br><a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a>。</p>
<p>可以随时在该网站获得最新的代码规范（但大部分规范几乎很少改动）。</p>
<p>找到其中文件名为 <strong>intellij-java-google-style.xml</strong> 的文件，点击打开。或者直接点击<br><a href="https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml" target="_blank" rel="external">https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml</a>。</p>
<p>这里需要将其中的内容保存到本地，当然也可以选择下载整个仓库，只提取所需要的文件。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_1.png" alt="复制的内容"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_2.png" alt="保存为 xml 文件"></p>
<h2 id="导入-Code-Style"><a href="#导入-Code-Style" class="headerlink" title="导入 Code Style"></a>导入 Code Style</h2><p>切换到 Intellij IDEA，这里我用的是 Android Studio，同理。Android Studio-Preferences…</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_3.png" alt="Preference"></p>
<p>侧栏 Editor-Java，点击 Manage。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_4.png" alt="Editor-Java-Manage"></p>
<p>打开后的界面如下图，点击 Import，之后点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_5.png" alt="Import"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_6.png" alt="OK"></p>
<p>选中刚刚保存的 xml 文件，点击 OK，之后再次点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_7.png" alt="选择 Code Style 文件"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_8.png" alt="再次点击 OK"></p>
<p>如下图，即导入成功。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_9.png" alt="导入成功"></p>
<p>回到 Preferences 界面，也可看到当前 Code Style 切换到 Google Style 了。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_10.png" alt="Preferences"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>之后的使用 IDE 会保证格式的符合，为了确保文件格式的符合，也可以手动格式化代码。</p>
<p>选择菜单栏-Code-Reformat Code，也可以使用相应的快捷键。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/intellij_idea_code_style_11.png" alt="Reformat Code"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jetbrains.com/help/idea/2016.2/configuring-code-style.html" target="_blank" rel="external">Configuring Code Style by JetBrains</a><br><a href="https://google.github.io/styleguide/javaguide.html" target="_blank" rel="external">Google Java Style Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;IDE 已经如此完备了，&lt;br&gt;为什么还是懒得用？&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>瞎扯界面设计与代码规范</title>
    <link href="https://maimieng.com/2016/22/"/>
    <id>https://maimieng.com/2016/22/</id>
    <published>2016-10-01T16:00:00.000Z</published>
    <updated>2016-10-02T12:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>而我说的都是错的。<br></blockquote><br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>身处软件学院，周围是数不胜数的「程序员」。也有看过他们所做的 App，网站，等等项目。具体功能的实现我不清楚是否合格，但几乎都有一个共同点，「mess」。我需要说明的是，杂乱并不等于丑，因为审美各有不同，而杂乱的界面与糟糕的代码却往往被忽视。当然，程序员又不是产品经理，也不是设计师，所以我说的都是错的。</p>
<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>题中的「设计」，我想分为两个截然不同的意义。一是软件的整体设计，即规划，二是软件的界面设计。软件的整体设计可能需要经验的积累，才能做到考虑周到，尽可能不遗漏某些要点，暂且不论。而界面设计则是设计师对流行设计的认知结合特定软件的思考的产物。</p>
<p>私以为会用 Photoshop 等工具则根本不等同于会设计，就好像会用钢笔但不一定写得出庞中华的硬笔书法（注：我不喜欢庞中华的字体，但其能力还是有的）。</p>
<p>题中的「规范」，主要说的是代码规范。暑假时接了一个 Android Project，没有文档，且是 2012 年的代码，资金与精力有限，不可能完全重写。而代码也是十分糟糕的，拼音命名的变量名随处可见，到处充斥的打印日志（个人认为这些用于测试的临时代码应当及时删除），代码风格极差。加上由于是临时组织的团队，我没有主导权。首先尝试了 SVN 管理代码，结果无法连接 SVN 服务器，最后的协作竟然是通过 QQ，Copy-Paste。团队中的成员对代码规范似乎也没有听说过，我无法想象如果未来公司中这样的代码管理会给后期维护造成多大的难度。。。</p>
<p>所以身边也许有会用 Photoshop 切图的人，但没见过几个能设计的；身边都会敲代码，但没过几个代码做到起码的规范。当然，我连 Photoshop 都不会用，也没做过几个项目，所以我说的都是错的。</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>暑假培训无聊，草草翻看之前借阅的《写给大家看的设计书》，里面的一些原则也都忘记的差不多了。如果想要做一名专业的设计师，那么掌握工具是基本功，也可能需要看一些理论的书籍，甚至用户心理学的书籍。</p>
<p>说句实话，闲扯这篇，其中一个原因是这次的 Android Project。身为学生，且和计院的不熟悉，不清楚他们平时的写代码是否会多加考虑。上次的 Project 原定 1 周完成，结果到现在也无法交付。这次的 Project 是从头做起，所以我希望可以制定一些代码规范，遵照一些设计规则，这也是我假期这几天所考虑的。</p>
<p>此次的 Project 是基于 Android，所以我希望设计是趋于 Material Design，而不是模仿 iOS。虽然 Apple 的产品我拥有一部分，它们也的确好用，但是一个基于 Android 开发的软件就应当遵照其规范。</p>
<p>但，这里有个悖论。Material Design 在国内其实名存实亡。第三方 ROM 已经把 Android 改的面目全非，当然本地化还是值得称赞的。这也导致现今国内的 Android 手机都神似 iPhone。加上 Android 的碎片化，需要考虑到适配较早的 SDK 版本，导致一些设计无法使用，这也是我最近在考虑是否可以建议有一些 Android 的特有设计。</p>
<p>当然，我又不是决策者，这么做于我来说似乎并没有什么益处，所以我说的都是错的。</p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>界面设计是为了更好的用户体验，让用户乐于打开你的应用。而代码规范也是为了更好的用户体验，只是这里的用户指的是程序员。</p>
<p>功能的实现也许已经不是关键，App Store 和 Google Play 中有无数的天气预报应用，或是无数的浏览器。但是为什么还是有人不断的开发呢？也许解决了一个用户的痛点，也许只是易用性更好，界面更加美观，运行更加高效。</p>
<p>当然，我站在看热闹不嫌事大的角度，所以我说的都是错的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>本来重点是准备整理一些 Material Design 的相关资料，工具，没想到瞎扯这么多，一气呵成，也不再去纠正什么了，当作随笔吧。</p>
<p>希望有人可以懂点设计，有点规范，也希望未来进入的公司可以如此。</p>
<p><a href="https://material.uplabs.com" target="_blank" rel="external">MaterialUp</a><br><a href="https://www.materialpalette.com" target="_blank" rel="external">Material Palette</a><br><a href="http://www.calltoidea.com" target="_blank" rel="external">CallToIdea</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;而我说的都是错的。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="https://maimieng.com/tags/Essay/"/>
    
      <category term="Design" scheme="https://maimieng.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle 构建 Struts 2 Web 应用</title>
    <link href="https://maimieng.com/2016/21/"/>
    <id>https://maimieng.com/2016/21/</id>
    <published>2016-09-26T16:00:00.000Z</published>
    <updated>2016-09-28T06:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Ant -&gt; Maven -&gt; Gradle<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info<ul>
<li>JDK 1.8</li>
<li>Tomcat 8.5.5</li>
<li>Intellij IDEA 2016.2.3</li>
<li>macOS 10.12.1 beta</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉 Android 开发的程序员都知道，Android Studio 是基于 Intellij IDEA 社区版所开发的。其默认使用 Gradle 构建项目。</p>
<p>与 Maven 不同，Gradle 的配置更为简单，两者的优劣这里略过，。这次就体验一下使用 Gradle 构建最基本的 Struts 2 Web 应用。记录于此，便于往后查阅。</p>
<h2 id="安装-Tomcat"><a href="#安装-Tomcat" class="headerlink" title="安装 Tomcat"></a>安装 Tomcat</h2><p>下载并解压 Tomcat，将其置于 <code>/usr/local</code> 文件夹内，这里以 Tomcat 8.5.5 为例，因为其支持 Servlet 3.1 标准。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_1.png" alt="Tomcat 放置路径"></p>
<h2 id="新建-Gradle-Web-项目"><a href="#新建-Gradle-Web-项目" class="headerlink" title="新建 Gradle Web 项目"></a>新建 Gradle Web 项目</h2><p>菜单栏：File - New - Project…</p>
<p>选择左侧的 Gradle，勾选 Web 选项，因为要建立的是跑在服务器上的应用。点击 Next。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_2.png" alt="New Gradle"></p>
<p>输入 Group ID 以及 Artifact ID，建议输入真实，唯一的 ID。良好的习惯将减小未来发生错误的概率。继续点击 Next。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_3.png" alt="Group ID &amp; Artifact ID"></p>
<p>勾选必要的选项，Next。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_4.png" alt="配置项目"></p>
<p>设置项目的放置目录，Finish。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_5.png" alt="项目的放置目录"></p>
<p>等待 Gradle 构建项目，可以在窗口下部看到当前状态，构建完毕时，则会消失。和 Maven 类似，Gradle 的构建过程也需要联网下载所需的依赖。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_6.png" alt="等待 Gradle 构建项目"></p>
<h2 id="导入-Struts-2"><a href="#导入-Struts-2" class="headerlink" title="导入 Struts 2"></a>导入 Struts 2</h2><p>Gradle 项目建立基本完毕，需要配置 Struts 2 的依赖。和 Maven 类似，可以搜索 Maven Repository，虽然名字是 Maven 仓库，但却提供了多种依赖的部署方式。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_7.png" alt="搜索 Maven Repository"></p>
<p>搜索 struts，我们能得到很多结果，我们需要选择 Struts 2 Core。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_8.png" alt="Struts 2 Core"></p>
<p>打开之后可以看到 Struts 2 的不同版本，Maven 和 Gradle 的方便之处在于，可以很简单的切换不同版本，而不用手动下载相关 JAR 包。对于版本的选择，首先可以优先选择 release 版。测试版（即 Beta 版）在网页上也有清晰的标注。另外通过阅览 Struts 官网我们得知，Struts 3 将基于 2.5 或更新版本，较大版本更迭会有较大不同，甚至是兼容性的差异。所以我们选择当前 2.3 的最高子版本 2.3.30。当然你也可以选择参考书等资料中的版本，但个人偏向较新的版本，不要沉溺于太过时的东西，限制你的思想。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_9.png" alt="Struts 2.3.30"></p>
<p>切换到 Gradle 标签，拷贝其中的内容。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_10.png" alt="拷贝 Gradle 依赖"></p>
<p>回到 IDEA，打开 build.gradle，将其粘贴到 dependencies 中。由于之前勾选过 auto-import，即可自动导入。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_11.png" alt="build.gradle"></p>
<p>如果忘记勾选，也可在此手动刷新，让其导入。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_12.png" alt="手动刷新导入"></p>
<p>至此，Struts 2 已经导入该项目，但距离使用还差一点距离。</p>
<h2 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h2><p>虽然我们安装了 Tomcat，也选择了 Web 应用，但并没有部署项目，所以无法运行。点击图中菜单的下三角，选择 Edit Configurations…。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_13.png" alt="Edit Configurations"></p>
<p>点击左上角加号。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_14.png" alt="点击左上角加号"></p>
<p>选择 Tomcate Server - Local。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_15.png" alt="Tomcate Server"></p>
<p>根据下图即可配置 Tomcat。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_16.png" alt="配置 Tomcat"></p>
<p>如果 IDEA Application server 为空，那么需要首先添加 Tomcat 服务器，点击 Configure…，点击新窗口的左上角的加号添加新的服务器，选择 Tomcat 的路径即可（图上已经拥有配置好的两个不同版本的 Tomcat 服务器）。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_17.png" alt="添加 Tomcat 服务器"></p>
<p>回到配置 Tomcat，切换到 Deployment 标签，点击图中的加号，选择 Aritifacts。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_18.png" alt="Deployment"></p>
<p>这里选择 exploded 结尾的 war 包，这是展开的 war，便于重载资源，在开发阶段建议选择此。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_19.png" alt="选择 exploded"></p>
<p>配置完成，点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_20.png" alt="配置完成"></p>
<h2 id="添加-web-xml-amp-struts-xml"><a href="#添加-web-xml-amp-struts-xml" class="headerlink" title="添加 web.xml &amp; struts.xml"></a>添加 web.xml &amp; struts.xml</h2><p>点击菜单栏的 Project Structure。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_21.png" alt="Project Structure"></p>
<p>选择左侧 Modules，当前 Web Gradle，点击加号。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_22.png" alt="Modules-Web Gradle"></p>
<p>选择创建 web.xml 的路径，注意在最后不要忘记 web.xml，否则并不会创建。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_23.png" alt="web.xml 路径"></p>
<p>配置 web.xml 完成，点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_24.png" alt="配置完成"></p>
<p>struts.xml 可以直接在 resources 目录右键 - New - XML Configuration File - Struts Config，即可生成。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_25.png" alt="新建 struts.xml"></p>
<p>新建完成，IDEA 会检测到 struts.xml，提示配置，选择 Configure，勾选刚刚创建的 struts.xml 以及下面的 struts-default（图中漏掉了），点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_26.png" alt="勾选 struts.xml"></p>
<p>配置完成，点击 OK。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/idea_gradle_struts2_27.png" alt="配置完成"></p>
<p>添加完成这两个 xml 文件，但并没有进行内部的配置，web.xml 是必须配置的，可以按照如下配置 Struts 2 过滤器。</p>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>至此，Struts 2 基本配置已经完成，可以简单的在 index.jsp 中测试 Struts 2 的标签即可验证是否成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Ant -&amp;gt; Maven -&amp;gt; Gradle&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
      <category term="Gradle" scheme="https://maimieng.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>几种数据结构的多种语言实现</title>
    <link href="https://maimieng.com/2016/20/"/>
    <id>https://maimieng.com/2016/20/</id>
    <published>2016-09-20T16:00:00.000Z</published>
    <updated>2016-09-24T11:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Learning data structures by coding in<br>C/C++/Obj-C/Java/Swift.<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info<ul>
<li>Xcode 8.0</li>
<li>Intellij IDEA 2016.2</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数据结构是一门相对抽象，枯燥的课。</p>
<p>这次算是我第五次学数据结构了吧，之前的几次都没跟上，希望这次至少多敲敲代码，熟悉熟悉。代码全部公开，欢迎指出错误。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>本来准备把代码段粘贴到博客中，但是由于文件较多，不好组织，更不便于阅读。因此我在 GitLab 上建立了一个 Group，将所有项目放置于此。</p>
<p>每种数据结构均使用了 5 种编程语言实现，目的是为了巩固基本的语法，也印证了数据结构与具体的编程语言无关。</p>
<p>由于不同语言的特性不同，C 和 Obj-C 均使用特定的整型数据类型（即 <code>int</code>），而 C++ 使用模版来达到泛型的目的，Swift 和 Java 也原生支持泛型，使得数据结构与数据类型解耦。</p>
<h2 id="Loop-Queue"><a href="#Loop-Queue" class="headerlink" title="Loop Queue"></a>Loop Queue</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p><a href="https://gitlab.com/data-structure-learning/Loop-Queue-in-C/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Loop-Queue-in-C</a></p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p><a href="https://gitlab.com/data-structure-learning/Loop-Queue-in-Cpp/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Loop-Queue-in-Cpp</a></p>
<h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h3><p><a href="https://gitlab.com/data-structure-learning/Loop-Queue-in-ObjC/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Loop-Queue-in-ObjC</a></p>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p><a href="https://gitlab.com/data-structure-learning/Loop-Queue-in-Swift/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Loop-Queue-in-Swift</a></p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="https://gitlab.com/data-structure-learning/Loop-Queue-in-Java/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Loop-Queue-in-Java</a></p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><p><a href="https://gitlab.com/data-structure-learning/Stack-in-C/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Stack-in-C</a></p>
<h3 id="C-3"><a href="#C-3" class="headerlink" title="C++"></a>C++</h3><p><a href="https://gitlab.com/data-structure-learning/Stack-in-Cpp/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Stack-in-Cpp</a></p>
<h3 id="Objective-C-1"><a href="#Objective-C-1" class="headerlink" title="Objective-C"></a>Objective-C</h3><p><a href="https://gitlab.com/data-structure-learning/Stack-in-ObjC/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Stack-in-ObjC</a></p>
<h3 id="Swift-1"><a href="#Swift-1" class="headerlink" title="Swift"></a>Swift</h3><p><a href="https://gitlab.com/data-structure-learning/Stack-in-Swift/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Stack-in-Swift</a></p>
<h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><p><a href="https://gitlab.com/data-structure-learning/Stack-in-Java/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Stack-in-Java</a></p>
<h2 id="Sequence-List"><a href="#Sequence-List" class="headerlink" title="Sequence List"></a>Sequence List</h2><h3 id="C-4"><a href="#C-4" class="headerlink" title="C"></a>C</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-C/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Sequence-List-in-C</a></p>
<h3 id="C-5"><a href="#C-5" class="headerlink" title="C++"></a>C++</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-Cpp/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Sequence-List-in-Cpp</a></p>
<h3 id="Objective-C-2"><a href="#Objective-C-2" class="headerlink" title="Objective-C"></a>Objective-C</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-ObjC/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Sequence-List-in-ObjC</a></p>
<h3 id="Swift-2"><a href="#Swift-2" class="headerlink" title="Swift"></a>Swift</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-Swift/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Sequence-List-in-Swift</a></p>
<h3 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-Java/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Sequence-List-in-Java</a></p>
<h2 id="Link-List"><a href="#Link-List" class="headerlink" title="Link List"></a>Link List</h2><h3 id="C-6"><a href="#C-6" class="headerlink" title="C"></a>C</h3><p><a href="https://gitlab.com/data-structure-learning/Sequence-List-in-C/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Link-List-in-C</a></p>
<h3 id="C-7"><a href="#C-7" class="headerlink" title="C++"></a>C++</h3><p><a href="https://gitlab.com/data-structure-learning/Link-List-in-Cpp/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Link-List-in-Cpp</a></p>
<h3 id="Objective-C-3"><a href="#Objective-C-3" class="headerlink" title="Objective-C"></a>Objective-C</h3><p><a href="https://gitlab.com/data-structure-learning/Link-List-in-ObjC/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Link-List-in-ObjC</a></p>
<h3 id="Swift-3"><a href="#Swift-3" class="headerlink" title="Swift"></a>Swift</h3><p><a href="https://gitlab.com/data-structure-learning/Link-List-in-Swift/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Link-List-in-Swift</a></p>
<h3 id="Java-3"><a href="#Java-3" class="headerlink" title="Java"></a>Java</h3><p><a href="https://gitlab.com/data-structure-learning/Link-List-in-Java/tree/master/" target="_blank" rel="external">https://gitlab.com/data-structure-learning/Link-List-in-Java</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://maimieng.com/ipro/interview/">Daily Interview</a><br><a href="http://www.imooc.com/learn/519" target="_blank" rel="external">数据结构探险—队列篇</a><br><a href="http://www.imooc.com/learn/611" target="_blank" rel="external">数据结构探险—栈篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Learning data structures by coding in&lt;br&gt;C/C++/Obj-C/Java/Swift.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://maimieng.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>小试爬虫</title>
    <link href="https://maimieng.com/2016/19/"/>
    <id>https://maimieng.com/2016/19/</id>
    <published>2016-09-16T16:00:00.000Z</published>
    <updated>2016-09-19T16:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Crawler…<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS 10.12 beta</li>
<li>Python 2.7.10</li>
<li>PyCharm 2016.2</li>
</ul>
</li>
</ul>
<h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p>macOS 自带了 2.7 版本的 Python，因此无需安装。</p>
<blockquote>
<p>注意：<br>在 PyCharm 中开发，有时候会默认为 2.6.9 的 Python，在 Preferences-Project: xxx-Project Interpreter 中，将 Python 版本切换为 2.7.10。（我仅在本文的 Demo Pro 中采用了 PyCharm IDE 开发）</p>
</blockquote>
<p>Terminal 输入 <code>python</code>，即可查看 Python 版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Python 2.7.10 (default, Aug  1 2016, 20:48:38) </div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div></pre></td></tr></table></figure>
<p>众所周知，Python 分为两大版本，2.7.x &amp; 3.x，两者是不兼容的，暂时这里以 2.7.x 版本为例。稍后可能更新 3.x 版甚至 Java 版的爬虫 Demo。</p>
<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><p>pip 即 Python 的包管理工具，我们需要包管理工具来下载所需要的第三方包。</p>
<p>macOS 虽然有 Python 环境，但是没有 pip 插件。</p>
<p>Terminal 输入 <code>sudo easy_install pip</code>，再输入用户密码即可安装。</p>
<p>Terminal 输入 <code>pip</code>，即可验证安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Usage:   </div><div class="line">  pip &lt;command&gt; [options]</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="使用-pip-安装-Beautiful-Soup-4"><a href="#使用-pip-安装-Beautiful-Soup-4" class="headerlink" title="使用 pip 安装 Beautiful Soup 4"></a>使用 pip 安装 Beautiful Soup 4</h2><p>Beautiful Soup 是 Python 的一个第三方包，用于从 HTML 或 XML 文档中提取数据。安装 BS4 的方法有很多，这里使用 pip 安装。</p>
<p>在 Terminal 输入 <code>sudo pip install beautifulsoup4</code>，再输入用户密码即可安装。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>以下 Demo 均可以爬取到相关网页的内容，但由于各种原因，以下网站的链接均删去，参考时请根据具体网站具体分析。有些网站的反爬虫机制比较健全，导致返回错误码，可以查阅相关模拟浏览器或模拟登陆的资料。</p>
<h3 id="爬取学校的某个网站的照片"><a href="#爬取学校的某个网站的照片" class="headerlink" title="爬取学校的某个网站的照片"></a>爬取学校的某个网站的照片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib, urllib2, os, os.path</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSoup</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    response = urllib2.urlopen(url)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> response.getcode() != <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    </div><div class="line">    soup = BeautifulSoup(response, <span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">return</span> soup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(url, prefix)</span>:</span></div><div class="line">    soup = getSoup(url)</div><div class="line">    images = soup.find(name=<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'six alpha'</span>&#125;).find_all(<span class="string">'img'</span>)</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</div><div class="line">        image = <span class="string">'http://www.ngsying.cn'</span> + images[i][<span class="string">'src'</span>]</div><div class="line">        i += <span class="number">1</span></div><div class="line">        urllib.urlretrieve(image, prefix + <span class="string">' %d.jpg'</span> % i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImages</span><span class="params">(urls, marks)</span>:</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(marks[i]):</div><div class="line">            os.mkdir(marks[i])</div><div class="line">        prefix = os.path.join(marks[i], marks[i])</div><div class="line">        getImage(url, prefix)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Welcome to kingcos\' PicDownloader!'</span></div><div class="line"></div><div class="line">    urls = set()</div><div class="line">    marks = []</div><div class="line">    marks.append(<span class="string">'20160910'</span>)</div><div class="line">    marks.append(<span class="string">'20160911'</span>)</div><div class="line">    marks.append(<span class="string">'20160912'</span>)</div><div class="line">    marks.append(<span class="string">'20160913'</span>)</div><div class="line">    marks.append(<span class="string">'20160914'</span>)</div><div class="line">    marks.append(<span class="string">'20160915'</span>)</div><div class="line">    marks.append(<span class="string">'20160916'</span>)</div><div class="line"></div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=67'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=60'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=61'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=62'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=63'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=64'</span>)</div><div class="line">    urls.add(<span class="string">'http://www.***.cn/show.asp?id=65'</span>)</div><div class="line"></div><div class="line">    downloadImages(urls, marks)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Downloading has been finished.'</span></div></pre></td></tr></table></figure>
<h3 id="爬取某图"><a href="#爬取某图" class="headerlink" title="爬取某图"></a>爬取某图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib, urllib2, os, os.path, random</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="keyword">global</span> n</div><div class="line">n = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSoup</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    response = urllib2.urlopen(url)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> response.getcode() != <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    </div><div class="line">    soup = BeautifulSoup(response, <span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">return</span> soup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(url, prefix)</span>:</span></div><div class="line">    soup = getSoup(url)</div><div class="line">    images = soup.find(name=<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>:<span class="string">'srcPic'</span>&#125;).find_all(<span class="string">'img'</span>)</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</div><div class="line">        image = images[i][<span class="string">'src'</span>]</div><div class="line">        i += <span class="number">1</span></div><div class="line">        <span class="keyword">global</span> n</div><div class="line">        urllib.urlretrieve(image, prefix + <span class="string">' %d.jpg'</span> % n)</div><div class="line">        n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImages</span><span class="params">(urls, marks)</span>:</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(marks[i]):</div><div class="line">            os.mkdir(marks[i])</div><div class="line">        prefix = os.path.join(marks[i], marks[i])</div><div class="line">        getImage(url, prefix)</div><div class="line">        <span class="comment"># i += 1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Welcome to kingcos\' PicDownloader!'</span></div><div class="line"></div><div class="line">    urls = set()</div><div class="line">    marks = []</div><div class="line">    marks.append(<span class="string">'24974'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">        url = <span class="string">'http://www.***.com/meimei/24974-'</span> + str(i) + <span class="string">'.html'</span></div><div class="line">        urls.add(url)</div><div class="line"></div><div class="line">    downloadImages(urls, marks)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Downloading has been finished.'</span></div></pre></td></tr></table></figure>
<h3 id="爬取某站图片"><a href="#爬取某站图片" class="headerlink" title="爬取某站图片"></a>爬取某站图片</h3><p>该网站有一定的反爬机制，通过设置 header 绕过。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib, urllib2, os, os.path, random</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSoup</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">    header = &#123; <span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36'</span> &#125;</div><div class="line">    req = urllib2.Request(url, headers=header)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> response.getcode() != <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    </div><div class="line">    soup = BeautifulSoup(response, <span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">return</span> soup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(url, prefix)</span>:</span></div><div class="line">    soup = getSoup(url)</div><div class="line">    images = soup.find(name=<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'main-body'</span>&#125;).find_all(<span class="string">'a'</span>)</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> images:</div><div class="line">        image = img[<span class="string">'href'</span>]</div><div class="line">        i += <span class="number">1</span></div><div class="line">        urllib.urlretrieve(image, prefix + <span class="string">' %d.jpg'</span> % i)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImages</span><span class="params">(urls, marks)</span>:</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(marks[i]):</div><div class="line">            os.mkdir(marks[i])</div><div class="line">        prefix = os.path.join(marks[i], marks[i])</div><div class="line">        getImage(url, prefix)</div><div class="line">        i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Welcome to kingcos\' PicDownloader!'</span></div><div class="line"></div><div class="line">    urls = set()</div><div class="line">    marks = [<span class="string">'14007'</span>, <span class="string">'13998'</span>, <span class="string">'13987'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> marks:</div><div class="line">        url = <span class="string">'http://www.***.***/'</span> + m + <span class="string">'/'</span></div><div class="line">        urls.add(url)</div><div class="line"></div><div class="line">    downloadImages(urls, marks)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Downloading has been finished.'</span></div></pre></td></tr></table></figure>
<h2 id="Demo-Pro"><a href="#Demo-Pro" class="headerlink" title="Demo Pro"></a>Demo Pro</h2><p>上面的 Demo 仅仅是爬去某个单独的网页，下面是可以爬取<strong>相关</strong>链接指定图片的 Demo。即指定一个根 URL，其可以爬取到其他符合条件的 URL，进而爬取其中的内容，而不局限于传入的指定 URL。测试爬取了 1000+ 张图片。</p>
<h3 id="爬去某站的相关图片"><a href="#爬去某站的相关图片" class="headerlink" title="爬去某站的相关图片"></a>爬去某站的相关图片</h3><p>crawler_main.py</p>
<blockquote>
<p>入口主函数：<br>负责统一调用其他类的方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> Crawler <span class="keyword">import</span> url_manager, html_downloader, html_parser, html_outputer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlerMain</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.urls = url_manager.UrlManager()</div><div class="line">        self.downloader = html_downloader.HtmlDownloader()</div><div class="line">        self.parser = html_parser.HtmlParser()</div><div class="line">        self.outputer = html_outputer.HtmlOutputer()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">craw</span><span class="params">(self, root_url)</span>:</span></div><div class="line">        count = <span class="number">1</span></div><div class="line">        self.urls.add_new_url(root_url)</div><div class="line">        <span class="keyword">while</span> self.urls.has_new_url():</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                new_url = self.urls.get_new_url()</div><div class="line">                <span class="keyword">print</span> <span class="string">'craw %d: %s'</span> % (count, new_url)</div><div class="line">                html_cont = self.downloader.download(new_url)</div><div class="line">                new_urls, new_data = self.parser.parse(new_url, html_cont)</div><div class="line">                self.urls.add_new_urls(new_urls)</div><div class="line">                self.outputer.collect_data(new_data)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> count == <span class="number">100</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">'Crawl finished!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Welcome to kingcos\' PicDownloader!'</span></div><div class="line">    root_url = <span class="string">'http://www.***.***/'</span></div><div class="line">    obj_spider = CrawlerMain()</div><div class="line">    obj_spider.craw(root_url)</div></pre></td></tr></table></figure>
<p>url_manager.py</p>
<blockquote>
<p>URL 管理器：<br>负责管理 URL，包括添加新 URL，判断是非存在未爬取链接等方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlManager</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.new_urls = set()</div><div class="line">        self.old_urls = set()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_url</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.new_urls <span class="keyword">and</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.old_urls:</div><div class="line">            self.new_urls.add(url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_urls</span><span class="params">(self, urls)</span>:</span></div><div class="line">        <span class="keyword">if</span> urls <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(urls) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">            self.add_new_url(url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_new_url</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.new_urls) != <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_url</span><span class="params">(self)</span>:</span></div><div class="line">        new_url =  self.new_urls.pop()</div><div class="line">        self.old_urls.add(new_url)</div><div class="line">        <span class="keyword">return</span> new_url</div></pre></td></tr></table></figure>
<p>html_downloader.py</p>
<blockquote>
<p>HTML 下载器：<br>负责传回指定 URL 的响应</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlDownloader</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, url)</span>:</span></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        header = &#123;</div><div class="line">            <span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36'</span>&#125;</div><div class="line">        req = urllib2.Request(url, headers=header)</div><div class="line">        response = urllib2.urlopen(req)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> response.getcode() != <span class="number">200</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>html_parser.py</p>
<blockquote>
<p>HTML 转换器：<br>对新的 URL 对应的 HTML 分析，提取所需内容，并提取符合需求的 URL，加入到待爬取 URL 集合。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re, urlparse</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlParser</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_new_urls</span><span class="params">(self, page_url, soup)</span>:</span></div><div class="line">        new_urls = set()</div><div class="line">        links = soup.find_all(<span class="string">'a'</span>, href = re.compile(<span class="string">r"http://www.***.***/\d+/"</span>))</div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">            new_url = link[<span class="string">'href'</span>]</div><div class="line">            new_full_url = urlparse.urljoin(page_url, new_url)</div><div class="line">            new_urls.add(new_full_url)</div><div class="line">        <span class="keyword">return</span> new_urls</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_new_data</span><span class="params">(self, page_url, soup)</span>:</span></div><div class="line">        res_data = &#123;&#125;</div><div class="line">        res_data[<span class="string">'url'</span>] = page_url</div><div class="line">        images = soup.find(name=<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>:<span class="string">'main-body'</span>&#125;).find_all(<span class="string">'a'</span>)</div><div class="line">        <span class="keyword">return</span> images</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, page_url, html_cont)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> page_url <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> html_cont <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        </div><div class="line">        soup = BeautifulSoup(html_cont, <span class="string">'html.parser'</span>)</div><div class="line">        new_urls = self._get_new_urls(page_url, soup)</div><div class="line">        new_data = self._get_new_data(page_url, soup)</div><div class="line">        <span class="keyword">return</span> new_urls, new_data</div></pre></td></tr></table></figure>
<p>html_outputer.py</p>
<blockquote>
<p>HTML 输出器：<br>对收集到数据进行取回，放置在本地文件夹内</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding: utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib, random, os</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlOutputer</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect_data</span><span class="params">(self, images)</span>:</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> images:</div><div class="line">            image = img[<span class="string">'href'</span>]</div><div class="line">            i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'img'</span>):</div><div class="line">                os.mkdir(<span class="string">'img'</span>)</div><div class="line">            prefix = os.path.join(<span class="string">'img'</span>, <span class="string">'img'</span>)</div><div class="line">            urllib.urlretrieve(image, prefix + <span class="string">'%d'</span> % i + str(random.randint(<span class="number">1</span>, <span class="number">100</span>)) + <span class="string">'.jpg'</span>)</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.imooc.com/learn/177" target="_blank" rel="external">Python 入门</a><br><a href="http://www.imooc.com/learn/563" target="_blank" rel="external">Python 开发简单爬虫</a><br><a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">Beautiful Soup 官方网站</a><br><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">Beatiful Soup 4 Docs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Crawler…&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://maimieng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>谈谈组装电脑</title>
    <link href="https://maimieng.com/2016/18/"/>
    <id>https://maimieng.com/2016/18/</id>
    <published>2016-09-02T16:00:00.000Z</published>
    <updated>2016-09-04T15:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>自从入了 Mac 坑，<br>就暂时没考虑过组装电脑，<br>谈谈这次帮同学装机…<br></blockquote><br><a id="more"></a></p>
<h2 id="我的电脑"><a href="#我的电脑" class="headerlink" title="我的电脑"></a>我的电脑</h2><p>家里的第一台电脑是 2007 年暑假买的，当时是父亲央求其同事，在电脑城配了一个总价 4000 元整的组装电脑。</p>
<p>这台组装电脑的配置我很早就用鲁大师看过，但已不记得 CPU 型号等等细节，只是知道 1G 的内存，以及一块 160G 的机械硬盘。由于种种原因，2012 年我用自己「积蓄」买了一台 11 寸宏碁上网本，4G 内存 500G 硬盘。虽然是奔腾处理器，没有独立显卡，但用起来很舒心。也被我折腾得跑过 Windows XP/7/8/8.1，Ubuntu，以及 Mac OS X，但是由于显卡无法驱动，便作罢。曾经想写一篇文章纪念这台上网本，结果丢在简书，只写了个开头就没再深入。</p>
<p>后来我把它卖了，700 元。现在想想有点后悔，这也许是我用的最久的一手电子设备。之后我入了一台二手 Mac mini，买了一台新显示器，一套键鼠，一块移动硬盘。第一次使用 Mac 觉得很好，可惜主机晚上宿舍一熄灯便不能使用，也不便携，便出手了。在体验过 Mac mini 之后，我就知道二手 Mac 的配置是绝对够用的，毕竟新的太贵，无法承受。</p>
<p>在出手 Mac mini 之后，我便在寻找合适的二手 MacBook Pro。最后入手了 MD313，本来是考虑 MD101，因为 MD101 与我之前的 Mac mini 配置相同。可惜预算有限，便入了配置更差的 MD313。这台 MacBook Pro 8G 内存，160G 固态，也足以满足不玩游戏的我了。实际使用中，代码的编译速度远大于自带机械硬盘的 PC 唯一的槽点便是固态太小，但我又觉得没必要再加固态。最后，在陪伴我整个大二时光之后，我把这台电脑也出了，换成了现在手里的 ME865。</p>
<p>我想，暂时没必要也没理由再换了吧？</p>
<h2 id="谈谈组装"><a href="#谈谈组装" class="headerlink" title="谈谈组装"></a>谈谈组装</h2><p>其实在升入大学，就基本没有考虑过组装机。一是我不玩游戏，没必要组装高性能的主机；二是主机不便携，而我习惯背着电脑跑。所以这两点就基本告别组装机了。这次也是受同学之托，帮其查阅了很多资料，才敲定的。其实对组装电脑了解不多，但经过许久的搜索和爬贴，也知道了很多新的知识。</p>
<p>组装电脑比笔记本性能高，散热好；比整机购买更靠谱；又能自己体验装机的过程，被许多游戏玩家追捧。「整机烈士墙」的悲剧也几乎不会发生，只有 CPU 选择淘宝购买散片，因为暂时没有可以仿造的。其他配件均为京东购买，如果有质量问题，京东的退换货服务可以更好地解决。</p>
<h2 id="组装之选"><a href="#组装之选" class="headerlink" title="组装之选"></a>组装之选</h2><p>若想参考，注意时效性及个人用途。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Price</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>淘宝</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>CPU：Intel E3-1230 v3</td>
<td style="text-align:center">1422</td>
</tr>
<tr>
<td><strong>京东</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>机箱：爱国者 黑暗骑士 D8</td>
<td style="text-align:center">139</td>
</tr>
<tr>
<td>显示器：三星 C24F390H 23.5寸曲面</td>
<td style="text-align:center">979</td>
</tr>
<tr>
<td>主板：技嘉 B85-HD3</td>
<td style="text-align:center">549</td>
</tr>
<tr>
<td>显卡：索泰 GTX1060-3G</td>
<td style="text-align:center">1799</td>
</tr>
<tr>
<td>内存：金士顿 骇客神条8G</td>
<td style="text-align:center">278</td>
</tr>
<tr>
<td>硬盘：东芝 Q300 240G</td>
<td style="text-align:center">409</td>
</tr>
<tr>
<td>电源：安钛克 VP500P 500W</td>
<td style="text-align:center">299</td>
</tr>
<tr>
<td>散热：九州风神 玄冰400</td>
<td style="text-align:center">99.9</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>京东总计：4551.9-150-10</td>
<td style="text-align:center">4391.9</td>
</tr>
<tr>
<td>合计：</td>
<td style="text-align:center">5813.9</td>
</tr>
</tbody>
</table>
<h2 id="一点小经验…"><a href="#一点小经验…" class="headerlink" title="一点小经验…"></a>一点小经验…</h2><p>组装电脑最重要的是配置的选择，建议大家多在贴吧或专业论坛寻找，因为这里消息更新速度足够快。配置是完全跟个人预算及用途相关的，切忌眼高手低。组装电脑由于其灵活性，有远见的同学需要考虑到未来的升级。</p>
<p>京东的发货速度很快，前一天下单，第二天中午就到货了。京东的产品没话说，但为了防止二手东，也需要检查配件的密封。</p>
<p>关于发票，这次是替他人购买，为方便对方留存，选择了纸质发票。发票的抬头在下单时选择，不等同于收货人姓名。如果是自己下单，可以选择电子发票，环保不易丢。虽说凭发票保修有时候已经是多余之选，但有些时候还是需要提供必要的发票来维护自己权益。</p>
<p>这次组装电脑花费了 3 个多小时，说实话这是我第一次组装。如果都是新手，建议查阅相关教程视频，配合说明书组装，有不确定的接口一定先搜索在尝试。组装过程注意安全，散热器的散热片以及机箱处都有可能刮伤（别问我为什么 T T）。</p>
<p>组装的过程是比较顺利的，中途没有测试，组装完全才开机，一次点亮。由于学校网络故障，「娱乐大师」没有测试。不过整体的配置应当是足够的，关于这些配件，需要注意的是，如果选择的是 2.5 寸固态硬盘，可以到淘宝选购 3.5 寸的硬盘支架，方便固定硬盘。这点在拿到快递之前，是没有想到的。还有一点，如果追求音质，不妨在购机之时选择合适的音箱。</p>
<p>说说这次选择比较不太好的一点，机箱。建议在选购时选择质量更好，更合理的机箱。需要考虑到整体的体积大小，主板的大小，电源的上置或是下置，USB 等拓展口的位置，以及是否可走背线。如果想双显卡交火，那么机箱要选择足够容纳的。这次买的机箱性价比还是很高的，但是感觉做工一般，如果对机箱要求较高，也可以到实体店选购。</p>
<p>总的来说这次装机还是比较顺利的，这些配件也是足够坚固的，耐得起折腾。有一定动手能力的新手是完全可以自我尝试的。但一定的参考也是必要的。</p>
<p>当然这点小经验是对于几乎没有经验的小白，或是提醒自己而写的，如果有所差错，我也愿意倾听，知错便改。也谢谢相信我的这两位同学，能够有机会自己尝试装机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;自从入了 Mac 坑，&lt;br&gt;就暂时没考虑过组装电脑，&lt;br&gt;谈谈这次帮同学装机…&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="PC" scheme="https://maimieng.com/tags/PC/"/>
    
  </entry>
  
  <entry>
    <title>Sketch 中的版本控制</title>
    <link href="https://maimieng.com/2016/17/"/>
    <id>https://maimieng.com/2016/17/</id>
    <published>2016-09-01T16:00:00.000Z</published>
    <updated>2016-10-02T12:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Sketch 是一款矢量图设计软件，<br>简单搭配 git-sketch-plugin 插件，<br>即可实现对其版本控制。<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Sketch 39.1</li>
<li><a href="https://github.com/mathieudutour/git-sketch-plugin" target="_blank" rel="external">git-sketch-plugin 0.7</a></li>
<li><a href="https://gitlab.com/u/kingcos" target="_blank" rel="external">GitLab</a></li>
<li>SourceTree</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几日在 V 站看到有人提出关于 Sketch 版本控制的问题。才发现 Sketch 已有插件支持更加方便的版本控制。Google 了下，可能是设计师对 Git 了解较少，也可能是版本控制对于非文本的支持并不能体现其优越性，所以可能很多专业的设计师并不会采用 Git。但作为程序员对于 Git 等版本控制系统应当是有所了解，而且通过插件可以更简单的查看不同版本的区别。因此，这次就来尝试下如何进行 Sketch 中的版本控制。</p>
<p>PS: 该插件的作者更新的速度可能较快，仅仅在本文修改的几天，就更新了两次，但基本使用应该不会有太大变化。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="安装-git-sketch-plugin-插件"><a href="#安装-git-sketch-plugin-插件" class="headerlink" title="安装 git-sketch-plugin 插件"></a>安装 git-sketch-plugin 插件</h3><p><em>可参考 <a href="https://github.com/mathieudutour/git-sketch-plugin" target="_blank" rel="external">https://github.com/mathieudutour/git-sketch-plugin</a> README 中的 Installation 部分。</em></p>
<p>1.下载插件。最新发行版本地址：<a href="https://github.com/mathieudutour/git-sketch-plugin/releases" target="_blank" rel="external">https://github.com/mathieudutour/git-sketch-plugin/releases</a><br>2.解压后双击 Git.sketchplugin 即可自动安装至 Sketch 中。<br>3.如图弹窗，即安装好插件。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_1.png" alt="如图即安装好插件"></p>
<p>之后可以按个人喜好对该插件设置。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_2.png" alt="插件的 Preference"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_3.png" alt="Preference"></p>
<p>设置保存成功将会在屏幕下方出现如图标识。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_4.png" alt="插件保存设置成功"></p>
<h3 id="配置-Git-仓库"><a href="#配置-Git-仓库" class="headerlink" title="配置 Git 仓库"></a>配置 Git 仓库</h3><p>这里使用的是 GitLab 来进行托管，也可以选择 GitHub 或是国内的 Coding.net 等。这里由于以后打算模仿一些好的设计，所以建立了一个 Group，之后可以在这个组内新建 Project，方便管理。</p>
<p>Group 常用于多人协作，方便管理每个人的权限，这里对其建立过程，不再叙述，可自行尝试。这里简要叙述如何在 GitLab 上建立 Project。</p>
<p>点击 <strong>New Project</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_5.png" alt="点击 New Project"></p>
<p>输入项目名称，描述（可选），以及可见等级。</p>
<p>可见等级即该项目的可见程度。Private 为私有项目，如果他人想访问则必须被授权；Internal 为内部项目，在 Group 内的成员即可访问；Public 为公有项目，所有人可以访问。</p>
<p>这里我选择 Public，方便交流共享。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_6.png" alt="填写相应信息"></p>
<p>点击 <strong>Create Project</strong> 看到如图，即创建成功。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_7.png" alt="创建 Project 成功"></p>
<p>创建 Project 后，通常需要配置 README.md, LICENSE, .gitignore 文件。由于 Sketch 非文本格式，所以不需要 .gitignore 文件。README.md 文件是描述项目的文件，当他人打开项目主页，下方会将其内容自动渲染（markdown 格式）。LICENSE 是版权声明，我通常选择较为宽松的 MIT LICENSE，若是商业项目，请咨询后添加。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_8.png" alt="添加了 README.md 和 LICENSE"></p>
<h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h3><p>本地想要将变更推送到远程的 Git 服务器，可以通过 HTTPS 或 SSH 进行连接。HTTPS 需要每次验证用户名及密码，（插件貌似不支持，测试时失败，待确定）。SSH 需要将本地密钥填入到 GitLab 中，这里不详述如何生成密钥，建议参考 GitLab 相应页面的有关介绍。</p>
<p>填入 SSH Key。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_9.png" alt="SSH Key 填写页面"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_10.png" alt="添加成功 SSH Key"></p>
<p>成功添加之后，我们可以在 Terminal 验证，输入 <code>ssh -T git@gitlab.com</code>。第一次时，有个警告，需要输入 <code>yes</code>，如果成功即可显示你的用户名，如果不成功，可能是 Git 中的用户名和 GitLab 不一致。可以通过以下命令全局设置，注意用户名和邮箱替换成自己的，并与所用的 GitLab 用户名以及邮箱一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;&lt;username&gt;&quot;  </div><div class="line">git config --global user.email &lt;email&gt;</div></pre></td></tr></table></figure>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_11.png" alt="SSH 连接测试成功"></p>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>在 Projetc 中切换为 SSH，复制 SSH URL，这将作为本地计算机连接远程 Git 仓库的 URL。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_12.png" alt="复制 SSH URL"></p>
<p>之后，我们需要克隆仓库，熟悉 Terminal 的同学可以直接 <code>git clone &lt;git-remote-repository-url&gt; &lt;local-directory&gt;</code> 克隆到本地。也可以通过 SourceTree 来管理。</p>
<p>打开 SourceTree，点击 <strong>+ 新仓库</strong>，点击从 <strong>URL 克隆</strong>。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_13.png" alt="SourceTree + 新仓库-从 URL 克隆"></p>
<p>将刚才拷贝的 URL 粘贴到<strong>源 URL</strong>，后续两条会自动填充，也可按照个人喜好修改。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_14.png" alt="填入源 URL"></p>
<p>填入后点击<strong>克隆</strong>，稍等片刻即可成功克隆到本地。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_15.png" alt="成功克隆仓库到本地"></p>
<p>在 Finder 中可以看到刚才添加的 README.md 以及 LICENSE 文件也存在，.git 的隐藏文件夹即表明当前文件夹已受 Git 版本控制。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_16.png" alt="Finder 中的仓库"></p>
<p>以后即可在该目录新建 Sketch 文件，或者将已存在的 Sketch 拷贝至此目录即可。我们这里新建 Sketch 文件以演示。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_17.png" alt="在克隆仓库的目录处新建 Sketch 文件"></p>
<p>之后，我们需要保存文件，Cmd + s。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_18.png" alt="保存文件"></p>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git-add"></a>git-add</h3><p>如果有文件想要被 Git 所管理，我们需要将其添加到 Git 中。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_19.png" alt="Add file to git"></p>
<p>如果出现如下错误，可以参考本文下方的资料解决。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_20.png" alt="shell_session_update: command not found"></p>
<p>如图即添加成功。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_21.png" alt="添加到 Git 成功"></p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git-commit"></a>git-commit</h3><p>当我们的文件受 Git 控制，我们就可以开始做设计了。我这里是模仿 Wunderlist 的 icon。当制作完成，我们可以 commit 一下，提交更改。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_22.png" alt="Commit"></p>
<p>输入更改的简介，并勾选自动生成示意图。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_23.png" alt="Commit 界面"></p>
<p>成功后，屏幕下方会有提示（消失太快，没截到图）。如果 Commit 成功，这时就可以打开 SourceTree 看到新的 Commit。</p>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git-push"></a>git-push</h3><p>当我们需要将本地的更改推送到远程服务器（例如 GitLab），那么就需要 Push。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_24.png" alt="Push"></p>
<p>Push 操作是需要连网的，需要一定的时间。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_25.png" alt="Push 成功"></p>
<p>成功之后我们就可以在 GitLab 上查看到新的更改。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_26.png" alt="Push 后的 GitLab"></p>
<p>而我们没有手动导出的示意图便自动生成，如果在进行一个版本更迭的设计时，那么我们就能更清晰的知道多种设计的不同。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/gitforsketch_27.png" alt="自动生成的示意图"></p>
<h2 id="后话…"><a href="#后话…" class="headerlink" title="后话…"></a>后话…</h2><p>Git 和 SVN 都是很好的版本控制系统，在群里也看到有设计师使用 CornerStone（SVN 客户端）来进行版本管理。</p>
<p>不管用什么工具，设计本身才是重要的，希望能坚持下来，Design by heart…</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://superuser.com/questions/1044130/why-am-i-having-how-can-i-fix-this-error-shell-session-update-command-not-f" target="_blank" rel="external">Why am I having / how can I fix this error: “shell_session_update: command not found”</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Sketch 是一款矢量图设计软件，&lt;br&gt;简单搭配 git-sketch-plugin 插件，&lt;br&gt;即可实现对其版本控制。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Git/GitHub" scheme="https://maimieng.com/tags/Git-GitHub/"/>
    
      <category term="Sketch" scheme="https://maimieng.com/tags/Sketch/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 UIImage 内存管理问题</title>
    <link href="https://maimieng.com/2016/16/"/>
    <id>https://maimieng.com/2016/16/</id>
    <published>2016-08-13T16:00:00.000Z</published>
    <updated>2016-08-29T03:24:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>探究 iOS 中 UIImage 中两种不同 Initializers 带来的内存问题<br>本文使用 Swift 版本为 3.0 beta。<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0 beta</li>
<li>Xcode 8.0 beta 5</li>
<li>macOS Sierra Public Beta 3</li>
</ul>
</li>
</ul>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近几天接触 iOS 的 UI 学习，由于 Swift 更新太快太频繁，因此看的是 Obj-C 的项目，自己修改为 Swift 3.0 beta 可编译运行的版本。Xcode 8.0 随着几个版本的更迭也趋于稳定，不过在不同 beta 版中，Swift 3.0 beta 的语法也略有改动，之前整理的 <a href="https://maimieng.com/ipro/note">初探 Swift 3.0 系列</a>也会略有过时了。这次是制作一个简单的图片浏览器，而且会动态的展示（伪） GIF 动画，因此需要处理 animation 以及多张图片。如果不进行适当的内存管理，那么大量的图片占用内存，将使得程序在 iOS 设备上崩溃，造成极差的用户体验。因此本文浅显地分析两种不同的 <code>UIImage</code> 初始化方法，为以后的使用做以适当铺垫。</p>
<p>不过，鉴于刚刚入门 iOS，所以某些行为或说法也许不太得当，需要学习的地方还有很多，故若有纰漏，还望指出。</p>
<h3 id="init-named-String"><a href="#init-named-String" class="headerlink" title="init?(named: String)"></a><code>init?(named: String)</code></h3><blockquote>
<p>Loading and Caching Images <code>init?(named: String)</code><br>Returns the image object associated with the specified filename.<br><strong>Discussion</strong><br>This method looks in the system caches for an image object with the specified name and returns the variant of that image that is best suited for the main screen. If a matching image object is not already in the cache, this method locates and loads the image data from disk or from an available asset catalog, and then returns the resulting object.<br>The system may purge cached image data at any time to free up memory. Purging occurs only for images that are in the cache but are not currently being used.<br>In iOS 9 and later, this method is thread safe.<br><strong>Special Considerations</strong><br>If you have an image file that will only be displayed once and wish to ensure that it does not get added to the system’s cache, you should instead create your image using <code>imageWithContentsOfFile:</code>. This will keep your single-use image out of the system image cache, potentially improving the memory use characteristics of your app.</p>
<p><strong>加载并缓存图像</strong> <code>init?(named: String)</code><br>返回指定文件名所关联的图像对象。<br><strong>论述</strong><br>该方法在系统缓存中寻找指定名称的图像对象，并返回最适合主屏幕的图像的变体。若对应的图像对象已不存在于缓存，则该方法将在磁盘或存在的资源目录中定位并载入图像数据，并返回结果对象。<br>系统可能随时清空图像数据以释放内存。清空操作只会发生在处于缓存但当前未被使用的图像。<br>在 iOS 9 及以上版本，该方法是线程安全的。<br><strong>特殊考虑</strong><br>如果图像文件只需显示一次，且希望确保其不会被添加到系统的缓存中，你应当使用 <code>imageWithContentsOfFile:</code> 方法。该方法将保证其在系统图像缓存以外的单一使用，潜在提升 app 的内存使用特性。</p>
</blockquote>
<h3 id="init-contentsOfFile-String"><a href="#init-contentsOfFile-String" class="headerlink" title="init?(contentsOfFile: String)"></a><code>init?(contentsOfFile: String)</code></h3><blockquote>
<p>Creating and Initializing Image Objects <code>init?(contentsOfFile: String)</code><br>Initializes and returns the image object with the contents of the specified file.<br><strong>Discussion</strong><br>This method loads the image data into memory and marks it as purgeable. If the data is purged and needs to be reloaded, the image object loads that data again from the specified path.</p>
<p><strong>创建并初始化图像对象</strong> <code>init?(contentsOfFile: String)</code><br>初始化并返回指定文件内容的图像对象。<br><strong>论述</strong><br>该方法加载图像数据到内存，并标记其可以被清空。如果数据被清空，需要重新载入，图像对象将会从指定路径再次加载数据。</p>
</blockquote>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>如苹果官方文档所述，这两个 Initializer 虽然都是加载图片，但是一个做了缓存，另一个并没有。所以 <code>init?(named: String)</code> 更适合加载 icon 等占用小的图片，而 <code>init?(contentsOfFile: String)</code> 适合较大的图片。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// init?(named: String)</span></div><div class="line"><span class="keyword">let</span> demoIcon = <span class="type">UIImage</span>(named: <span class="string">"DemoIcon"</span>)</div><div class="line"></div><div class="line"><span class="comment">// init?(contentsOfFile: String)</span></div><div class="line"><span class="keyword">let</span> demoImagePath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"DemoImage.png"</span>, ofType: <span class="literal">nil</span>)</div><div class="line"><span class="keyword">let</span> demoImage = <span class="type">UIImage</span>(contentsOfFile: demoImagePath ?? <span class="string">""</span>)</div></pre></td></tr></table></figure>
<p><code>init?(named: String)</code> 常用于加载小且常用的 icon，其初始化的图片，占用的缓存只会在程序退出时才清空，即使消除强引用仍会占用缓存。而 <code>init?(contentsOfFile: String)</code> 初始化的图片，在没有强引用时便会自动销毁。</p>
<p>而 <code>init?(contentsOfFile: String)</code> 使用有一些注意点。该方法的参数是图片的全路径，所以需要通过 Bundle 来获取，而且需要带上后缀名。需要注意的是，如果图片放置在 <code>Assets.xcassets</code> 中，Bundle 是无法获取到的，需要直接复制到项目中。否则的话 <code>demoImagePath</code> 将为 <code>nil</code>，导致无法获取到图片，程序也将可能崩溃。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Xcode Documentation &amp; API Reference</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;探究 iOS 中 UIImage 中两种不同 Initializers 带来的内存问题&lt;br&gt;本文使用 Swift 版本为 3.0 beta。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Maven 3 安装第三方 JAR 向导翻译及 Demo</title>
    <link href="https://maimieng.com/2016/15/"/>
    <id>https://maimieng.com/2016/15/</id>
    <published>2016-07-19T16:00:00.000Z</published>
    <updated>2016-08-16T16:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Maven 对于 JAR 的导入提供了巨大便利，<br>然而有些 JAR 包却因为各种原因不存在于各大仓库之中，<br>本文即是对 Maven 官网的教程翻译，<br>希望可以帮到同样困惑的人。<br></blockquote><br><a id="more"></a></p>
<blockquote>
<p>PS:<br>Maven，名词，译作专家，内行。在程序设计开发中，Maven 是一个较为强大但依赖网络的项目管理工具。<br>本文英语原文引自 <a href="http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html" target="_blank" rel="external">Apache Maven 官网中的 Guide to installing 3rd party JARs</a>。<br>Last Published: 2016-07-09<br>最新发行时间：2016 年 7 月 9 日</p>
</blockquote>
<h2 id="翻译-安装第三方-JAR-向导"><a href="#翻译-安装第三方-JAR-向导" class="headerlink" title="[翻译]安装第三方 JAR 向导"></a>[翻译]安装第三方 JAR 向导</h2><p>尽管很少发生，但有时会有第三方的 JAR，想要放入本地仓库为自己的构建使用，这是因为这些 JAR 不存在于任何公共仓库，例如 <a href="http://search.maven.org/" target="_blank" rel="external">Maven 中心（仓库）</a>。JAR 必须被放置在本地仓库的正确位置，这样才能被 Apache Maven 获取到。</p>
<p>为使得这一过程更加简单，且不易出错，我们已提供了相对简单的 <a href="http://maven.apache.org/plugins/maven-install-plugin/" target="_blank" rel="external">Maven-安装-插件</a>。在本地仓库安装 JAR 使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=&lt;JAR 文件路径&gt; -DgroupId=&lt;组-id&gt; \</div><div class="line">	-DartifactId=&lt;工件-id&gt; -Dversion=&lt;版本&gt; -Dpackaging=&lt;包&gt;</div></pre></td></tr></table></figure>
<p>如果也含有 pom 文件，你可以使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=&lt;JAR 文件路径&gt; -DpomFile=&lt;pom 文件路径&gt;</div></pre></td></tr></table></figure>
<p>使用 Maven-安装-插件 v2.5 使得安装 JAR 更加简单。如果那个 JAR 文件由 Apache Maven 构建，其在 META-INF 的子目录下还包括一个 pom.xml 文件，它将被默认读入。在这种情形下，你只需要这么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=&lt;JAR 文件路径&gt;</div></pre></td></tr></table></figure>
<h2 id="Demo-导入本地-ojdbc6-jar"><a href="#Demo-导入本地-ojdbc6-jar" class="headerlink" title="[Demo]导入本地 ojdbc6.jar"></a>[Demo]导入本地 ojdbc6.jar</h2><ul>
<li>Info:<ul>
<li>JDK 1.8</li>
<li>Intellij IDEA</li>
</ul>
</li>
</ul>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于目前使用的数据库是 Oracle XE，所以在 Java 项目中需要导入其驱动包 ojdbc6.jar。而由于该 JAR 许可证过期，所以无法直接在 Maven 项目中导入。所以做此测试，验证该向导是否可行，看看其中有木有什么坑。</p>
<h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><h4 id="下载-ojdbc6-jar"><a href="#下载-ojdbc6-jar" class="headerlink" title="下载 ojdbc6.jar"></a>下载 ojdbc6.jar</h4><p><a href="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html" target="_blank" rel="external">官网下载 Oracle JDBC</a></p>
<h4 id="按要求做出命令"><a href="#按要求做出命令" class="headerlink" title="按要求做出命令"></a>按要求做出命令</h4><p>如果在<strong>命令行</strong>，可以直接使用以下形式（注意将部分替换为你所要导入 JAR 的信息）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=/Users/kingcos/Downloads/ojdbc6.jar -DgroupId=com.oracle ＼</div><div class="line">	-DartifactId=ojdbc6 -Dversion=11.2.0.3 -Dpackaging=jar</div></pre></td></tr></table></figure>
<p>如果在 IDEA 配置中，第一行的 <code>\</code> 需要删除，即：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=/Users/kingcos/Downloads/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.3 -Dpackaging=jar</div></pre></td></tr></table></figure>
<p>在 IDEA 右侧找到 Maven Projects</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ojdbc4maven_1.png" alt="入口"></p>
<p>点击 Maven Projects 菜单中的命令行按钮</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ojdbc4maven_2.png" alt="IDEA Maven 命令行"></p>
<p>输入刚才的命令并运行，查看下方区域是否显示 BUILD SUCCESS</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ojdbc4maven_3.png" alt="BUILD SUCCESS"></p>
<p>如果出现失败，要排查上述各项命令是否正确。<br>如果成功，即可在 pom.xml 中加入你刚刚导入的 JAR。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ojdbc4maven_4.png" alt="添加依赖"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>其实我们找到本地的 maven 仓库，看看需要的 JAR 在不在就可以了，如下图，我的 ojdbc6.jar 已经成功导入本地 maven 仓库。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ojdbc4maven_5.png" alt="maven 本地仓库目录"></p>
<p>不过，我也在这里写了一个小的测试方法，即测试连接数据库后，将查询结果打印，运行成功且输出正确，来测试刚才的配置是否正确。（本机测试成功）</p>
<p>测试类：App.java（由于直接测试，这里没有更改该类名）</p>
<p>注意：将连接数据库的代码即 SQL 语句替换为自己数据库的设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maimeing;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</div><div class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"demo"</span>, <span class="string">"123456"</span>);</div><div class="line">            String sql = <span class="string">"select count(*) from person"</span>;</div><div class="line">            pstm = conn.prepareStatement(sql);</div><div class="line">            rs = pstm.executeQuery();</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">                System.out.println(rs.getInt(<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                rs.close();</div><div class="line">                pstm.close();</div><div class="line">                conn.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://stackoverflow.com/questions/1074869/find-oracle-jdbc-driver-in-maven-repository" target="_blank" rel="external">ojdbc 许可证过期：摘自 Find Oracle JDBC driver in Maven repository 中一名回答者的回复</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Maven 对于 JAR 的导入提供了巨大便利，&lt;br&gt;然而有些 JAR 包却因为各种原因不存在于各大仓库之中，&lt;br&gt;本文即是对 Maven 官网的教程翻译，&lt;br&gt;希望可以帮到同样困惑的人。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Translation" scheme="https://maimieng.com/tags/Translation/"/>
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
      <category term="Oracle" scheme="https://maimieng.com/tags/Oracle/"/>
    
      <category term="Maven" scheme="https://maimieng.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的 Serializable 与 transient</title>
    <link href="https://maimieng.com/2016/14/"/>
    <id>https://maimieng.com/2016/14/</id>
    <published>2016-07-16T16:00:00.000Z</published>
    <updated>2016-07-19T05:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>目前个人对 Java 的理解应用仅限于皮毛，<br>故若有不妥，会及时修正。<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>JDK 1.8</li>
<li>Eclipse EE neon</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 中的 <code>transient</code> 是有关对象序列化的关键字，之前学习中并没有注意，并且没有实际使用。但是这次希望可以总结一下，来了解 Java 的这个特点，故记录于此。</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>序列化（Serializable）</strong>是指把 Java 对象字节序列的过程，就是说将原本保存在<strong>内存</strong>中的对象，保存到<strong>硬盘（或数据库等）</strong>中。当需要使用时，再<strong>反序列化</strong>恢复到内存中使用。在我查到的资料中，通过网络传递对象或是RMI（Remote Method Invocation远程方法调用）都会用到对象序列化。transient 译为短暂的，在这里即不被持久化。有一些敏感数据是不适合被传输，因此需要加上 <code>transient</code> 关键字，即可避免序列化。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>实体类：Account.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">// 参与序列化只需要实现 Serializable 接口即可</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">	<span class="comment">// Java 的序列化机制通过判断以下 ID 来进行版本比对，本处使用默认</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Long accountId;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="comment">// transient 修饰：</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">double</span> balance;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVar;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Long accountId, String username, String password, <span class="keyword">double</span> balance)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.accountId = accountId;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">		<span class="keyword">this</span>.balance = balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Account [accountId="</span> + accountId + <span class="string">", username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", balance="</span></div><div class="line">				+ balance + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：TestTransient.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 此处需要改为你要存入的地址，注意 Win 下地址中的 \ 需要转义</span></div><div class="line">		String src = <span class="string">"/Users/kingcos/Desktop/demo.object"</span>;</div><div class="line">		Account kingcos = <span class="keyword">new</span> Account(<span class="number">62278888L</span>, <span class="string">"kingcos"</span>, <span class="string">"123456"</span>, <span class="number">1000.0</span>);</div><div class="line">		Account.staticVar = <span class="number">11</span>;</div><div class="line">		System.out.println(<span class="string">"序列化之前："</span>);</div><div class="line">		System.out.println(kingcos);</div><div class="line">		System.out.println(<span class="string">"staticVar = "</span> + Account.staticVar);</div><div class="line">		</div><div class="line">		write(kingcos, src);</div><div class="line">		Account.staticVar = <span class="number">22</span>;</div><div class="line">		Account newKingcos = read(src);</div><div class="line">		System.out.println(<span class="string">"序列化之后："</span>);</div><div class="line">		System.out.println(newKingcos);</div><div class="line">		System.out.println(<span class="string">"staticVar = "</span> + Account.staticVar);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Account acc, String src)</span> </span>&#123;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line">		ObjectOutputStream oos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			os = <span class="keyword">new</span> FileOutputStream(src);</div><div class="line">			oos = <span class="keyword">new</span> ObjectOutputStream(os);</div><div class="line">			<span class="comment">// 写入</span></div><div class="line">			oos.writeObject(acc);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				oos.flush();</div><div class="line">				oos.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> Account <span class="title">read</span><span class="params">(String src)</span> </span>&#123;</div><div class="line">		Account acc = <span class="keyword">null</span>;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		ObjectInputStream ois = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			is = <span class="keyword">new</span> FileInputStream(src);</div><div class="line">			ois = <span class="keyword">new</span> ObjectInputStream(is);</div><div class="line">			<span class="comment">// 读取</span></div><div class="line">			acc = (Account) ois.readObject();</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				ois.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> acc;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// 序列化之前：</span></div><div class="line"><span class="comment">// Account [accountId=62278888, username=kingcos, password=123456, balance=1000.0]</span></div><div class="line"><span class="comment">// staticVar = 11</span></div><div class="line"><span class="comment">// 序列化之后：</span></div><div class="line"><span class="comment">// Account [accountId=62278888, username=kingcos, password=null, balance=0.0]</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>序列化</p>
<ul>
<li>序列化前后的对象内容一样，地址不同，属于<strong>深拷贝</strong>（deep copy）</li>
</ul>
<p>serialVersionUID</p>
<ul>
<li>序列化时系统会把当前类的 serialVersionUID 写入序列化的文件中（也可能是其他的中介），当反序列化的时候系统会去检测文件中的 serialVersionUID，看它是否和当前类的 serialVersionUID 一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化，否则就说明当前类和序列化的类相比发生了某些变化</li>
<li>Eclipse 可以根据类名，接口名，方法和属性等来生成一个 64 位的哈希字段，也可添加默认的 1L</li>
<li>当序列化后，对对象进行修改，再进行反序列化所出现的情形，可以查看参考资料中的讲解</li>
</ul>
<p>静态变量</p>
<ul>
<li>静态变量是相对于类的，而非对象，因此其也无法参与到序列化中。上面的 Demo 中，我们在写入对象后对静态变量进行修改。而再次读取对象时，该变量的值为我们所修改过的。即序列化会忽略静态变量</li>
</ul>
<p>其它</p>
<ul>
<li>当一个父类实现序列化，子类自动实现序列化，不需要显式实现 Serializable 接口</li>
<li>仅实现 Serializable 接口而无其它处理，即为默认序列化机制。在此机制下序列化对象时，不仅会序列化其本身，也会对该其引用的其它对象也进行序列化，同样，这些其它对象引用的另外对象也将被序列化，以此类推。因此有时序列化开销可能较大</li>
<li>transient 关键字只能修饰属性（变量），不能修饰方法和类</li>
<li>属性如果也是对象，则该对象对应的类需要实现 Serializable 接口</li>
</ul>
<h2 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h2><blockquote>
<p>Externalizable<br>Externalizable 接口内部实现了 Serializable 接口，但是为其扩展了两个方法，<code>writerExternal()</code> 方法在<strong>序列化</strong>时被自动调用，可以在其中控制序列化内容，<code>readExternal()</code> 方法在<strong>反序列化</strong>时被自动调用，可以在其中控制反序列化的内容。如果留空，（反）序列化行为将不会保存或读取任何一个字段，所以 transient 关键字也失效。因此我们可以对（反）序列化进行控制，详见下面的 Demo。<br>注意：<br>使用 Externalizable 进行序列化时，当读取对象时，会调用被序列化类的<strong>无参构造方法</strong>去创建一个新的对象，然后再将被保存对象的字段的值分别填充到新对象中。因此，实现 Externalizable 接口的类必须要提供一个无参的构造器，且它的访问权限为 public。</p>
</blockquote>
<h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h2><p>该 Demo 基于上处改编</p>
<p>实体类：Account.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Externalizable;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInput;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutput;</div><div class="line"></div><div class="line"><span class="comment">// Externalizable 接口内部也实现了 Serializable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</div><div class="line">	<span class="comment">// Java 的序列化机制通过判断以下 ID 来进行版本比对，本处使用默认</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Long accountId;</div><div class="line">	<span class="keyword">private</span> String username;</div><div class="line">	<span class="comment">// transient 修饰：</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> String password;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">double</span> balance;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVar;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		System.out.println(<span class="string">"调用了 无参构造方法"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Long accountId, String username, String password, <span class="keyword">double</span> balance)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.accountId = accountId;</div><div class="line">		<span class="keyword">this</span>.username = username;</div><div class="line">		<span class="keyword">this</span>.password = password;</div><div class="line">		<span class="keyword">this</span>.balance = balance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Account [accountId="</span> + accountId + <span class="string">", username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", balance="</span></div><div class="line">				+ balance + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"调用 writeExternal"</span>);</div><div class="line">		out.writeLong(accountId);</div><div class="line">		out.writeObject(password);</div><div class="line">		out.writeDouble(balance);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"调用 readExternal"</span>);</div><div class="line">		accountId = in.readLong();</div><div class="line">		<span class="comment">// 对象类型需要强制类型转换</span></div><div class="line">		password = (String) in.readObject();</div><div class="line">		balance = in.readDouble();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：TextExternalizable.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextExternalizable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 此处需要改为你要存入的地址，注意 Win 下地址中的 \ 需要转义</span></div><div class="line">		String src = <span class="string">"/Users/kingcos/Desktop/demo.object"</span>;</div><div class="line">		Account kingcos = <span class="keyword">new</span> Account(<span class="number">62278888L</span>, <span class="string">"kingcos"</span>, <span class="string">"123456"</span>, <span class="number">1000.0</span>);</div><div class="line">		Account.staticVar = <span class="number">11</span>;</div><div class="line">		System.out.println(<span class="string">"序列化之前："</span>);</div><div class="line">		System.out.println(kingcos);</div><div class="line">		System.out.println(<span class="string">"staticVar = "</span> + Account.staticVar);</div><div class="line">		</div><div class="line">		write(kingcos, src);</div><div class="line">		Account.staticVar = <span class="number">22</span>;</div><div class="line">		Account newKingcos = read(src);</div><div class="line">		System.out.println(<span class="string">"序列化之后："</span>);</div><div class="line">		System.out.println(newKingcos);</div><div class="line">		System.out.println(<span class="string">"staticVar = "</span> + Account.staticVar);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Account acc, String src)</span> </span>&#123;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line">		ObjectOutputStream oos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			os = <span class="keyword">new</span> FileOutputStream(src);</div><div class="line">			oos = <span class="keyword">new</span> ObjectOutputStream(os);</div><div class="line">			<span class="comment">// 写入</span></div><div class="line">			oos.writeObject(acc);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				oos.flush();</div><div class="line">				oos.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> Account <span class="title">read</span><span class="params">(String src)</span> </span>&#123;</div><div class="line">		Account acc = <span class="keyword">null</span>;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		ObjectInputStream ois = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			is = <span class="keyword">new</span> FileInputStream(src);</div><div class="line">			ois = <span class="keyword">new</span> ObjectInputStream(is);</div><div class="line">			<span class="comment">// 读取</span></div><div class="line">			acc = (Account) ois.readObject();</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				ois.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> acc;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// 序列化之前：</span></div><div class="line"><span class="comment">// Account [accountId=62278888, username=kingcos, password=123456, balance=1000.0]</span></div><div class="line"><span class="comment">// staticVar = 11</span></div><div class="line"><span class="comment">// 调用 writeExternal</span></div><div class="line"><span class="comment">// 调用了 无参构造方法</span></div><div class="line"><span class="comment">// 调用 readExternal</span></div><div class="line"><span class="comment">// 序列化之后：</span></div><div class="line"><span class="comment">// Account [accountId=62278888, username=null, password=123456, balance=1000.0]</span></div><div class="line"><span class="comment">// staticVar = 22</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/lanxuezaipiao/p/3369962.html" target="_blank" rel="external">Java transient 关键字使用小记</a></li>
<li><a href="http://swiftlet.net/archives/1268" target="_blank" rel="external">serialVersionUID 作用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;目前个人对 Java 的理解应用仅限于皮毛，&lt;br&gt;故若有不妥，会及时修正。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Java 与 Oracle 中的日期与时间类型</title>
    <link href="https://maimieng.com/2016/13/"/>
    <id>https://maimieng.com/2016/13/</id>
    <published>2016-07-15T16:00:00.000Z</published>
    <updated>2016-07-17T13:10:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>目前个人对 Java 的理解应用仅限于皮毛，<br>故若有不妥，会及时修正。<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>JDK 1.8</li>
<li>Eclipse EE neon</li>
<li>Oracle 10g XE</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暑假学校培训，因此整理一下之前在学习过程中比较困惑的地方。方便未来查阅，也使自己能够更深入了解 Java。这次来说一说日期与时间，因为数据库和 Java 本身都有许多存储日期或时间的类型，那么如何选择合适的类型，并正确的存入以及读取便很重要。网上的资料也有些参差不齐，因此我个人整理于此，并附上可以实际运行的代码。</p>
<h2 id="Java-中的日期与时间类型简介"><a href="#Java-中的日期与时间类型简介" class="headerlink" title="Java 中的日期与时间类型简介"></a>Java 中的日期与时间类型简介</h2><h3 id="子父类关系"><a href="#子父类关系" class="headerlink" title="子父类关系"></a>子父类关系</h3><table>
<thead>
<tr>
<th>java.lang.Object</th>
<th>java.lang.Object</th>
<th>java.lang.Object</th>
</tr>
</thead>
<tbody>
<tr>
<td>java.util.Date</td>
<td>java.util.Date</td>
<td>java.util.Date</td>
</tr>
<tr>
<td>-</td>
<td>java.sql.Timestamp</td>
<td>java.sql.Date</td>
</tr>
</tbody>
</table>
<h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><table>
<thead>
<tr>
<th>类型</th>
<th><code>java.util.Date</code></th>
<th><code>java.sql.Timestamp</code></th>
<th><code>java.sql.Date</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>精度</strong></td>
<td><strong>年 月 日 时 分 秒</strong></td>
<td><strong>年 月 日 时 分 秒 毫微秒</strong></td>
<td><strong>年 月 日</strong></td>
</tr>
</tbody>
</table>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInitTime</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		java.util.Date utilDate_1 = <span class="keyword">new</span> java.util.Date();</div><div class="line">		java.util.Date utilDate_2 = <span class="keyword">new</span> java.util.Date(System.currentTimeMillis());</div><div class="line">		java.sql.Timestamp sqlTimestamp = <span class="keyword">new</span> java.sql.Timestamp(System.currentTimeMillis());</div><div class="line">		java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(System.currentTimeMillis());</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"utilDate_1 =\t"</span> + utilDate_1);</div><div class="line">		System.out.println(<span class="string">"utilDate_2 =\t"</span> + utilDate_2);</div><div class="line">		System.out.println(<span class="string">"sqlTimestamp =\t"</span> + sqlTimestamp);</div><div class="line">		System.out.println(<span class="string">"sqlDate =\t"</span> + sqlDate);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// utilDate_1 = Sun Jul 17 09:26:07 CST 2016</span></div><div class="line"><span class="comment">// utilDate_2 = Sun Jul 17 09:26:07 CST 2016</span></div><div class="line"><span class="comment">// sqlTimestamp = 2016-07-17 09:26:07.342</span></div><div class="line"><span class="comment">// sqlDate = 2016-07-17</span></div></pre></td></tr></table></figure>
<p>上述的初始化均使用了各自<strong>未过时</strong>的构造函数，输出打印后，可以看到明显的精度区别。</p>
<blockquote>
<p>PS<br><code>System.currentTimeMillis()</code>: 返回以毫秒为单位的当前时间。<br><code>CST</code> 代表 China Standard Time（中国标准时间，即东八区，北京时间）</p>
</blockquote>
<h2 id="多种日期类型转换"><a href="#多种日期类型转换" class="headerlink" title="多种日期类型转换"></a>多种日期类型转换</h2><p><code>String</code> -&gt; 时间</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformDateOrTime</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String date = <span class="string">"2016-7-17 14:30:05"</span>;</div><div class="line">		DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		java.util.Date utilDate = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			utilDate = dateFormat.parse(date);</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"utilDate: "</span> + utilDate);</div><div class="line"></div><div class="line">		java.sql.Timestamp sqlTimestamp = java.sql.Timestamp.valueOf(<span class="string">"2016-7-17 14:30:05"</span>);</div><div class="line">		java.sql.Date sqlDate = java.sql.Date.valueOf(<span class="string">"2016-7-17"</span>);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"sqlTimestamp: "</span> + sqlTimestamp);</div><div class="line">		System.out.println(<span class="string">"sqlDate: "</span> + sqlDate);	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// utilDate: Sun Jul 17 14:30:05 CST 2016</span></div><div class="line"><span class="comment">// sqlTimestamp: 2016-07-17 14:30:05.0</span></div><div class="line"><span class="comment">// sqlDate: 2016-07-17</span></div></pre></td></tr></table></figure>
<p><code>java.util.Date</code> 与 <code>java.sql.Timestamp</code></p>
<p><strong><code>getTime()</code>: 返回调用对象表示的自 1970 年 1 月 1 日 00:00:00 GMT 以来的毫秒数。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Date -&gt; java.sql.Timestamp</span></div><div class="line">java.util.Date utilDate_1 = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	utilDate_1 = dateFormat.parse(date);</div><div class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line">java.sql.Timestamp sqlTimestamp_1 = <span class="keyword">new</span> java.sql.Timestamp(utilDate_1.getTime());</div><div class="line">System.out.println(utilDate_1 + <span class="string">" 转换为 "</span> + sqlTimestamp_1);</div><div class="line">				</div><div class="line"><span class="comment">// java.util.Date &lt;- java.sql.Timestamp （精度丢失）</span></div><div class="line">java.sql.Timestamp sqlTimestamp_2 = <span class="keyword">new</span> java.sql.Timestamp(System.currentTimeMillis());</div><div class="line">java.util.Date utilDate_2 = <span class="keyword">new</span> java.util.Date(sqlTimestamp_2.getTime());</div><div class="line">System.out.println(sqlTimestamp_2 + <span class="string">" 转换为 "</span> + utilDate_2);</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// Sun Jul 17 14:30:05 CST 2016 转换为 2016-07-17 14:30:05.0</span></div><div class="line"><span class="comment">// 2016-07-17 10:09:38.736 转换为 Sun Jul 17 10:09:38 CST 2016</span></div></pre></td></tr></table></figure>
<p><code>java.util.Date</code> 与 <code>java.sql.Date</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.Date -&gt; java.sql.Date</span></div><div class="line">java.sql.Date sqlDate_1 = <span class="keyword">new</span> java.sql.Date(utilDate_1.getTime());</div><div class="line">System.out.println(utilDate_1 + <span class="string">" 转换为 "</span> + sqlDate_1);</div><div class="line">		</div><div class="line"><span class="comment">// java.util.Date &lt;- java.sql.Date</span></div><div class="line">java.sql.Date sqlDate_2 = <span class="keyword">new</span> java.sql.Date(System.currentTimeMillis());</div><div class="line">java.util.Date utilDate_3 = <span class="keyword">new</span> java.util.Date(sqlDate_2.getTime());</div><div class="line">System.out.println(sqlDate_2 + <span class="string">" 转换为 "</span> + utilDate_3);</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// Sun Jul 17 14:30:05 CST 2016 转换为 2016-07-17</span></div><div class="line"><span class="comment">// 2016-07-17 转换为 Sun Jul 17 11:14:15 CST 2016</span></div></pre></td></tr></table></figure>
<h2 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h2><p>在上面最后由 <code>java.sql.Date</code> 转换为 <code>java.util.Date</code> 中，虽然我们之前查到 <code>java.sql.Date</code> 只能保存年月日，但是这里却可以转换为<strong>带有时分秒</strong>的 <code>java.util.Date</code>。而 <code>java.sql.Date</code> 中的 <code>getHours()</code>，<code>getMinutes()</code>，<code>getSeconds()</code>（也包括对应的 setter）方法均已过时，如果调用会有 <code>java.lang.IllegalArgumentException</code> 异常。所以 <code>java.sql.Date</code> 只是屏蔽了时间中的时分秒，为了和数据库中的 <code>DATE</code> 类型匹配，查看其源代码就可以得知，<code>java.sql.Date</code> 继承但没有重写 <code>getTime()</code> 方法，而本身的 <code>public Date(long date)</code> 构造方法也是调用了父类的构造方法。</p>
<p>而与此不同的是 <code>java.sql.Timestamp</code>，其对父类做了扩充，通过查看其源代码，我们可以发现，其 <code>getTime()</code> 中增加了纳秒（1s = 1E9nanos），而且单独增加了 <code>getNanos()</code> 方法。</p>
<p>因此 <code>java.sql.Date</code> 只是屏蔽年月日，而不是移除，而 <code>java.sql.Timestamp</code> 对父类进行了扩充。在下面的 Demo 中，会实际操作数据库，这样一存一取就可以将其特点展现。</p>
<p>在这里以 Oracle 数据库为例，Oracle 中有两种主要日期与时间类型，<code>DATE</code> 以及 <code>TIMESTAMP</code>。</p>
<p><code>DATE</code>: 仅存 <strong>年 月 日</strong><br><code>TIMESTAMP</code>: 保存 <strong>年 月 日 时 分 秒 纳秒</strong></p>
<p>所以对应 Java 中，我们就应该在保存<strong>合适精度</strong>的时间下，选择合适的类型。Java 中的 <code>java.util.Date</code> 更为灵活，我们可以在恰当的时候将其转为合适的类型存入数据库，或者在取出时转为该类型。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>SQL</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 建表</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> T_TIME;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T_TIME (</div><div class="line">    <span class="keyword">ID</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>,<span class="number">0</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">    date_1 <span class="built_in">DATE</span>, </div><div class="line">    timestamp_1 <span class="keyword">TIMESTAMP</span>, </div><div class="line">    date_2 <span class="built_in">DATE</span>, </div><div class="line">    timestamp_2 <span class="keyword">TIMESTAMP</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- 创建自增序列</span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> time_id;</div><div class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> time_id</div><div class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>  </div><div class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span> </div><div class="line"><span class="keyword">nomaxvalue</span> </div><div class="line"><span class="keyword">nominvalue</span> </div><div class="line">nocache</div></pre></td></tr></table></figure>
<p>实体类：TimeEntity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeEntity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> java.util.Date date_1;</div><div class="line">	<span class="keyword">private</span> java.sql.Date date_2;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> java.util.Date timestamp_1;</div><div class="line">	<span class="keyword">private</span> java.sql.Timestamp timestamp_2;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> id;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.id = id;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> java.util.<span class="function">Date <span class="title">getDate_1</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> date_1;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate_1</span><span class="params">(java.util.Date date_1)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.date_1 = date_1;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> java.sql.<span class="function">Date <span class="title">getDate_2</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> date_2;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate_2</span><span class="params">(java.sql.Date date_2)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.date_2 = date_2;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> java.util.<span class="function">Date <span class="title">getTimestamp_1</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> timestamp_1;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp_1</span><span class="params">(java.util.Date timestamp_1)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.timestamp_1 = timestamp_1;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> java.sql.<span class="function">Timestamp <span class="title">getTimestamp_2</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> timestamp_2;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp_2</span><span class="params">(java.sql.Timestamp timestamp_2)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.timestamp_2 = timestamp_2;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"TimeEntity [id="</span> + id + <span class="string">", date_1="</span> + date_1 + <span class="string">", date_2="</span> + date_2 + <span class="string">", timestamp_1="</span> + timestamp_1</div><div class="line">				+ <span class="string">", timestamp_2="</span> + timestamp_2 + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：TestTimeDateType.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimeDateType</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// url 中的地址要替换为自己数据的地址</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:XE"</span>;</div><div class="line">		<span class="comment">// 数据库用户名及密码需要设置为自己的</span></div><div class="line">		String user = <span class="string">"demo"</span>;</div><div class="line">		String password = <span class="string">"123456"</span>;</div><div class="line">		Connection connection = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			connection = DriverManager.getConnection(url, user, password);</div><div class="line">			String sql = <span class="string">"insert into t_time values (time_id.nextVal, ?, ?, ?, ?)"</span>;</div><div class="line">			ps = connection.prepareStatement(sql);</div><div class="line">			</div><div class="line">			ps = setAll(ps);</div><div class="line">			</div><div class="line">			ps.executeUpdate();</div><div class="line">			</div><div class="line">			<span class="comment">// 这里我们只运行一次，为方便起见，因此仅查询 id 为 1 的记录</span></div><div class="line">			sql = <span class="string">"select * from t_time where id = 1"</span>;</div><div class="line">			ps = connection.prepareStatement(sql);</div><div class="line">			TimeEntity te = <span class="keyword">new</span> TimeEntity();</div><div class="line">			rs = ps.executeQuery();</div><div class="line">			<span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">				te.setId(rs.getInt(<span class="number">1</span>));</div><div class="line">				te.setDate_1(rs.getDate(<span class="number">2</span>));</div><div class="line">				te.setTimestamp_1(rs.getTimestamp(<span class="number">3</span>));</div><div class="line">				</div><div class="line">				te.setDate_2(rs.getDate(<span class="number">4</span>));</div><div class="line">				te.setTimestamp_2(rs.getTimestamp(<span class="number">5</span>));</div><div class="line">			&#125;</div><div class="line">			System.out.println(te);</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				rs.close();</div><div class="line">				ps.close();</div><div class="line">				connection.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> PreparedStatement <span class="title">setAll</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		ps.setDate(<span class="number">1</span>, returnSqlDateWithSqlDate());</div><div class="line">		ps.setTimestamp(<span class="number">2</span>, returnTimestampWithTimestamp());</div><div class="line">		ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> java.sql.Date(returnSqlDateWithUtilDate().getTime()));</div><div class="line">		ps.setTimestamp(<span class="number">4</span>,<span class="keyword">new</span> java.sql.Timestamp(returnTimestampWithUtilDate().getTime()));</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> ps;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> java.sql.<span class="function">Date <span class="title">returnSqlDateWithSqlDate</span><span class="params">()</span> </span>&#123;</div><div class="line">		java.sql.Date sqlDate = java.sql.Date.valueOf(<span class="string">"2012-2-2"</span>);</div><div class="line">		<span class="keyword">return</span> sqlDate;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> java.sql.<span class="function">Timestamp <span class="title">returnTimestampWithTimestamp</span><span class="params">()</span> </span>&#123;</div><div class="line">		java.sql.Timestamp timestamp = java.sql.Timestamp.valueOf(<span class="string">"2015-5-5 5:55:55.555"</span>);</div><div class="line">		<span class="keyword">return</span> timestamp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> java.util.<span class="function">Date <span class="title">returnSqlDateWithUtilDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String date = <span class="string">"2013-3-3 3:33:33"</span>;</div><div class="line">		DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		java.util.Date utilDate = dateFormat.parse(date);</div><div class="line">		<span class="keyword">return</span> utilDate;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> java.util.<span class="function">Date <span class="title">returnTimestampWithUtilDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String date = <span class="string">"2016-6-6 6:6:6"</span>;</div><div class="line">		DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		java.util.Date utilDate = dateFormat.parse(date);</div><div class="line">		<span class="keyword">return</span> utilDate;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="comment">// TimeEntity [id=1, date_1=2012-02-02, date_2=2013-03-03, timestamp_1=2015-05-05 05:55:55.555, timestamp_2=2016-06-06 06:06:06.0]</span></div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从上面实例中，就可以基本清楚这几个类型的差别，以及其中的转换，因此在实际使用中便可以通过需要的不同精度，来确定所选的类型即可。</p>
<h2 id="java-util-Date-与-Calendar"><a href="#java-util-Date-与-Calendar" class="headerlink" title="java.util.Date 与 Calendar"></a>java.util.Date 与 Calendar</h2><p>在 <code>java.util.Date</code> 中有许多过时方法，查看其注释，有许多都被 <code>Calendar</code> 所代替。由于在现实中，<code>java.util.Date</code> 不再能胜任国际化的操作，因此建议使用 <code>Calendar</code> 进行日期与时间处理。由于 <code>Calendar</code> 类是抽象类，且 <code>Calendar</code> 类的构造方法是 <code>protected</code> 的，所以无法使用Calendar类的构造方法来创建对象，但提供了 <code>getInstance()</code> 静态方法来创建对象。</p>
<h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>测试类：TestCalendar.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalendar</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// Calendar 转化为 Date</span></div><div class="line">		Calendar calendar_1 = Calendar.getInstance();</div><div class="line">		System.out.println(calendar_1.getTimeInMillis());</div><div class="line">		Date date_1 = calendar_1.getTime();</div><div class="line">		System.out.println(<span class="string">"Calendar -&gt; Date"</span> + date_1);</div><div class="line">		</div><div class="line">		<span class="comment">// Date 转化为 Calendar</span></div><div class="line">		Date date_2 = <span class="keyword">new</span> Date();</div><div class="line">		Calendar calendar_2 = Calendar.getInstance();</div><div class="line">		calendar_2.setTime(date_2);</div><div class="line">		System.out.println(<span class="string">"Date -&gt; Calendar "</span> + calendar_2);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Console:</span></div><div class="line"><span class="number">1468741779943</span></div><div class="line">Calendar -&gt; DateSun Jul <span class="number">17</span> <span class="number">15</span>:<span class="number">49</span>:<span class="number">39</span> CST <span class="number">2016</span></div><div class="line">Date -&gt; Calendar java.util.GregorianCalendar[time=<span class="number">1468741779978</span>,areFieldsSet=<span class="keyword">true</span>,areAllFieldsSet=<span class="keyword">true</span>,lenient=<span class="keyword">true</span>,zone=sun.util.calendar.ZoneInfo[id=<span class="string">"Asia/Shanghai"</span>,offset=<span class="number">28800000</span>,dstSavings=<span class="number">0</span>,useDaylight=<span class="keyword">false</span>,transitions=<span class="number">19</span>,lastRule=<span class="keyword">null</span>],firstDayOfWeek=<span class="number">1</span>,minimalDaysInFirstWeek=<span class="number">1</span>,ERA=<span class="number">1</span>,YEAR=<span class="number">2016</span>,MONTH=<span class="number">6</span>,WEEK_OF_YEAR=<span class="number">30</span>,WEEK_OF_MONTH=<span class="number">4</span>,DAY_OF_MONTH=<span class="number">17</span>,DAY_OF_YEAR=<span class="number">199</span>,DAY_OF_WEEK=<span class="number">1</span>,DAY_OF_WEEK_IN_MONTH=<span class="number">3</span>,AM_PM=<span class="number">1</span>,HOUR=<span class="number">3</span>,HOUR_OF_DAY=<span class="number">15</span>,MINUTE=<span class="number">49</span>,SECOND=<span class="number">39</span>,MILLISECOND=<span class="number">978</span>,ZONE_OFFSET=<span class="number">28800000</span>,DST_OFFSET=<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="external">JavaSE 8 API 说明（Oracle 官方英文版）</a></li>
<li><a href="http://swiftlet.net/archives/754" target="_blank" rel="external">java.util.Date、java.sql.Date、java.sql.Time、java.sql.Timestamp 区别和联系</a></li>
<li><a href="http://swiftlet.net/archives/1284" target="_blank" rel="external">Calender 的使用详解</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;目前个人对 Java 的理解应用仅限于皮毛，&lt;br&gt;故若有不妥，会及时修正。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
      <category term="Oracle" scheme="https://maimieng.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>电池过放修复 Tips</title>
    <link href="https://maimieng.com/2016/12/"/>
    <id>https://maimieng.com/2016/12/</id>
    <published>2016-07-02T16:00:00.000Z</published>
    <updated>2016-07-02T17:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>平板只有两种，iPad 和其他<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>WT8</li>
<li>数据线</li>
<li>电源</li>
</ul>
</li>
</ul>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间为了方便看视频，买了一个平板 TOSHIBA WT8。性能一般，但也足够用了。内存 2G，硬盘 32G，加上内存卡，去掉系统及软件，也就 20G 左右，捉襟见肘。</p>
<p>六级前下载了很多视频，天天带着看，天天都充电。考完六级就期末了，开始准备期末考试了，所以就没有再管过平板，一直放在书架上。偶尔还会充充电，但是这次不知怎么回事，充电闪屏，不充电又按电源键没反应，查了一番才知道电池过放这个概念。不过，按理说，很多新的电池加入了这道保护措施，但很明显，这个平板不支持。再搜一番，只得拆机。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>其他品牌可参照，拆机前务必搜索拆机视频或拆机图再下手，以免出现不良后果</p>
<ol>
<li>将平板后盖拆开（WT8 只需要从边缘打开，用硬卡片划开）</li>
<li>将电池排线取下（小心谨慎）</li>
<li>明确电池排线正负极</li>
<li>将数据线的 Micro USB 头拆掉，将<strong>红色（+）</strong>和<strong>黑色（-）</strong>里的铜线露出</li>
<li>将数据线<strong>红色正极</strong>与机器电池<strong>正极</strong>相接触</li>
<li>将数据线<strong>黑色负极</strong>与机器电池<strong>负极</strong>相接触</li>
<li>将数据线插入 5V USB 接口</li>
<li>接触时间 1 秒即可</li>
<li>组装回去</li>
<li>测试是否能充电</li>
<li>装回去</li>
</ol>
<blockquote>
<p>可能的原因：</p>
<p>带保护的锂电过放时，保护电路会自动断开，用高电压充一下可使保护电路重新接通</p>
</blockquote>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>好的产品应当是为人服务的，不应当是折腾的。初中，高中时候折腾 iPhone 越狱美化，Android 刷机，现在只想老老实实一部手机稳定的用下去。也许是折腾累了，不过这些设备终究是为我们所服务的。如果太过折腾，那便是玩具。</p>
<p>所以，我还是想把这个平板出了，也许未来还是会购置 iPad mini 2/4 吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;平板只有两种，iPad 和其他&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="https://maimieng.com/tags/Tips/"/>
    
      <category term="Hardware" scheme="https://maimieng.com/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>那一年...高考</title>
    <link href="https://maimieng.com/2016/11/"/>
    <id>https://maimieng.com/2016/11/</id>
    <published>2016-06-24T16:00:00.000Z</published>
    <updated>2016-06-24T16:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Is this my destiny?<br></blockquote><br><a id="more"></a><br>今天可以查高考分数了，又是一个几家欢喜几家愁的日子。</p>
<p>两年前的今天，我查了自己分数，476，刚刚好二本线。可以说是一个相当差的成绩，当时想，不论怎样，我都不会去复读，因为浪费了一年时间。而现在想想，如果当时浪费一年，也许就不会在这里浪费四年。</p>
<p>然而选择早已做出，在这里再后悔也没有什么用，只有继续前行，才能尽量靠近当初的梦。也许进不了一所好的院校让我的一生失去很多机会，但是谁又知道会是什么样呢？</p>
<p>但愿，未来我还能坚持自己，坚持自己的方向。</p>
<p>晚安。</p>
<p>2016.6.25 凌晨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Is this my destiny?&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://maimieng.com/tags/Life/"/>
    
      <category term="Essay" scheme="https://maimieng.com/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>全站 HTTPS 已开启</title>
    <link href="https://maimieng.com/2016/10/"/>
    <id>https://maimieng.com/2016/10/</id>
    <published>2016-05-28T16:00:00.000Z</published>
    <updated>2016-05-29T15:50:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>HTTPS<br></blockquote><br><a id="more"></a><br>改了图床，改了好多配置，终于上 HTTPS 了。<br>不过好像学校的校园网访问不大好了＝＝<br>无所谓了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;HTTPS&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://maimieng.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://maimieng.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 项目目录翻译</title>
    <link href="https://maimieng.com/2016/9/"/>
    <id>https://maimieng.com/2016/9/</id>
    <published>2016-05-20T16:00:00.000Z</published>
    <updated>2016-05-29T15:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>翻译是为了更好地理解。<br></blockquote><br><a id="more"></a><br>Info:</p>
<ul>
<li>Android Studio 2.1.1</li>
<li>Mac OS 10.11.5</li>
</ul>
<p><strong>Activities</strong></p>
<blockquote>
<p>An activity is one of the distinguishing features of the Android framework. Activities provide the user with access to your app, and there may be many activities. An application will usually have a main activity for when the user launches the application, another activity for when she selects some content to view, for example, and other activities for when she performs other tasks within the app. See <a href="https://developer.android.com/guide/components/activities.html" target="_blank" rel="external">Activities</a> for more information.</p>
</blockquote>
<p>Activity 是 Android 框架的特色之一。<br>Activity 向用户提供了访问应用的入口，并且（一个应用）可能拥有多个 Activity。<br>当用户打开应用，通常有一个主 Activity，当用户选择一些内容到视图将会有另外的 Activity，举个例子，当用户在应用中执行其他任务，其他 Activity 将会被加载。<br><a href="https://developer.android.com/guide/components/activities.html" target="_blank" rel="external">点此查看更多关于 Activity 的信息</a>。</p>
<p>在翻译之前，我们先建立一个项目，以下翻译以此为基准</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/11/1.png" alt="2016/11/1"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/11/2.png" alt="2016/11/2"></p>
<h3 id="app-src-main-res-layout-activity-main-xml"><a href="#app-src-main-res-layout-activity-main-xml" class="headerlink" title="app/src/main/res/layout/activity_main.xml"></a><strong><code>app/src/main/res/layout/activity_main.xml</code></strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.maimieng.myapplication.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This XML layout file is for the activity you added when you created the project with Android Studio. Following the New Project workflow, Android Studio presents this file with both a text view and a preview of the screen UI. The file contains some default interface elements from the material design library, including the <a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="external">app bar</a> and a floating action button. It also includes a separate layout file with the main content.</p>
</blockquote>
<p>当使用 Android Studio 创建项目，该 XML 布局文件即代表添加的 Activity。<br>随着新建项目的流程进行，AS 通过一个文本视图和屏幕 UI 的预览来渲染此文件。<br>该文件包含一些 Material Design 库中默认的界面元素，包括<a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="external">应用条</a>和一个浮动的按钮。<br>同样也包含一个含有主内容的单独的布局文件。</p>
<h3 id="app-src-main-res-layout-content-main-xml"><a href="#app-src-main-res-layout-content-main-xml" class="headerlink" title="app/src/main/res/layout/content_main.xml"></a><code>app/src/main/res/layout/content_main.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 该文件貌似已在最新的 AS 中默认不存在 --&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>This XML layout file resides in <code>activity_main.xml</code>, and contains some settings and a TextView element that displays the message, “Hello world!”.</p>
</blockquote>
<p>该 XML 布局文件隶属于 <code>activity_main.xml</code>，并包含一些设置和一个显示 “Hello world!” 信息的 TextView （文本视图）元素。</p>
<h3 id="app-src-main-java-com-maimieng-myapplication-MainActivity-java"><a href="#app-src-main-java-com-maimieng-myapplication-MainActivity-java" class="headerlink" title="app/src/main/java/com.maimieng.myapplication/MainActivity.java"></a><strong><code>app/src/main/java/com.maimieng.myapplication/MainActivity.java</code></strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maimieng.myapplication;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>A tab for this file appears in Android Studio when the New Project workflow finishes. When you select the file you see the class definition for the activity you created. When you build and run the app, the <a href="https://developer.android.com/reference/android/app/Activity.html" target="_blank" rel="external">Activity</a> class starts the activity and loads the layout file that says “Hello World!”</p>
</blockquote>
<p>当新建项目的流程完成，AS 将会显示该文件的标签页。<br>当你选中该文件，将看到你所创建的 Activity 的类定义。<br>当你构建并运行应用，Activity 类启动 <a href="https://developer.android.com/reference/android/app/Activity.html" target="_blank" rel="external">Activity</a> 并载入布局文件，显示 “Hello World!”。</p>
<h3 id="app-src-main-AndroidManifest-xml"><a href="#app-src-main-AndroidManifest-xml" class="headerlink" title="app/src/main/AndroidManifest.xml"></a><strong><code>app/src/main/AndroidManifest.xml</code></strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.maimieng.myapplication"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The <a href="https://developer.android.com/guide/topics/manifest/manifest-intro.html" target="_blank" rel="external"><code>manifest file</code></a> describes the fundamental characteristics of the app and defines each of its components. You’ll revisit this file as you follow these lessons and add more components to your app.</p>
</blockquote>
<p>该清单文件描述了应用的基本特征并定义其中的各个组件。<br>当你按照本教程，将会再次访问该文件并向你的应用添加更多组件。</p>
<h3 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app/build.gradle"></a><strong><code>app/build.gradle</code></strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">apply plugin: 'com.android.application'</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion "23.0.3"</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId "com.maimieng.myapplication"</div><div class="line">        minSdkVersion 14</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName "1.0"</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class="line">    testCompile 'junit:junit:4.12'</div><div class="line">    compile 'com.android.support:appcompat-v7:23.4.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Android Studio uses Gradle to compile and build your app. There is a <code>build.gradle</code> file for each module of your project, as well as a <code>build.gradle</code> file for the entire project. Usually, you’re only interested in the       <code>build.gradle</code> file for the module, in this case the app or application module. This is where your app’s build dependencies are set, including the <code>defaultConfig</code> settings:</p>
</blockquote>
<p>AS 使用 Gradle 编译并构建应用。<br>项目的每一个模块将含有一个 <code>build.gradle</code> 文件，一整个项目对应一个 <code>build.gradle</code> 文件。<br>通常，你只需关注模块的  <code>build.gradle</code> 文件，即这种情况下的应用模块。<br>这是应用构建依赖所放置的地方，包括 <code>defaultConfig</code> 设置：</p>
<ul>
<li><code>compiledSdkVersion</code> is the platform version against which you will compile your app. By default, this is set to the latest version of Android available in your SDK. (It should be Android 4.1 or greater; if you don’t have such a version available, you must install one using the <a href="https://developer.android.com/studio/intro/update.html" target="_blank" rel="external">SDK Manager</a>.) You can still build your app to support older versions, but setting this to the latest version allows you to enable new features and optimize your app for a great user experience on the latest devices.</li>
<li><code>compiledSdkVersion</code> 是你将编译应用的平台版本。<br>默认情况下，其设置为你的 SDK 中可获得到的 Android 最高版本。<br>（其应该是 Android 4.1 或更高，如果你没有这样的版本，你必须使用 <a href="https://developer.android.com/studio/intro/update.html" target="_blank" rel="external">SDK 管理器</a>下载一个。）<br>你仍然可以构建支持较老版本的应用，但是设置此为最新版本将允许你开启新的特性并为持有最新设备的用户显著优化你的应用体验。</li>
<li><code>applicationId</code> is the fully qualified package name for your application that you specified during the New Project workflow.</li>
<li><code>applicationId</code> 是你的应用的完全限定包名，这在新建项目流程中由你指定。</li>
<li><code>minSdkVersion</code> is the Minimum SDK version you specified during the New Project workflow. This is the earliest version of the Android SDK that your app supports.</li>
<li><code>minSdkVersion</code> 是你在新建项目流程中指定的最低 SDK 版本。<br>这是应用支持最早的 Android SDK 版本。</li>
<li><code>targetSdkVersion</code> indicates the highest version of Android with which you have tested your application. As new versions of Android become available, you should test your app on the new version and update this value to match the latest API level and thereby take advantage of new platform features. For more information, read <a href="https://developer.android.com/training/basics/supporting-devices/platforms.html" target="_blank" rel="external">Supporting Different Platform Versions</a>.</li>
<li><code>targetSdkVersion</code> 暗示你已经测试过的应用的最高版本。<br>当新的 Android 版本可以获得，你应当在新版本测试你的应用，并更新其值，以匹配最新的 API 等级，并因此利用新平台的特性。<br>有关更多信息，查看 <a href="https://developer.android.com/training/basics/supporting-devices/platforms.html" target="_blank" rel="external">Supporting Different Platform Versions</a>。</li>
</ul>
<p>See <a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="external">Building Your Project with Gradle</a> for more information about Gradle.</p>
<p>查看 <a href="https://developer.android.com/studio/build/index.html" target="_blank" rel="external">Building Your Project with Gradle</a> 获得更多关于 Gradle 的信息。</p>
<p>Note also the <code>/res</code> subdirectories that contain the <a href="https://developer.android.com/guide/topics/resources/overview.html" target="_blank" rel="external">resources</a> for your application:</p>
<p>同样注意 <code>/res</code> 子目录其包含的<a href="https://developer.android.com/guide/topics/resources/overview.html" target="_blank" rel="external">应用资源</a>：</p>
<h3 id="drawable-lt-density-gt"><a href="#drawable-lt-density-gt" class="headerlink" title="drawable-&lt;density&gt;/"></a><strong><code>drawable-&lt;density&gt;/</code></strong></h3><p>Directories for <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html" target="_blank" rel="external">drawable resources</a>, other than launcher icons, designed for various <a href="https://developer.android.com/training/multiscreen/screendensities.html" target="_blank" rel="external">densities</a>.</p>
<p><a href="https://developer.android.com/guide/topics/resources/drawable-resource.html" target="_blank" rel="external">可绘制资源</a>目录，不同于启动图标，其为不同密度设计。</p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout/"></a><strong><code>layout/</code></strong></h3><p>Directory for files that define your app’s user interface like <code>activity_main.xml</code>, discussed above, which describes a basic layout for the <code>MainActivity</code> class.</p>
<p>定义应用用户界面的文件目录，例如 <code>activity_main.xml</code>，上面谈到过，其描述了 <code>MainActivity</code> 类的基本布局。</p>
<h3 id="menu"><a href="#menu" class="headerlink" title="menu/"></a><strong><code>menu/</code></strong></h3><p>Directory for files that define your app’s menu items.</p>
<p>定义应用菜单项的文件目录。</p>
<h3 id="mipmap"><a href="#mipmap" class="headerlink" title="mipmap/"></a><strong><code>mipmap/</code></strong></h3><p>Launcher icons reside in the <code>mipmap/</code> folder rather than the <code>drawable/</code> folders. This folder contains the <code>ic_launcher.png</code> image that appears when you run the default app.</p>
<p>启动图标隶属于 <code>mipmap/</code> 文件夹，而不是 <code>drawable/</code> 文件夹。<br>该文件夹包含当你运行默认应用的 <code>ic_launcher.png</code> 图片。</p>
<h3 id="values"><a href="#values" class="headerlink" title="values/"></a><strong><code>values/</code></strong></h3><p>Directory for other XML files that contain a collection of resources, such as string and color definitions.</p>
<p>包含资源集合的其他 XML 目录，例如字符串和颜色定义。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;翻译是为了更好地理解。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Translation" scheme="https://maimieng.com/tags/Translation/"/>
    
      <category term="Android" scheme="https://maimieng.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>博客取消文章分类</title>
    <link href="https://maimieng.com/2016/8/"/>
    <id>https://maimieng.com/2016/8/</id>
    <published>2016-05-16T16:00:00.000Z</published>
    <updated>2016-05-28T13:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>博客取消文章分类，但保留标签及归档<br></blockquote><br><a id="more"></a><br>有时候总是不知道一篇文章的具体分类，而且要加上文章标题的英文，会把博文的地址变得很长，十分不美观。而标签的不唯一性可以使我更好的选择。</p>
<p>可是这样又造成一个后果：<strong>所有评论将会丢失</strong>… 因为多说的评论是绑定文章的链接的，不过，过一段时间可能域名也会更换，加之本来评论就不多，所以感谢曾经评论的人。</p>
<p>因此，博客取消文章分类，但保留标签及归档，文章的链接为 <code>域名/年度/本年的第 n 篇博文</code>。</p>
<h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p><a href="http://maimieng.com/tags/"><strong>http://maimieng.com/tags/</strong></a></p>
<h2 id="归档页"><a href="#归档页" class="headerlink" title="归档页"></a>归档页</h2><p><a href="http://maimieng.com/archives/"><strong>http://maimieng.com/archives/</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;博客取消文章分类，但保留标签及归档&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="https://maimieng.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 4 Eclipse</title>
    <link href="https://maimieng.com/2016/7/"/>
    <id>https://maimieng.com/2016/7/</id>
    <published>2016-05-15T16:00:00.000Z</published>
    <updated>2016-05-29T15:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Git &amp; GitHub For Eclipse<br></blockquote><br><a id="more"></a></p>
<p><strong>Info:</strong></p>
<ul>
<li>Eclipse MARS.2 for Java EE</li>
<li>GitHub</li>
</ul>
<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>在多人协作如此重要的今天，Git 已经成为多数人协作开发，版本控制的第一选择。而 GitHub 作为可能是世界上最大的代码托管网站，很多人选择将项目开源于此，并与他人交流，甚至一起开发。</p>
<p>我在折腾<a href="http://maimieng.com/2016/7/"><strong>这次的作业</strong></a>中，也体会到，与其复制粘贴代码到博客，不如直接开源在 GitHub，顺便学习和巩固一下 Git。但是在折腾中，我发现网上关于新版本的 Eclipse 的 Git 教程十分少，因此将此次折腾的记录于此，防止自己忘记，也便于他人参考。</p>
<h3 id="Let’s-do-it"><a href="#Let’s-do-it" class="headerlink" title="Let’s do it!"></a>Let’s do it!</h3><h4 id="Say-something…"><a href="#Say-something…" class="headerlink" title="Say something…"></a>Say something…</h4><p>我使用的是 HTTPS 连接 GitHub，因为使用 SSH 不能计入 Contribution，不能满足一点点虚荣心… 而且步骤稍繁琐，因此本文只涉及 HTTPS 方式。</p>
<p>最新版本的 Eclipse 已经集成了 Egit，所以不需要再下载此插件，这也是很多其他老教程中不适用的一点。</p>
<p><strong>1. 项目右键－Team－Share Project…（以 bbs_by_mm 为例）</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/1.png" alt="2016/8/1"></p>
<p><strong>2. 单击 RePositry Create…，选择 Git 仓库的文件夹（以 Homework 为例）</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/2.png" alt="2016/8/2"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/3.png" alt="2016/8/3"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/4.png" alt="2016/8/4"></p>
<p>其实这个仓库文件夹名可以和 GitHub 仓库名不一致，因为我在 GitHub 的此仓库名为 CourseDesign</p>
<p><strong>3. （可选）单击 Path within repository Browse…－Finish</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/5.png" alt="2016/8/5"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/6.png" alt="2016/8/6"></p>
<p>因为一个仓库并不一定只放一个项目，像我这个仓库，需要放置在校期间的一些小项目，需要单独的文件夹归档，更加便于查找，因此设置了此子目录</p>
<p><strong>4. 项目右键－Team－Push Branch ‘master’－填写相应内容－next </strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/7.png" alt="2016/8/7"></p>
<p>URI 填写 GitHub 对应仓库的 HTTPS 地址</p>
<p>User 填写该仓库所有者的 GitHub 注册邮箱</p>
<p>密码为 GitHub 账户密码</p>
<p>Store in Secure Store 可选，如果以后也要使用，建议勾选免去每次输入账号密码的麻烦，但是如果是临时一用，建议不勾选，以防他人对你的项目做手脚</p>
<p><strong>5. 此页面保持不改动－next</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/8.png" alt="2016/8/8"></p>
<blockquote>
<p>我在最开始配置时，此页使用默认一直无法 Push，后来勾选了 Force overwrite branch in remote if it exists and has diverged，才 Push 成功，但是弊端是如果在 GitHub 网站上有任何改动，只要强制重写，就会覆盖掉以前的所有，包括 README.md 文件也会被抹去，因此如果不是不能 Push，不建议勾选，如果是空仓库也无法 Push 可以一试。</p>
</blockquote>
<p><strong>6. 等待…</strong></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/9.png" alt="2016/8/9"></p>
<p>由于国内众所周知的原因，此处可能需要等待几分钟</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/2016/8/10.png" alt="2016/8/10"></p>
<p>如果出现此页面，即为成功，可以打开 GitHub 查看是否 Push 进去</p>
<h3 id="日用"><a href="#日用" class="headerlink" title="日用"></a>日用</h3><h4 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h4><p><strong>项目右键－Team－Commit－填入 Commit 备注（勾选需要 Commit 的文件）</strong></p>
<h4 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h4><p><strong>项目右键－Team－Pull</strong></p>
<h4 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h4><p><strong>项目右键－Team－Push Branch ‘master’</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Git &amp;amp; GitHub For Eclipse&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="https://maimieng.com/tags/Tips/"/>
    
      <category term="Tools" scheme="https://maimieng.com/tags/Tools/"/>
    
      <category term="Git/GitHub" scheme="https://maimieng.com/tags/Git-GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Java BBS</title>
    <link href="https://maimieng.com/2016/6/"/>
    <id>https://maimieng.com/2016/6/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2016-05-29T15:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Java Web 告别之作<br></blockquote><br><a id="more"></a><br><strong>Info:</strong></p>
<ul>
<li>Mac OS 10.11.4</li>
<li>JDK 1.7</li>
<li>Tomcat 7.0</li>
<li>MySQL 5.7</li>
<li>Eclipse for Java EE MARS.2</li>
<li>Navicat 11.1</li>
</ul>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><ul>
<li><p><strong>Powered by Struts 1.3</strong></p>
<ul>
<li>支持注册，登录</li>
<li>注册信息：用户名，密码，邮箱</li>
<li>登录验证：用户名，密码，验证码：防止暴力破解</li>
<li>注册用户名不得与他人重复</li>
<li>留言信息：发言者，发言标题，发言时间，发言内容</li>
<li>留言可供登录用户回复</li>
<li>回复信息：回复者，回复内容，回复时间</li>
</ul>
</li>
<li><p><strong>Powered by Spring MVC + MyBatis</strong></p>
<ul>
<li>使用 Spring MVC + MyBatis 实现相同功能</li>
</ul>
</li>
</ul>
<h2 id="Spring-MVC-MyBatis"><a href="#Spring-MVC-MyBatis" class="headerlink" title="Spring MVC + MyBatis"></a><a href="https://github.com/kingcos/CourseDesign/blob/master/JavaBBS/BBS_with_SpringMVC_MyBatis" target="_blank" rel="external">Spring MVC + MyBatis</a></h2><blockquote>
<p>一个不小心，我就写出来了。。。<br>此代码参考了 Struts 1.3 版本，还参考了当时学习 Spring MVC + MyBatis 的代码，因此合成。</p>
</blockquote>
<h3 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h3><ul>
<li>Java EE</li>
<li>Spring MVC</li>
<li>MyBatis</li>
<li>SQL</li>
<li>HTML</li>
</ul>
<h3 id="如何将项目跑在自己电脑上"><a href="#如何将项目跑在自己电脑上" class="headerlink" title="如何将项目跑在自己电脑上"></a>如何将项目跑在自己电脑上</h3><p>大部分同 <strong>Powered by Struts 1.3</strong>，数据库名尽量更换，以防错误出现，SQL 文件放置在项目<strong>根目录下的 sql 文件夹</strong>中。</p>
<h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>将项目导入 IDE 中，打开 <code>BBS_with_SpringMVC_MyBatis/config/db.properties</code>，更改为适合本机的配置。</p>
<hr>
<h2 id="Struts-1-3"><a href="#Struts-1-3" class="headerlink" title="Struts 1.3"></a><a href="https://github.com/kingcos/CourseDesign/tree/master/JavaBBS/BBS_by_mm" target="_blank" rel="external">Struts 1.3</a></h2><blockquote>
<p>注意<br>基础要求已经全部完成，将在<strong>完成进阶一</strong>后公开<br>此次基础部分均由本人独立完成，几乎未参考其他资料，毕竟 Struts 1.3 太过久远，查到的资料几乎没有参考价值</p>
</blockquote>
<h3 id="技能树-1"><a href="#技能树-1" class="headerlink" title="技能树"></a>技能树</h3><ul>
<li>Java EE</li>
<li>Struts 1.x</li>
<li>SQL</li>
<li>HTML</li>
</ul>
<h3 id="如何将项目跑在自己电脑上-1"><a href="#如何将项目跑在自己电脑上-1" class="headerlink" title="如何将项目跑在自己电脑上"></a>如何将项目跑在自己电脑上</h3><p>项目本身肯定是不包含数据库的，所以需要自己创建数据库并配置。另外，由于不是太懂数据库设计，没有设置外键，但是由于基础要求不高，所以也算是能完成要求＝＝</p>
<p>SQL 文件放置在项目<strong>根目录下的 sql 文件夹</strong>中。</p>
<h4 id="数据库配置-1"><a href="#数据库配置-1" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>将项目导入 IDE 中，打开 <code>BBS_by_mm/WebRoot/META-INF/context.xml</code>，更改为适合本机的配置。</p>
<p>打开 <code>BBS_by_mm/src/com.maimieng.Dao/DatabaseConnection.java</code>，更改为适合本机的配置。</p>
<h4 id="如果项目有红叉…"><a href="#如果项目有红叉…" class="headerlink" title="如果项目有红叉…"></a>如果项目有红叉…</h4><p>那么可能是 JDK 或者 Tomcat 版本不一致，导致找不到 Jar 包，请在 <code>项目右键－Build Path－Configure Build Path...</code>，替换为本机的版本，如果想避免错误，尽量使用与此同一版本的 JDK 和 Tomcat。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/jbbs_01.png" alt="jbbs_01"></p>
<h4 id="Why-Eclipse"><a href="#Why-Eclipse" class="headerlink" title="Why Eclipse?"></a>Why Eclipse?</h4><p>有些同学可能会说，MyEclipse 更加方便好用，但是 MyEclipse 是商业软件，破解的软件既损害了开发者利益，也使得软件可能存在奇怪的问题，因此本人不会使用 MyEclipse 开发。但是，该项目可以导入 MyEclipse。如果你是一名开发者，那么我建议，从现在起，做一名拥护正版的开发者吧。</p>
<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><p><a href="https://github.com/kingcos/CourseDesign" target="_blank" rel="external"><strong>点我查看</strong></a></p>
<p>打开速度可能会很慢，但是你能打开我的博客，就应该打开这个网站，美好的事情，慢一点，也值得。<br>下载的方法也在里面写了，以后所有的大作业，也许都会公布在博客，项目都会发布到 GitHub。<br>当然，我的代码也不可能确定毫无 Bug，能修复尽量修复，如果暂时没有修复，会列出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Java Web 告别之作&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Exam Points" scheme="https://maimieng.com/tags/Exam-Points/"/>
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven for Mac</title>
    <link href="https://maimieng.com/2016/5/"/>
    <id>https://maimieng.com/2016/5/</id>
    <published>2016-05-10T16:00:00.000Z</published>
    <updated>2016-05-29T15:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Maven for Mac<br></blockquote><br><a id="more"></a><br><strong>Info:</strong></p>
<ul>
<li>Mac OS 10.11.4</li>
<li><a href="https://maven.apache.org" target="_blank" rel="external">Apache Maven 3.3.9</a></li>
<li>JDK 1.7</li>
<li>Eclipse MARS.2 for Java EE</li>
</ul>
<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>Mac 上的中文资料相较于 Windows 实在是很匮乏，而 Maven 作为一个优秀的项目管理工具，确实值得一学。因此，我个人记录一下学习 Maven 的过程，也便于日后温习。</p>
<p>Maven 已经集成在最新的 Eclipse EE MARS.2，所以如果想直接查看 Maven for Eclipse 的同学可以直接跳过前面的”瞎折腾”。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ol>
<li>点击 <a href="https://maven.apache.org/download.cgi" target="_blank" rel="external">下载页面</a> </li>
<li>选择 Binary 版本 &amp; Link 的下载链接，进行下载</li>
</ol>
<blockquote>
<p>注意<br>Maven 3.3 版本需要 JDK 1.7 或以上版本<br>(It still allows you to build against 1.3 and other JDK versions by <a href="https://maven.apache.org/guides/mini/guide-using-toolchains.html" target="_blank" rel="external">Using Toolchains</a></p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压缩，得到如图所示的文件</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_01.png" alt="maven4mac_01"></p>
<p>将 <code>apache-maven-3.3.9</code> 整个文件夹放在 <code>/usr/local/</code> 目录（也可按自己习惯放置在其他路径，但配置时要以实际路径为准）下，如图所示</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_02.png" alt="maven4mac_02"></p>
<blockquote>
<p>注意<br>使用 <code>Finder</code>-<code>前往</code>-<code>前往文件夹...</code> 即可进入隐藏的  <code>/usr/local/</code>  目录</p>
</blockquote>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_03.png" alt="maven4mac_03"></p>
<p>在终端控制器运行 <code>echo $JAVA_HOME</code> 命令查看 JDK 环境变量是否配置成功（具体配置方法可 Google）</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_04.png" alt="maven4mac_04"></p>
<p>在终端控制器运行 <code>export PATH=/usr/local/apache-maven-3.3.9/bin:$PATH</code> 配置 Maven 的环境变量，并在终端输入 <code>mvn -v</code> 查看 Maven 版本，测试是否配置成功，如图即为成功配置</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_05.png" alt="maven4mac_05"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="POM-xml"><a href="#POM-xml" class="headerlink" title="POM.xml"></a>POM.xml</h4><p>在 文稿即 <code>/Users/kingcos/Documents</code> 下，新建文件夹作为项目文件夹，命名为 <code>MavenDemo</code>，写入以下内容，并保存为 <code>POM.xml</code> 于根目录中</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_06.png" alt="maven4mac_06"></p>
<p>POM.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.maimieng.maven.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>SNAPSHOT-0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>使用 Maven，源代码 <code>.java</code> <strong>必须</strong>放在项目根目录的 <code>src/main/java</code> 下，再加上其所在包的文件夹下，所以 Hello.java 的绝对路径：<code>/Users/kingcos/Documents/MavenDemo/src/main/java/com/maimieng/hello/Hello.java</code>（源代码的资源文件<strong>必须</strong>放置在 <code>src/main/resources</code>）</p>
<p>Hello.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maimieng.hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在终端将目录切换到项目文件夹，输入 <code>mvn compile</code>，即可执行编译</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_07.png" alt="maven4mac_07"></p>
<p>编译完成，将在项目文件夹出现新的 <code>target</code> 文件夹，编译后的字节码文件，即在其中的 <code>classes</code> 文件夹内</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_08.png" alt="maven4mac_08"></p>
<h4 id="配置-Maven-本地仓库"><a href="#配置-Maven-本地仓库" class="headerlink" title="配置 Maven 本地仓库"></a>配置 Maven 本地仓库</h4><p>默认仓库，位于 <code>/Users/USERNAME/.m2</code> USERNAME 为个人用户名，不易管理</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_19.png" alt="maven4mac_19"></p>
<p>前往 <code>/usr/local</code>，打开 <code>apache-maven-3.3.9/conf/settings.xml</code></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_09.png" alt="maven4mac_09"></p>
<p>在 <code>settings.xml</code> 插入一行 <code>&lt;localRepository&gt;/Users/kingcos/Documents/Maven/repo&lt;/localRepository&gt;</code>，仓库路径可自定义，本文中设置为 <code>/Users/kingcos/Documents/Maven/repo</code>，复制此 <code>settings.xml</code> 文件</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_10.png" alt="maven4mac_10"></p>
<p>前往 <code>/Users/kingcos/Documents/Maven/repo</code>，将 <code>settings.xml</code> 粘贴于此</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_11.png" alt="maven4mac_11"></p>
<p>再次 <code>mvn compile</code>，执行编译，Maven 会下载依赖到新的本地仓库中，等待下载完毕，进行编译</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_12.png" alt="maven4mac_12"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_13.png" alt="maven4mac_13"></p>
<blockquote>
<p>注意<br>由于第一次编译过了，且无改动，所以此次只进行了下载依赖，编译提示 <code>nothing to compile</code>，如想看到编译，可提前删除 <code>target</code> 文件夹，再次编译</p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在 <code>POM.xml</code> 中 <code>&lt;project&gt;&lt;/&lt;project&gt;</code> 中添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用 Maven，测试代码 <code>.java</code> <strong>必须</strong>放在项目根目录的 <code>src/test/java</code> 下，再加上其所在包的文件夹下，所以 TestHello.java 的绝对路径：<code>/Users/kingcos/Documents/MavenDemo/src/test/j/com/maimeing/hello/TestHello.java</code>（测试代码的资源文件<strong>必须</strong>放置在 <code>src/test/resources</code>）</p>
<p>TestHello.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.maimieng.hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> junit.framework.Assert.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHello</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Hello h = <span class="keyword">new</span> Hello();</div><div class="line">        assertEquals(h.sayHello(<span class="string">"Maven"</span>), <span class="string">"Hello, Maven"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>终端输入 <code>mvn test</code></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_14.png" alt="maven4mac_14"></p>
<p>如图即测试成功</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_15.png" alt="maven4mac_15"></p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>终端输入命令</p>
<h5 id="mvn-clean"><a href="#mvn-clean" class="headerlink" title="mvn clean"></a><code>mvn clean</code></h5><p>清除生成的文件，如图即清除成功（默认清除 <code>target</code> 文件夹）</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_16.png" alt="maven4mac_16"></p>
<h5 id="mvn-clean-compile"><a href="#mvn-clean-compile" class="headerlink" title="mvn clean compile"></a><code>mvn clean compile</code></h5><p>先清理，再进行编译</p>
<h5 id="mvn-clean-test"><a href="#mvn-clean-test" class="headerlink" title="mvn clean test"></a><code>mvn clean test</code></h5><p>先清理，再进行测试</p>
<h5 id="mvn-clean-package"><a href="#mvn-clean-package" class="headerlink" title="mvn clean package"></a><code>mvn clean package</code></h5><p>先清理，再进行编译，测试，打包</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_17.png" alt="maven4mac_17"></p>
<h5 id="mvn-clean-install"><a href="#mvn-clean-install" class="headerlink" title="mvn clean install"></a><code>mvn clean install</code></h5><p>先清理，再进行编译，测试，打包，并安装到本地仓库，供其它项目使用</p>
<h5 id="mvn-clean-deploy"><a href="#mvn-clean-deploy" class="headerlink" title="mvn clean deploy"></a><code>mvn clean deploy</code></h5><p>先清理，再进行编译，测试，打包，并发布到服务器，供其他人使用</p>
<h5 id="mvn-archetype-generate"><a href="#mvn-archetype-generate" class="headerlink" title="mvn archetype:generate"></a><code>mvn archetype:generate</code></h5><p>可根据输入的信息，自动生成 Maven 构建，也可使用 Eclipse</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_18.png" alt="maven4mac_18"></p>
<h3 id="Maven-for-Eclipse"><a href="#Maven-for-Eclipse" class="headerlink" title="Maven for Eclipse"></a>Maven for Eclipse</h3><p>配置自己的 Maven，settings，及仓库</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_20.png" alt="maven4mac_20"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_21.png" alt="maven4mac_21"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_22.png" alt="maven4mac_22"></p>
<h4 id="新建-Maven-项目"><a href="#新建-Maven-项目" class="headerlink" title="新建 Maven 项目"></a>新建 Maven 项目</h4><p>打开 Eclipse，在左边的 Package Explorer 中右键，<code>new</code>-<code>Other</code> 并如图选择 Maven Project</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_23.png" alt="maven4mac_23"></p>
<p>第一页无需改动</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_24.png" alt="maven4mac_24"></p>
<p>第二页如果建立非 Web 项目，即默认此图配置</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_25.png" alt="maven4mac_25"></p>
<p>建立 Web 项目，需如图选择 <code>webapp</code></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_26.png" alt="maven4mac_26"></p>
<p>设置 <code>Group Id</code> 和 <code>Artifact Id</code> 以及包名，点击 <code>Finish</code> 即可完成建立</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_27.png" alt="maven4mac_27"></p>
<h5 id="部署-Jetty"><a href="#部署-Jetty" class="headerlink" title="部署 Jetty"></a>部署 Jetty</h5><p>在 <code>pom.xml</code> 中配置插件</p>
<p><code>&lt;build&gt;</code> 内：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">webApp</span>&gt;</span></div><div class="line">	      <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></div><div class="line">	       <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">"org.eclipse.jetty.server.nio.SelectChannelConnector"</span>&gt;</span></div><div class="line">	          <span class="tag">&lt;<span class="name">port</span>&gt;</span>9090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">	          <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></div><div class="line">	       <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></div><div class="line">	     <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在项目上右键，<code>Run As</code>-<code>Maven Build...</code>，如图输入 <code>jetty:run</code> 即可运行</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/maven4mac_28.png" alt="maven4mac_28"></p>
<p>打开 <a href="http://localhost:9090/test/" target="_blank" rel="external">http://localhost:9090/test/</a> 测试（端口号可在上方代码处更改，<code>9090</code> 仅供参考）</p>
<h3 id="Maven-with-Tomcat"><a href="#Maven-with-Tomcat" class="headerlink" title="Maven with Tomcat"></a>Maven with Tomcat</h3><h4 id="按如下配置"><a href="#按如下配置" class="headerlink" title="按如下配置"></a>按如下配置</h4><p>POM.xml</p>
<p><code>&lt;build&gt;</code> 内：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span>			<span class="tag">&lt;<span class="name">path</span>&gt;</span>/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Maven 仓库内的 settings.xml</p>
<p><code>&lt;servers&gt;</code> 内：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>外部 Tomcat 路径下的 <code>conf/tomcat-users.xml</code></p>
<p><code>&lt;tomcat-users&gt;</code> 内：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>运行 Tomcat，打开 <a href="http://localhost:8080/manager" target="_blank" rel="external">http://localhost:8080/manager</a>，在弹窗中输入账号密码，均为 <code>admin</code>，查看是否能登入管理页面，如果可以即可进行下一步，若有错，请检查上述是否设置正确。</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><strong>先运行 Tomcat</strong>，再项目右键－Run As－6 Maven Build…－<code>Tomcat7:redeploy</code>，出现 <code>Build SUCCESS</code>，即为配置成功。以后每次修改项目文件，保存后，不需重启 Tomcat，重新发布即可。</p>
<h4 id="One-more-thing…"><a href="#One-more-thing…" class="headerlink" title="One more thing…"></a>One more thing…</h4><p>我在配置完以上并运行以后，有时候仍会报 <code>in</code> 错，然后在开启 Tomcat 的条件下进行验证，发现并不能验证成功，这是因为外部 Tomcat 路径下的 <code>conf/tomcat-users.xml</code> 又还原到了原始状态，需要再次添加上面的内容才可，暂时不知道什么原因导致的。</p>
<p>具体项目中使用，详见 <a href="http://maimieng.com/2016/programming/jbbs/">Java BBS</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Maven for Mac&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="https://maimieng.com/tags/Tips/"/>
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
      <category term="Tools" scheme="https://maimieng.com/tags/Tools/"/>
    
  </entry>
  
</feed>

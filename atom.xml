<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V2M</title>
  <subtitle>Way to MM.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maimieng.com/"/>
  <updated>2017-02-27T06:43:13.000Z</updated>
  <id>https://maimieng.com/</id>
  
  <author>
    <name>kingcos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS193p 查漏补缺（二）Lecture 04</title>
    <link href="https://maimieng.com/2017/14/"/>
    <id>https://maimieng.com/2017/14/</id>
    <published>2017-02-23T16:00:00.000Z</published>
    <updated>2017-02-27T06:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Developing iOS 10 Apps with Swift - CS193p<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
<li>macOS 10.12.4 beta (16E154a)</li>
</ul>
</li>
</ul>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>CS193p 是斯坦福大学的一门公开课，今年 iOS 10 &amp; Swift 3.0 的版本如约而至，还是 Paul 老爷爷带课。之前虽然也有听过他的课，但没有坚持下来，也没有做相应的笔记。为了方便交流分享，我在 GitHub 建立了一个 Repo：<a href="https://github.com/kingcos/CS193P_2017" target="_blank" rel="external">https://github.com/kingcos/CS193P_2017</a>，会将课上的代码 Commit，也会分享笔记、心得。</p>
<p>由于之前学过 Swift，也相信学习这门课的同学应当有一些 Swift 基础，所以定为查漏补缺，目标只将难点、重点、常用点总结。</p>
<p><strong>本文对应的 Demo 可以在：<a href="https://github.com/kingcos/CS193P_2017/Lecture04" target="_blank" rel="external">https://github.com/kingcos/CS193P_2017/Lecture04</a> 查看、下载。</strong></p>
<h2 id="UIWindow"><a href="#UIWindow" class="headerlink" title="UIWindow"></a>UIWindow</h2><blockquote>
<p>该节部分参考《iOS 开发进阶——唐巧》。</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>class UIWindow : UIView</code></p>
<p>UIWindow 是位于视图等级最顶层的 UIView（甚至包含状态栏）。通常一个 iOS 应用只有一个 UIWindow。</p>
<p>UIWindow 在纯代码 AppDelegate.swift 的使用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="comment">// Override point for customization after application launch.</span></div><div class="line"></div><div class="line">    <span class="comment">// 1. 创建窗口</span></div><div class="line">    window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line">    <span class="comment">// 2. 创建窗口根控制器</span></div><div class="line">    <span class="keyword">let</span> rootViewController = <span class="type">UIViewController</span>()</div><div class="line">    window?.rootViewController = rootViewController</div><div class="line">    <span class="comment">// 3. 显示窗口</span></div><div class="line">    window?.makeKeyAndVisible()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UIWindow 的主要作用：</p>
<ol>
<li>包含应用所需的所有 UIView 视图（控件）</li>
<li>传递触摸消息和键盘事件到 UIView</li>
</ol>
<p>为 UIWindow 增加 UIView 视图的方法：</p>
<ol>
<li>利用父类 UIView 的 <code>open func addSubview(_ view: UIView)</code></li>
<li>设置要添加视图对应的 UIViewController 为其特有的 <code>rootViewController</code>，将自动把其视图添加到当前窗口，同时负责维护控制器和视图的生命周期</li>
</ol>
<p>UIWindowLevel 即 UIWindow 层级。默认 UIWindow 的层级为 UIWindowLevelNormal。利用 UIWindow 会自动覆盖到所有界面最顶层的特性，可以为 App 加入密码保护（手势解锁）的功能。当 UIWindow 需要处理键盘事件，需要 <code>makeKey()</code> 设置为 Key Window。但是 UIWindow 也不应当滥用。</p>
<p>该处的 Swift 版 Demo 详见 <a href=""></a>。</p>
<h2 id="Initializing-a-UIView"><a href="#Initializing-a-UIView" class="headerlink" title="Initializing a UIView"></a>Initializing a UIView</h2><p>详见<a href="http://www.jianshu.com/p/bfea8efee664" target="_blank" rel="external">初探 iOS 中自定义 UIView 的初始化过程</a>一文，现已加入对 CS193p 的更新。</p>
<h2 id="Points-amp-Pixels"><a href="#Points-amp-Pixels" class="headerlink" title="Points &amp; Pixels"></a>Points &amp; Pixels</h2><ul>
<li>像素（Pixel）是绘制设备屏幕的最小单位。</li>
<li>点（Point）是坐标系的单位。</li>
<li>在 iOS 中，通常 1 个点为 2 个像素（2x），iPhone Plus 的屏幕为 3x。</li>
<li><code>contentScaleFactor</code>：应用于视图的比例（Pixels Per Point）</li>
</ul>
<h2 id="Bounds-amp-Frame"><a href="#Bounds-amp-Frame" class="headerlink" title="Bounds &amp; Frame"></a>Bounds &amp; Frame</h2><p>详见 <a href="http://www.jianshu.com/p/edb2ae03115c" target="_blank" rel="external">iOS 中的 bounds &amp; frame</a> 一文，现已加入对 CS193p 的更新。</p>
<h2 id="Custom-UIView"><a href="#Custom-UIView" class="headerlink" title="Custom UIView"></a>Custom UIView</h2><ul>
<li>创建自定义 UIView，需要绘制视图时可重写 <code>draw(_ rect: CGRect)</code> 方法。除非必要不要重写该方法，将影响性能。</li>
<li>不可直接调用 <code>draw(_ rect: CGRect)</code> 方法，当需要重新绘制时，我们可以调用 <code>setNeedsDisplay()</code> 或 <code>setNeedsDisplay(_ rect: CGRect)</code>，系统将适时调用 <code>draw(_ rect: CGRect)</code>。</li>
</ul>
<h2 id="Core-Graphics"><a href="#Core-Graphics" class="headerlink" title="Core Graphics"></a>Core Graphics</h2><ul>
<li>CG 即 Core Graphics。</li>
<li>获取需要绘制的上下文（context），UIGraphicsGetCurrentContext 即可在 <code>draw(_ rect: CGRect)</code> 方法中使用 -&gt; 创建路径（path）-&gt; 设置绘制属性（字体，颜色等）-&gt; 使用以上属性在路径中填充（stroke/fill）。</li>
</ul>
<h2 id="UIBezierPath"><a href="#UIBezierPath" class="headerlink" title="UIBezierPath"></a>UIBezierPath</h2><h3 id="自定路径"><a href="#自定路径" class="headerlink" title="自定路径"></a>自定路径</h3><ul>
<li>实例化 -&gt; UIBezierPath 将自动在当前上下文绘制（<code>draw(_ rect: CGRect)</code> 将该步完成）-&gt; UIBezierPath 设置绘制和属性 -&gt; 使用 UIColor 设置画笔和填充颜色 -&gt; UIBezierPath 绘制和填充</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化</span></div><div class="line"><span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</div><div class="line"></div><div class="line"><span class="comment">// UIBezierPath 设置绘制和属性</span></div><div class="line">path.lineWidth = <span class="number">3.0</span></div><div class="line"></div><div class="line">path.move(to: <span class="type">CGPoint</span>(x: <span class="number">80</span>, y: <span class="number">50</span>))</div><div class="line">path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">140</span>, y: <span class="number">150</span>))</div><div class="line">path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">10</span>, y: <span class="number">150</span>))</div><div class="line"></div><div class="line"><span class="comment">// 关闭路径</span></div><div class="line">path.close()</div><div class="line"></div><div class="line"><span class="comment">// 使用 UIColor 设置画笔和填充颜色</span></div><div class="line"><span class="type">UIColor</span>.green.setFill()</div><div class="line"><span class="type">UIColor</span>.red.setStroke()</div><div class="line"></div><div class="line"><span class="comment">// UIBezierPath 绘制和填充</span></div><div class="line">path.fill()</div><div class="line">path.stroke()</div></pre></td></tr></table></figure>
<h3 id="内置路径"><a href="#内置路径" class="headerlink" title="内置路径"></a>内置路径</h3><ul>
<li>利用 UIBezierPath 不同的构造器可以绘制内置的路径，例如圆角矩形，椭圆等。</li>
<li><code>addClip()</code>：剪裁</li>
<li><code>contains(_ point: CGPoint)</code>：判断 CGPoint 是否在路径内（路径必需闭合）</li>
</ul>
<h2 id="UIColor"><a href="#UIColor" class="headerlink" title="UIColor"></a>UIColor</h2><ul>
<li>Alpha 透明度：<code>UIColor.red.withAlphaComponent(0.5)</code>（范围 0.0 - 1.0）。</li>
</ul>
<h2 id="View-Transparency"><a href="#View-Transparency" class="headerlink" title="View Transparency"></a>View Transparency</h2><ul>
<li><code>isOpaque</code> 默认为 <code>true</code>，即不透明。视图若要透明，需要先设置 <code>isOpaque = false</code>。当 <code>isOpaque</code> 为 <code>true</code>，视图整体或部分为透明，将出现不可预料的结果（参考苹果官方文档）。</li>
<li>设置整个视图的透明度：<code>alpha = 0.1</code>（注意设置 <code>isOpaque = false</code>）</li>
<li>不移除视图但完全隐藏视图：<code>isHidden = true</code>（不绘制且不响应事件）</li>
</ul>
<h2 id="NSAttributedString"><a href="#NSAttributedString" class="headerlink" title="NSAttributedString"></a>NSAttributedString</h2><ul>
<li>NSAttributedString 不是 String，也不是 NSString。</li>
<li>可变 NSAttributedString 为：NSMutableAttributedString。</li>
<li>在 <code>draw(_ rect: CGRect)</code> 中绘制文字时，需要使用 NSAttributedString。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="type">NSAttributedString</span>(string: <span class="string">"maimieng.com"</span>)</div><div class="line">text.draw(at: <span class="type">CGPoint</span>(x: <span class="number">50.0</span>, y: <span class="number">50.0</span>))</div><div class="line"></div><div class="line"><span class="keyword">let</span> swiftStr: <span class="type">String</span> = text.string</div></pre></td></tr></table></figure>
<ul>
<li>为 NSMutableAttributedString 设置多个属性：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> params = [<span class="type">NSForegroundColorAttributeName</span> : <span class="type">UIColor</span>.red,</div><div class="line">              <span class="type">NSStrokeWidthAttributeName</span> : <span class="number">5.0</span>,</div><div class="line">              <span class="type">NSFontAttributeName</span> : <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">20.0</span>)] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>]</div><div class="line"><span class="keyword">let</span> attStr = <span class="type">NSMutableAttributedString</span>(string: <span class="string">"0123456789"</span>)</div><div class="line"><span class="comment">// 12345 的相应属性将被设置；这里为 NSRange</span></div><div class="line">attStr.setAttributes(params, range: <span class="type">NSMakeRange</span>(<span class="number">1</span>, <span class="number">5</span>))</div><div class="line">attStr.draw(at: <span class="type">CGPoint</span>(x: <span class="number">50.0</span>, y: <span class="number">50.0</span>))</div></pre></td></tr></table></figure>
<ul>
<li>UTF16View 代表字符串作为一串 16 位的 Unicode 字符集，其索引类型仍为 <code>String.Index</code>。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myBlog = <span class="string">"maimieng.com"</span></div><div class="line"><span class="keyword">let</span> strUTF16View = myBlog.utf16</div></pre></td></tr></table></figure>
<h2 id="UIFont"><a href="#UIFont" class="headerlink" title="UIFont"></a>UIFont</h2><ul>
<li><code>UIFont.preferredFont(forTextStyle: .body)</code>：根据给定的文本风格获得相应的字体。</li>
</ul>
<h2 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h2><ul>
<li>有关 Core Graphics 绘制 UIImage 可参考 <code>UIGraphicsBeginImageContext(_ size: CGSize)</code>。</li>
<li>绘制 UIImage：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>()</div><div class="line"></div><div class="line"><span class="comment">// 原点（左上角）为 CGPoint 绘制</span></div><div class="line">image.draw(at: <span class="type">CGPoint</span>)</div><div class="line"><span class="comment">// 缩放图片到适合 CGRect 绘制</span></div><div class="line">image.draw(<span class="keyword">in</span>: <span class="type">CGRect</span>)</div><div class="line"><span class="comment">// 平铺图片到 CGRect 内绘制</span></div><div class="line">image.drawAsPattern(<span class="keyword">in</span>: <span class="type">CGRect</span>)</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/kingcos/CS193P_2017" target="_blank" rel="external">CS193P_2017</a></li>
<li><a href="http://www.jianshu.com/p/bfea8efee664" target="_blank" rel="external">初探 iOS 中自定义 UIView 的初始化过程</a></li>
<li><a href="http://www.jianshu.com/p/edb2ae03115c" target="_blank" rel="external">iOS 中的 bounds &amp; frame</a></li>
<li><a href="https://github.com/tangqiaoboy/iOS-Pro" target="_blank" rel="external">tangqiaoboy/iOS-Pro</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uiview/1622622-isopaque" target="_blank" rel="external">isOpaque - Apple Inc.</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Developing iOS 10 Apps with Swift - CS193p&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>我为什么可能不考研</title>
    <link href="https://maimieng.com/2017/13/"/>
    <id>https://maimieng.com/2017/13/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-02-21T17:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>我不是一个只敲代码的木头人。<br></blockquote><br><a id="more"></a></p>
<blockquote>
<p>简书：很感谢大家关注我的简书，通常我都会把自己总结的 iOS 或者其他编程心得发在这个平台上。弥补博客速度过慢，且不方便推广的弊端。很高兴在这里收获了一些粉丝和喜欢，能得到肯定让我十分开心。这次的文章并不是技术文，而是一篇关于内心想法的文章，这也是我第一次编写并发布这种类型的文章，也希望您能多提意见，关于内容也可以在评论交流。</p>
<p>微信公众号：很感谢大家关注这个公众号，虽然现在的内容更新频率很低，关注的人数也不过刚满百人，所以更是感谢大家的关注。就像公众号的介绍中所说，这个公众号并不是一个完完全全的分享英语学习的账号，而是一个交流的平台。我希望在这里不仅可以与你们分享一些学习的东西，也可以分享一些其他的事情。而假若你也恰好愿意一看，那我就值得这么一写。<br>再次感谢大家的关注。</p>
<p>本文起草于 2017.2.20 发布于 2017.2.22 凌晨。</p>
</blockquote>
<p>现在，是 2017 年 2 月 20 日的凌晨。今天就要正式开始大三下学期的课程了。如同公众号关于我自己中所说的，我现在在一所很普通的二本院校就读软件工程专业，学历可能要比这篇文章的大多数读者还要低。所以在您阅读之前，我要提前明确一下：我的写作水平可能并不高。从小到大，为了凑够作文要求的字数用尽了浑身解数，甚至至今都无法忘记小学时写作文的黑历史。因此我对自己的文章并没有什么信心，所以大家如果执意阅读，希望大家不要太过在意行文用词。当然，这和命题作文不同，这次的题目是出于我的一些同学问我是否考研、为何不打算考研而起，所以这篇文章我也思考了很久，绝对不是一篇应付的「作文」，而是「我」现在真实的想法。当然全文也仅仅是与大家说说我自己的想法，具有相当的<strong>主观性</strong>，并没有太大的参考价值，所以切不可当作我的建议。既然都是成年人，我也相信你会有自己的想法和选择。</p>
<p>首先，因为有些专业考研率可能相当高，所以我想先谈谈为什么有同学会问我为何不考研。我猜，这里面应该有以下这几个原因：</p>
<h3 id="一是考研率低导致的认同寻求"><a href="#一是考研率低导致的认同寻求" class="headerlink" title="一是考研率低导致的认同寻求"></a>一是考研率低导致的认同寻求</h3><p>由于我们专业是这所学校最后几批划入二本的专业，加上相对高昂的学费，大部分报考这个专业的学生成绩可能在二本线上下徘徊，即大部分学生是补录（即征集志愿）来到这所学校的这个专业的。<strong>他们可能把二本的招牌，看得比专业要重要一点。</strong> 作为过来人，我完全理解高中毕业的学生面对形形色色的专业时的迷茫与焦灼。因此，在没有进入大学之前，大家可能对很多专业都不了解，甚至还带有偏见。所以专业可能就不会成为大多数人选择院校的首要考虑。加上我们学院几乎是学校里人数最多的学院，再除去一小部分跨考专业的同学，考研率就被稀释得很低。所以，大家可能就不会去冒险，特别是在大学这种相对宽松的环境。因为认同较低，所以为了寻求认同和肯定，这可能是问我考研与否的原因之一。</p>
<h3 id="二是我的个人原因"><a href="#二是我的个人原因" class="headerlink" title="二是我的个人原因"></a>二是我的个人原因</h3><p>我个人一直认为专业能力和学习成绩是不同的，而且我对自己的学习成绩（即硬性考试考核等）还是有一定的了解的。两年半以来，我的成绩在同学中可能比较靠前，但是我的成绩相对于一本等重点高校的好学生相比，差的很多（前四学期五分制平均绩点只有 3.79）。不过加上我又是班里的学委，似乎给大家留下一种我是「学霸」的印象。当然，这并不是夸耀自己成绩稍好，我也在高中感受过那种单纯的成绩差距所带来的绝望。大学是开放的，多元的，每个人可以选择自己感兴趣的方向，并没有那么多孰错孰对，我也理解大家的做法。而我自己也确实只是出于对这个专业比较热爱，而这也导致大家可能会不由自主猜测我可能是为了考研而努力学习。加上作为这里为数不多的考过四六级的同学，所以大家问我是否考研，这也是我认真写下这篇文章的目的：并不是我要告诉大家应该怎么选择，而是告诉大家<strong>我的选择</strong>，这可能就足够了。</p>
<p>以上可能就是有同学会发出这样的疑问的原因，下面就要正式说说我可能不考研的原因了。我喜欢有条理的列举，所以我会按条来解释：</p>
<h3 id="一是大学的职能"><a href="#一是大学的职能" class="headerlink" title="一是大学的职能"></a>一是大学的职能</h3><p>对软件工程不太了解的同学，但也能从软件工程这四个字中知道，我们也是做工程的。只是实现的载体有别于其他工程类学科，我们的载体是软件，因此便有了软件工程师这个职位。据我所了解的本专业的情况，很多非应届和实习的 JD（Job Description）大多只要求了工作年限，以及相应的能力，而对学历相对弱化。<strong>这就说明大多数大学只能培养本专业学生的基本能力，而不能全面培养为对接公司企业的人。</strong> 很明显，后者的实现对学校来说也不太现实。虽然可能研究生导师会带学生参与项目，但这些项目也许大多为外包项目，和真实的工作还是有些区别的。我个人十分反感外包公司，因为大多数外包公司对于雇员来说没有使命感，缺少主人翁精神，当然你可能说这些都是情怀。不过外包公司压榨人力，工资福利也不会多好，我个人是不会选择这样的公司的。话说回来，大学对于我们专业的职能就只是培养基本的职业素养，然而这么低的要求可能很多大学生都不合格，包括我个人在内。所以考研甚至有可能产生新问题，也不能解决老问题，这就是我个人认为的第一个原因。</p>
<h3 id="二是专业的性质"><a href="#二是专业的性质" class="headerlink" title="二是专业的性质"></a>二是专业的性质</h3><p>软件在互联网时代的发展异常迅速，虽然基础可能变化不大，但底层之上的具体实现却千差万别。而由于软件的底层几乎被国外（特指美国）「垄断」，所以相对来说，国外的发展还是要远快于国内。一本国外的新书可能摘自作者半年之内的博客文章，当这本书被国人发现，可能已经过了一年半载，引入国内需要时间，翻译校对需要时间，等到国内上市，可能这个概念已经过时了，或者已经更深入了。这就导致如果只看眼前摆好的知识已经是过时的了。所以我们的大多数老师掌握的也只是他当时所学的知识，当他用这些知识教授学生，学生也会过时。当然，我并不是说所有知识都有保鲜期，而是说新的知识获取相对较难，再加上人的懒惰，可能并不会吸收接纳新的知识，甚至会出现抵触。所以专业的性质决定了我们的专业学生<strong>既要有不错的基础知识，又有接纳新知识的态度，以及不怕困难的决心</strong>。而如果你有了这些品质，我个人认为即使不考研也能找到相当不错的工作。而考研延长了进入社会的时间，而知识又是不断更新的，我觉得自己可能并没有毅力持续追新，而是想去成为这股潮流。所以这就是我认为的第二个原因。</p>
<h3 id="三是时间"><a href="#三是时间" class="headerlink" title="三是时间"></a>三是时间</h3><p>现在的我越发觉得时间过得太快。大家虽然还是学生，但也应该有所感知国内的生活压力。时间成了这里相对公平且珍贵的资源。当时没有选择复读，其实就是我个人不想再浪费时间。但是我觉得复读的成本其实远小于考研，所以我还有点后悔的。但是这个事情已经过去了，与其后悔，不如现在做起让未来少后悔一点。当我拿着可能是人生中最宝贵的三年（1+2）打赌时，确实有些认怂了。所以在时间面前，这次我认怂了，这就是我的第三个原因。</p>
<h3 id="四是国内研究生环境"><a href="#四是国内研究生环境" class="headerlink" title="四是国内研究生环境"></a>四是国内研究生环境</h3><p>关注过国内新闻的同学应该都有所耳闻导师剥削学生的事件。当然，出事的概率是绝对小的，但这也反映了一个现实。如果我去考研，我没有绝对的信心和能力可以考到 985，211 这些好学校，进到一些优秀的实验室，所以高收益的风险很大。加上现在我在本科也有在给老师开发项目，我不难想像为导师做苦力的情景。称为做苦力的原因一是经济效益低，二是从中所学到的知识很少。所以综合来看，我们专业的国内研究生对我来说成本高，收益低，风险大。虽然说出去实习工作的风险可能更高，但是研究生也有毕业的一天，迟早也会迈入到这个竞争当中。这就是我认为的第四个原因。</p>
<p>以上便是几个我自认为不选择考研的原因，但这完全不代表考研无用。这个选择完全是个人想法的博弈和权衡。在我看来考研也是有很多好处的，也列举几条：</p>
<h3 id="一是高学历是第一份工作的敲门砖"><a href="#一是高学历是第一份工作的敲门砖" class="headerlink" title="一是高学历是第一份工作的敲门砖"></a>一是高学历是第一份工作的敲门砖</h3><p>个人认为其意思是当应届生走向社会，社会倾向接受更高学历的学生，因为这样对于公司企业<strong>选择人力的成本是最低的</strong>。一个好学校的学生的平均能力应当是普遍大于一些普通高校的学生的能力。但是当工作年限增加，学历就变得越来越相对次要，因为公司所需要的能力大多都是工作中积累的。当然本文全文指的都是我们专业，其他的专业我也不太了解，不能妄议。高学历作为敲门砖的作用，也是相当大的，也关乎到未来就业的基础。</p>
<h3 id="其次，复习考研的过程是一个查漏补缺的过程"><a href="#其次，复习考研的过程是一个查漏补缺的过程" class="headerlink" title="其次，复习考研的过程是一个查漏补缺的过程"></a>其次，复习考研的过程是一个查漏补缺的过程</h3><p>软件和计算机相关的考研专业好像有数据结构，计算机组成原理，操作系统，计算机网络等专业课。这些课程是抽象的，概念很多，但也是一个合格开发者的基本素质。所以在准备考研的过程巩固了基础，这也是很好的收获。而如我这样的比较浮躁的同学，就很难有耐心有决心学习基础，这也是我自己目前在克服的一点。</p>
<h3 id="另外，考研也是一种动力"><a href="#另外，考研也是一种动力" class="headerlink" title="另外，考研也是一种动力"></a>另外，考研也是一种动力</h3><p>由于大学相对轻松自由的环境，很多同学变得散漫。考研却能成为自己人生的目标，让自己努力起来，有了方向感，这也是我所认为的考研的好处之一吧。</p>
<p>另外我个人也很尊重和佩服选择考研的同学，他们都是有目标有梦想的同学，他们可能承受很大的压力。所以我也期望高校应当尽到其责任，将人才的培养落实。家长也应当少给予干预和压力，毕竟孩子已是而立之人。也希望普通高校能够沉稳一些，不要太过浮躁。当然这些可能也只是奢望了。</p>
<p>考研不考研，这完全是个人的选择，作为成年人，也应当对自己的选择负责。对于本文我自认为也算是尽可能地说出了自己真实的想法，希望不会给你带来困扰和纠结，也希望可以听听你的看法。最后，大家不知道是否注意到文章里重复的一个词，<strong>「可能」</strong>。因为这是我作为一个没有经历过考研和工作的人的声音，我并不确定里面是否会有一些误解和偏见。甚至题目里也写了这个词，这是因为我个人也并非完全有可能把握自己人生的轨迹。但我仍天真的相信，<strong>未来仍有无限可能</strong>。</p>
<blockquote>
<p>后记</p>
<p>这篇文章大约 3000 字，也是我第一篇非技术文，也是我第一次准备多平台（博客，简书，微信公众号，QQ，微信）发布的文章。我不知道效果或者说反馈会如何，但试一试总没错。<br><strong>最后，谢谢你的阅读。</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;我不是一个只敲代码的木头人。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Essay" scheme="https://maimieng.com/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>CS193p 查漏补缺（一）Lecture 03</title>
    <link href="https://maimieng.com/2017/12/"/>
    <id>https://maimieng.com/2017/12/</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-02-21T07:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Developing iOS 10 Apps with Swift - CS193p<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
<li>macOS 10.12.4 beta (16E154a)</li>
</ul>
</li>
</ul>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>CS193p 是斯坦福大学的一门公开课，今年 iOS 10 &amp; Swift 3.0 的版本如约而至，还是 Paul 老爷爷带课。之前虽然也有听过他的课，但没有坚持下来，也没有做相应的笔记。为了方便交流分享，我在 GitHub 建立了一个 Repo：<a href="https://github.com/kingcos/CS193P_2017" target="_blank" rel="external">https://github.com/kingcos/CS193P_2017</a>，会将课上的代码 Commit，也会分享笔记、心得。</p>
<p>由于之前学过 Swift，也相信学习这门课的同学应当有一些 Swift 基础，所以定为查漏补缺，目标只将难点、重点、常用点总结。</p>
<p><strong>本文对应的 Playground 可以在：<a href="https://github.com/kingcos/CS193P_2017/Lecture03" target="_blank" rel="external">https://github.com/kingcos/CS193P_2017/Lecture03</a> 查看、下载。</strong></p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>可选类型的本质是枚举（enum）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">none</span></div><div class="line">    <span class="keyword">case</span> some(<span class="type">T</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可选类型可以链式使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> label: <span class="type">UILabel</span>! = <span class="type">UILabel</span>()</div><div class="line">label.text = <span class="string">"Optional Chain"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> text = label?.text?.hashValue &#123;</div><div class="line">    <span class="built_in">print</span>(text)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>元组作为函数返回值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTemperature</span><span class="params">()</span></span> -&gt; (celsius: <span class="type">Double</span>, fahrenheit: <span class="type">Double</span>) &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">10.0</span>, <span class="number">50.0</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> currentTemperature = getTemperature()</div><div class="line"><span class="built_in">print</span>(currentTemperature.celsius)</div><div class="line"><span class="built_in">print</span>(currentTemperature.fahrenheit)</div></pre></td></tr></table></figure>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>Range 是范型的，但只支持可比较（Comparable）的类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> startIndex: <span class="type">T</span></div><div class="line">    <span class="keyword">var</span> endIndex: <span class="type">T</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CountableRange 是一段连续值，因此可以使用 <code>for-in</code> 遍历。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</div><div class="line">    <span class="built_in">print</span>(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 步长非 1 的遍历可以使用全局的 stride 方法</span></div></pre></td></tr></table></figure>
<h2 id="Class-amp-Structure-amp-Enum"><a href="#Class-amp-Structure-amp-Enum" class="headerlink" title="Class &amp; Structure &amp; Enum"></a>Class &amp; Structure &amp; Enum</h2><blockquote>
<p>该部分内容可能未来会单独总结，这里仅总结该课程的内容</p>
</blockquote>
<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul>
<li>相同的声明语法</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDemo</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StructDemo</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumDemo</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>属性和方法</li>
</ul>
<blockquote>
<p>注：Swift 中的 Properties 即 Instance Variable 实例变量，方法即 <code>func</code>。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">supportAllTheseThreeDataStructures</span><span class="params">()</span></span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 注：枚举不支持存储属性</span></div><div class="line"><span class="keyword">var</span> storedProperty = <span class="number">0.0</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> computedProperty: <span class="type">Double</span> &#123;</div><div class="line">   <span class="keyword">get</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">0.0</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">set</span> &#123;</div><div class="line">       <span class="keyword">self</span>.computedProperty = newValue</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>构造器</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 枚举不支持构造器；结构体有默认的构造器</span></div><div class="line"><span class="keyword">init</span>(prop: <span class="type">Double</span>) &#123;</div><div class="line">    storedProperty = prop</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul>
<li>继承</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 只有类支持继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDemo</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>值类型和引用类型</li>
</ul>
<p>这三个数据结构中，类是引用类型，结构体和枚举是值类型。详细的比较可以参考我之前所写的<a href="http://www.jianshu.com/p/ba12b64f6350" target="_blank" rel="external">Swift 中的值类型与引用类型</a>一文。</p>
<h2 id="Type-amp-Instance-Methods-Properties"><a href="#Type-amp-Instance-Methods-Properties" class="headerlink" title="Type &amp; Instance Methods/Properties"></a>Type &amp; Instance Methods/Properties</h2><p>类型方法和属性是直接由类名调用的，需要在方法或属性前加上 <code>static</code> 关键字。关于属性的知识可以参考我之前所写的<a href="http://www.jianshu.com/p/fe60f5bafab3" target="_blank" rel="external">浅谈 Swift 中的属性（Property）</a>一文。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">testTypeMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">TypeProperty</span> = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">TypeDemo</span>.testTypeMethod()</div><div class="line"><span class="built_in">print</span>(<span class="type">TypeDemo</span>.<span class="type">TypeProperty</span>)</div></pre></td></tr></table></figure>
<h2 id="Array-Methods"><a href="#Array-Methods" class="headerlink" title="Array Methods"></a>Array<t> Methods</t></h2><blockquote>
<p>可能是在讲这一段的时候，老师提到了 Functional Programming 就十分兴奋，说了很多鼓励学生学习的话。我虽然知道函数式编程的基本概念，但尚未学习。希望未来可以在这里与大家分享学习函数式编程的内容。</p>
</blockquote>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>public func filter(_ isIncluded: (Element) throws -&gt; Bool) rethrows -&gt; [Element]</code></p>
<p>filter 返回一个新的数组，其中的元素为满足过滤器内部规则的元素。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="comment">// 将大于 3 的元素过滤出，放入新的数组</span></div><div class="line"><span class="built_in">print</span>(arrA.<span class="built_in">filter</span>(&#123; $<span class="number">0</span> &gt; <span class="number">3</span> &#125;))</div></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>public func map&lt;T&gt;(_ transform: (Element) throws -&gt; T) rethrows -&gt; [T]</code></p>
<p>map 返回一个新的数组，其中的元素为原数组每个元素变换得来的元素。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="comment">// 将每个元素转换为 Int，放入新的数组</span></div><div class="line"><span class="built_in">print</span>(arrA.<span class="built_in">map</span>(&#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;))</div></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>public func reduce&lt;Result&gt;(_ initialResult: Result, _ nextPartialResult: (Result, Element) throws -&gt; Result) rethrows -&gt; Result</code></p>
<p>reduce 将整个数组返回为一个值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="comment">// 将每个元素累加，初始值为 0</span></div><div class="line"><span class="built_in">print</span>(arrA.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;)</div></pre></td></tr></table></figure>
<h2 id="String-Index"><a href="#String-Index" class="headerlink" title="String.Index"></a>String.Index</h2><blockquote>
<p>字符串的索引并不是类似其他语言中的整型，由于内容和<a href="http://www.jianshu.com/p/94310202ba1b" target="_blank" rel="external">Swift 中的字符串截取</a>略有重复，所以不再重复说明。</p>
</blockquote>
<h2 id="NSObject-amp-NSNumber-amp-Date-amp-Data"><a href="#NSObject-amp-NSNumber-amp-Date-amp-Data" class="headerlink" title="NSObject &amp; NSNumber &amp; Date &amp; Data"></a>NSObject &amp; NSNumber &amp; Date &amp; Data</h2><p>这里的几个类型老师也在其 Lecture 中提到，这里仅作了解。</p>
<h3 id="NSObject"><a href="#NSObject" class="headerlink" title="NSObject"></a>NSObject</h3><p>NSObject 是所有 Objective-C 类的基类。现阶段，在 Swift 中有时为了一些特性还是会继承自该类。</p>
<h3 id="NSNumber"><a href="#NSNumber" class="headerlink" title="NSNumber"></a>NSNumber</h3><p>NSNumber 是通用的保存数字的类（引用类型）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="type">NSNumber</span>(value: <span class="number">3.14</span>)</div><div class="line"><span class="keyword">let</span> numDoubleValue = num.doubleValue</div><div class="line"><span class="keyword">let</span> numBoolValue = num.boolValue</div><div class="line"><span class="keyword">let</span> numIntValue = num.intValue</div></pre></td></tr></table></figure>
<h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date 是值类型，可以通过 Date 获取当前日期时间，以及未来或过去的日期时间。同理的还有 Calendar，DateFormatter，DateComponents。</p>
<p>如果 App 需要本地化时间时，可能会用到该类。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> date = <span class="type">Date</span>()</div><div class="line"><span class="built_in">print</span>(date)</div></pre></td></tr></table></figure>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data 是值类型，可以通过 iOS SDK 用来保存，恢复，交换原始数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = <span class="type">Data</span>()</div></pre></td></tr></table></figure>
<h2 id="Initializers"><a href="#Initializers" class="headerlink" title="Initializers"></a>Initializers</h2><h3 id="指定构造函数-amp-便利构造函数"><a href="#指定构造函数-amp-便利构造函数" class="headerlink" title="指定构造函数 &amp; 便利构造函数"></a>指定构造函数 &amp; 便利构造函数</h3><ul>
<li>指定构造函数<ul>
<li>指定构造函数仅且必须调用其父类的便利构造函数</li>
<li>在调用父类指定构造函数之前，本类引入的属性必须已经被初始化</li>
<li>在调用父类指定构造函数之后，本类继承的属性才能被初始化</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> propCA1: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> propCA2: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(propCA1: <span class="type">Int</span>, propCA2: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.propCA1 = propCA1</div><div class="line">        <span class="keyword">self</span>.propCA2 = propCA2</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> : <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> propCB: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(propCA1: <span class="type">Int</span>, propCA2: <span class="type">Int</span>, propCB: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.propCB = propCB</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(propCA1: propCA1, propCA2: propCA2)</div><div class="line">        <span class="keyword">self</span>.propCA2 = propCA2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>便利构造函数<ul>
<li>便利构造函数仅且必须调用一个其自身的 init</li>
<li>便利构造函数必须在设值前调用该 init</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> : <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> propCB: <span class="type">Int</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(propCA1: <span class="type">Int</span>, propCA2: <span class="type">Int</span>, propCB: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.propCB = propCB</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(propCA1: propCA1, propCA2: propCA2)</div><div class="line">        <span class="keyword">self</span>.propCA2 = propCA2</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">let</span> z = x + y</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(propCA1: z, propCA2: <span class="number">1</span>, propCB: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承构造函数-amp-必需构造函数"><a href="#继承构造函数-amp-必需构造函数" class="headerlink" title="继承构造函数 &amp; 必需构造函数"></a>继承构造函数 &amp; 必需构造函数</h3><ul>
<li>如果子类没有实现任何指定构造函数，那么该子类继承父类所有的指定构造函数。</li>
<li>如果子类重写父类所有的指定构造函数，那么该子类继承父类所有的便利构造函数。</li>
<li>如果子类没有实现构造函数，那么该子类将继承父类所有的构造函数。</li>
<li>必需构造函数需要在 <code>init</code> 前加上 <code>required</code>，其子类必须重写该构造方法。</li>
</ul>
<h3 id="可失败构造函数"><a href="#可失败构造函数" class="headerlink" title="可失败构造函数"></a>可失败构造函数</h3><p><code>init?()</code> 被称作可失败构造函数，其返回一个可选类型。例如 UIImage 的 <code>init?(named name: String)</code> 就是一个可失败构造函数。因为传入的 <code>name</code> 并不一定对应项目中的一张图片，所以当图片不存在即返回 nil。</p>
<h2 id="Any-amp-AnyObject"><a href="#Any-amp-AnyObject" class="headerlink" title="Any &amp; AnyObject"></a>Any &amp; AnyObject</h2><p>Any &amp; AnyObject 主要是为了兼容旧的 Objective-C 的 API。Any 可以保存任何类型，而 AnyObject 只能保存类。由于 Swift 是强类型语言，Any &amp; AnyObject 必须转换为具体的类型才能调用其中的方法或属性。当我们不需要调用者知道返回值的类型时，可以使用 Any。</p>
<h2 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h2><p>UserDefaults 是一个轻量级的微数据库，适合存储设置等，而不能存储较大的数据。UserDefaults 只能存储 Property List 数据，Property List 是 Array，Dictionary，String，Date，Data，Int 等的结合体，这是一个 Objective-C 的 API，使用 Any 类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="type">PI_ID</span> = <span class="string">"PI"</span></div><div class="line"><span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</div><div class="line">defaults.<span class="keyword">set</span>(<span class="number">3.14</span>, forKey: <span class="type">PI_ID</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> !defaults.synchronize() &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Failed!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">defaults.<span class="keyword">set</span>(<span class="literal">nil</span>, forKey: <span class="type">PI_ID</span>)</div><div class="line">defaults.double(forKey: <span class="type">PI_ID</span>)</div></pre></td></tr></table></figure>
<h2 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h2><p>Assert 即断言，是 Debug 的一种方法。可以在一些条件不为 <code>true</code> 时，崩溃程序并打印指定信息，来使得我们注意到。当我们构建 release 版本时，断言将被完全忽略。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当 validation() 返回 nil 时，断言触发，程序 crash 并打印 the validation function returned nil；当返回非 nil 时，则无影响</span></div><div class="line"><span class="built_in">assert</span>(validation() != <span class="literal">nil</span>, <span class="string">"the validation function returned nil"</span>)</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/kingcos/CS193P_2017" target="_blank" rel="external">CS193P_2017</a></li>
<li><a href="http://www.jianshu.com/p/ba12b64f6350" target="_blank" rel="external">Swift 中的值类型与引用类型</a></li>
<li><a href="http://www.jianshu.com/p/fe60f5bafab3" target="_blank" rel="external">浅谈 Swift 中的属性（Property）</a></li>
<li><a href="http://www.jianshu.com/p/94310202ba1b" target="_blank" rel="external">Swift 中的字符串截取</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Developing iOS 10 Apps with Swift - CS193p&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>在 Gradle 中使用 MyBatis Generator</title>
    <link href="https://maimieng.com/2017/11/"/>
    <id>https://maimieng.com/2017/11/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-02-05T09:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>在 Intellij IDEA 中结合 Gradle 使用 MyBatis Generator 逆向生成代码<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>JDK 1.8</li>
<li>Gradle 2.14</li>
<li>Intellij IDEA 2016.3</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于 IDEA 的教程较少，且 MyBatis Generator 不支持 Gradle 直接运行，因此这次是在自己折腾项目过程中，根据一些参考资料加上自己的实践得出的结论，并附上相应的 Demo 可供自己未来参考，也与大家分享。</p>
<p>本文的 Demo 也可以当作工具直接导入 IDEA，加上自己的数据库信息即可生成代码。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>详细的创建步骤可以参考<a href="http://www.jianshu.com/p/228a4c5e64be" target="_blank" rel="external">使用 Gradle 构建 Struts 2 Web 应用</a>中「新建 Gradle Web 项目」一节即可。当创建完毕，需要等待 Gradle 联网构建，由于国内网络因素，可能需要稍作等待。当构建完成，目录结构应如下图一致：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_01.png" alt="Gradle 构建完成"></p>
<h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>这里需要使用 MyBatis Generator，MySQL 驱动，以及 MyBatis Mapper。由于代码生成单独运行即可，不需要参与到整个项目的编译，因此在 build.gradle 中添加配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">configurations &#123;</div><div class="line">    mybatisGenerator</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <a href="http://mvnrepository.com/" target="_blank" rel="external">Maven Repository (http://mvnrepository.com/)</a> 分别搜索依赖：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_02.png" alt="org.mybatis.generator"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_03.png" alt="mysql-connector-java"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_04.png" alt="tk.mybatis:mapper"></p>
<p>依赖的版本并不是局限于某个特定版本，可以选择适时相应的更新版本。添加到 build.gradle 的 dependencies 中（注意前面需将「compile group:」改为 「mybatisGenerator」）：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.11'</span></div><div class="line"></div><div class="line">    mybatisGenerator <span class="string">'org.mybatis.generator:mybatis-generator-core:1.3.5'</span></div><div class="line">    mybatisGenerator <span class="string">'mysql:mysql-connector-java:5.1.40'</span></div><div class="line">    mybatisGenerator <span class="string">'tk.mybatis:mapper:3.3.9'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置数据库信息"><a href="#设置数据库信息" class="headerlink" title="设置数据库信息"></a>设置数据库信息</h2><p>在 resources 下，新建 mybatis 文件夹，并新建 config.properties 和 generatorConfig.xml，文件结构如下：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_05.png" alt="配置文件目录"></p>
<p>在 config.properties 中配置数据库和要生成的 Java 类的包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># JDBC 驱动类名</div><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line"># JDBC URL: jdbc:mysql:// + 数据库主机地址 + 端口号 + 数据库名</div><div class="line">jdbc.url=jdbc:mysql://</div><div class="line"># JDBC 用户名及密码</div><div class="line">jdbc.username=</div><div class="line">jdbc.password=</div><div class="line"></div><div class="line"># 生成实体类所在的包</div><div class="line">package.model=com.maimieng.model</div><div class="line"># 生成 mapper 类所在的包</div><div class="line">package.mapper=com.maimieng.mapper</div><div class="line"># 生成 mapper xml 文件所在的包，默认存储在 resources 目录下</div><div class="line">package.xml=mybatis</div></pre></td></tr></table></figure>
<h2 id="设置生成代码的配置文件"><a href="#设置生成代码的配置文件" class="headerlink" title="设置生成代码的配置文件"></a>设置生成代码的配置文件</h2><p>在 generatorConfig.xml 中配置数据库表信息，可以参考官方的文档（附在文末）来进行配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;driverClass&#125;"</span></span></div><div class="line">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;connectionURL&#125;"</span></div><div class="line">                        <span class="attr">userId</span>=<span class="string">"$&#123;userId&#125;"</span></div><div class="line">                        <span class="attr">password</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;modelPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_java&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;sqlMapperPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_resources&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;mapperPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;src_main_java&#125;"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- sql占位符，表示所有的表 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"%"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"epa_id"</span> <span class="attr">sqlStatement</span>=<span class="string">"Mysql"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Gradle-设置-Ant-Task"><a href="#Gradle-设置-Ant-Task" class="headerlink" title="Gradle 设置 Ant Task"></a>Gradle 设置 Ant Task</h2><p>由于 MyBatis Generator 尚不支持 Gradle，所以只能使用 Gradle 来执行 Ant Task，达到相同的效果。</p>
<p>build.gradle:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> getDbProperties = &#123;</div><div class="line">    <span class="keyword">def</span> properties = <span class="keyword">new</span> Properties()</div><div class="line">    file(<span class="string">"src/main/resources/mybatis/jdbc.properties"</span>).withInputStream &#123; inputStream -&gt;</div><div class="line">        properties.load(inputStream)</div><div class="line">    &#125;</div><div class="line">    properties</div><div class="line">&#125;</div><div class="line"></div><div class="line">task mybatisGenerate &lt;&lt; &#123;</div><div class="line">    <span class="keyword">def</span> properties = getDbProperties()</div><div class="line">    ant.properties[<span class="string">'targetProject'</span>] = projectDir.path</div><div class="line">    ant.properties[<span class="string">'driverClass'</span>] = properties.getProperty(<span class="string">"jdbc.driverClassName"</span>)</div><div class="line">    ant.properties[<span class="string">'connectionURL'</span>] = properties.getProperty(<span class="string">"jdbc.url"</span>)</div><div class="line">    ant.properties[<span class="string">'userId'</span>] = properties.getProperty(<span class="string">"jdbc.username"</span>)</div><div class="line">    ant.properties[<span class="string">'password'</span>] = properties.getProperty(<span class="string">"jdbc.password"</span>)</div><div class="line">    ant.properties[<span class="string">'src_main_java'</span>] = sourceSets.main.java.srcDirs[<span class="number">0</span>].path</div><div class="line">    ant.properties[<span class="string">'src_main_resources'</span>] = sourceSets.main.resources.srcDirs[<span class="number">0</span>].path</div><div class="line">    ant.properties[<span class="string">'modelPackage'</span>] = properties.getProperty(<span class="string">"package.model"</span>)</div><div class="line">    ant.properties[<span class="string">'mapperPackage'</span>] = properties.getProperty(<span class="string">"package.mapper"</span>)</div><div class="line">    ant.properties[<span class="string">'sqlMapperPackage'</span>] = properties.getProperty(<span class="string">"package.xml"</span>)</div><div class="line">    ant.taskdef(</div><div class="line"><span class="symbol">            name:</span> <span class="string">'mbgenerator'</span>,</div><div class="line"><span class="symbol">            classname:</span> <span class="string">'org.mybatis.generator.ant.GeneratorAntTask'</span>,</div><div class="line"><span class="symbol">            classpath:</span> configurations.mybatisGenerator.asPath</div><div class="line">    )</div><div class="line">    ant.mbgenerator(<span class="string">overwrite:</span> <span class="literal">true</span>,</div><div class="line"><span class="symbol">            configfile:</span> <span class="string">'src/main/resources/mybatis/generatorConfig.xml'</span>, <span class="string">verbose:</span> <span class="literal">true</span>) &#123;</div><div class="line">        propertyset &#123;</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'targetProject'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'userId'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'driverClass'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'connectionURL'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'password'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'src_main_java'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'src_main_resources'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'modelPackage'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'mapperPackage'</span>)</div><div class="line">            propertyref(<span class="string">name:</span> <span class="string">'sqlMapperPackage'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置好 build.gradle，就可以在 IDEA 的 Gradle 菜单中找到新的 Task：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_06.png" alt="mybatisGenerate"></p>
<p>如果这里没有，可能是 Gradle 没有 build，重新刷新即可：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_07.png" alt="Refresh all Gradle projects"></p>
<p>双击「mybatisGenerate」即可运行，如果配置正确即可运行成功：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/gradle_mybatis_generator_08.png" alt="成功生成代码"></p>
<p>注：这里我在 generatorConfig.xml 配置选择的是按注解映射，因此没有 xml 文件生成。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的 Demo 您可以在 <a href="https://github.com/kingcos/MyBatisGenerator-Tool" target="_blank" rel="external">https://github.com/kingcos/MyBatisGenerator-Tool</a> 下载查看。Demo 本身也可作为工具来生成代码。由于目前正在完善一个 Android + Java Web 的小系统，因此未来可能还会更新 Spring Boot、Druid、Swagger 的配置脚手架。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="external">MyBatis Generator</a></li>
<li><a href="https://github.com/abel533/Mapper" target="_blank" rel="external">abel533/Mapper</a></li>
<li><a href="http://git.oschina.net/free/Mapper/blob/master/wiki/mapper3/7.UseMBG.md" target="_blank" rel="external">使用 Mapper 专用的 MyBatis Generator 插件</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;在 Intellij IDEA 中结合 Gradle 使用 MyBatis Generator 逆向生成代码&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://maimieng.com/tags/Java/"/>
    
      <category term="Gradle" scheme="https://maimieng.com/tags/Gradle/"/>
    
      <category term="Intellij IDEA" scheme="https://maimieng.com/tags/Intellij-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>「周记」梦</title>
    <link href="https://maimieng.com/2017/10/"/>
    <id>https://maimieng.com/2017/10/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-02-02T07:23:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>I Dreamed About U Last Night.<br></blockquote><br><a id="more"></a></p>
<p>寒假已经过去一半，还剩不到 20 天。这半个寒假写了三篇文章，更了一篇翻译，作了三篇周记，项目结构也刚刚分析完成。</p>
<p>这，算是第四篇周记了。总得来说，这个寒假并不如以往那样荒废，因为至少是有一些收获的。虽然不一定能完成所有的计划，但有所完成也不至于荒废。</p>
<p>真的是慨叹时间流逝之快，剩下这几个月，也希望不要太荒废。做一些自己想做的事情吧。</p>
<p>最近过年，家里也出了不少事情。说热闹也热闹，说吵也吵。总之希望自己「不要因为自卑而自傲」，而无法听见别人的声音。相信自己没有错，但是也要相信别人，不能太过于直接的贬低他人，拒绝他人，而是耐心听听别人的声音。</p>
<p>今天也给自己和父母各买了一份意外保险。对于保险，自己之前并没有过多了解，但是也没有说认为其完全是坑人的。从今年往后，可能自己要承担更多的责任，因此保险也是对自己和家人的负责吧。</p>
<p>今天看 V2 的现实性的帖子，「彩礼钱要命啊」。爱情是两个人的，而婚姻却是两个家庭的。看完一个个回帖，心里真的是很乱，有些事真的不是我所想象得那么简单。其实我有比较大的出国的意向，虽然没说过，但是至少现在身边圈子的人大多接受不了，就更别提他们的父母辈了。</p>
<blockquote>
<p>昨晚，梦到你了。梦到你让我很开心，因为又见到了你；梦醒了却又悲伤，因为你并没有见到我。你告诉了我 FAVOR &amp; LIKE 的区别，但却没告诉我什么是 LIKE。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;I Dreamed About U Last Night.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Weekly Journal" scheme="https://maimieng.com/tags/Weekly-Journal/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的 Selector</title>
    <link href="https://maimieng.com/2017/9/"/>
    <id>https://maimieng.com/2017/9/</id>
    <published>2017-01-30T16:00:00.000Z</published>
    <updated>2017-01-31T19:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Selectors in Swift<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
<li>macOS 10.12.4 beta (16E144f)</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是大年初四（捂脸：提笔的时候是初一），总算过农历新年了，总算可以歇一歇了。越来越感慨时间过得飞快，计划总是赶不上变化。寒假倒计时 20 天，却有很多事都还没有完成。。</p>
<p>常用纯代码来开发的同学都应该比较熟悉这个方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTarget</span><span class="params">(<span class="number">_</span> target: Any?, action: Selector, <span class="keyword">for</span> controlEvents: UIControlEvents)</span></span></div></pre></td></tr></table></figure>
<p>Selector 源自 Objective-C，例如 SEL 类型，以及 <code>@selector()</code> 方法选择器。Swift 中也兼容了这个概念，不过随着 Swift 的迭代，Selector 的一些写法也出现了很大的变化。比较遗憾的是，官方文档对于 Selector 没有介绍。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/swift_selector_01.png" alt="Selector in Xcode Documentation &amp; API Reference"></p>
<p>因此只能自己总结一下 Swift 3.0 中的 Selector，便有利于自己理解，也便于以后的参考。注：以下 Demo 中的 cyanButton 是用 StoryBoard 拖拽的。</p>
<h2 id="Selector-类型"><a href="#Selector-类型" class="headerlink" title="Selector 类型"></a>Selector 类型</h2><p>Swift 中的 Selector 类型其实就是 Objective-C 中的 SEL 类型。在 Swift 中，Selector 的本质是结构体。常用的构造 Selector 类型变量的方法有以下几种：</p>
<ul>
<li><code>public init(_ str: String)</code></li>
</ul>
<p>类似 Objective-C 中的 <code>NSSelectorFromString</code>，Swift 中的 Selector 也可以使用字符串来构造：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                         action: <span class="type">Selector</span>(<span class="string">"cyanButtonClick"</span>),</div><div class="line">                         <span class="keyword">for</span>: .touchUpInside)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>#selector()</code></li>
</ul>
<p>通过字符串构造 Selector 变量是一种方法，但是当在上例中 Xcode 会提示这样的警告：「Use ‘#selector’ instead of explicitly constructing a ‘Selector’」。即使用 <code>#selector()</code> 代替字符串明确构造 Selector。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                         action: #selector(<span class="type">ViewController</span>.cyanButtonClick),</div><div class="line">                         <span class="keyword">for</span>: .touchUpInside)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#selector()</code> 的好处是不再需要使用字符串来构造。因为当使用字符串构造时，若传入的字符串没有对应的方法名，那么程序在执行时就会直接崩溃：「unrecognized selector sent to instance」。</p>
<p>若当前作用域构造 Selector 的方法名<strong>唯一</strong>时，可以直接使用方法名，而省略作用域。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                     action: #selector(cyanButtonClick),</div><div class="line">                     <span class="keyword">for</span>: .touchUpInside)</div></pre></td></tr></table></figure>
<p>若是 Swift 中的私有方法，则必须赋予其 Objective-C 的 runtime（运行时）。即在方法名前加上 <code>@objc</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> anotherCyanButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                         action: #selector(<span class="type">ViewController</span>.cyanButtonClick(<span class="number">_</span>:)),</div><div class="line">                         <span class="keyword">for</span>: .touchUpInside)</div><div class="line"></div><div class="line">    <span class="comment">// 当前作用域 cyanButtonClick 存在冲突，不能直接使用方法名</span></div><div class="line">    <span class="comment">//「Ambiguous use of 'cyanButtonClick'」</span></div><div class="line">    <span class="comment">// anotherCyanButton.addTarget(self,</span></div><div class="line">                                action: #selector(cyanButtonClick),</div><div class="line">                                <span class="keyword">for</span>: .touchUpInside)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 无参方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 有参私有方法</span></div><div class="line"><span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">(<span class="number">_</span> button: UIButton)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> btnLabel = button.titleLabel?.text ?? <span class="string">"nil"</span></div><div class="line">    <span class="built_in">print</span>(btnLabel)</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当遇到上述存在歧义的相同方法名时，也可以使用<strong>强制类型转换</strong>来解决：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> anotherCyanButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> methodA = #selector(cyanButtonClick <span class="keyword">as</span> () -&gt; ())</div><div class="line">    <span class="keyword">let</span> methodB = #selector(cyanButtonClick <span class="keyword">as</span> (<span class="type">UIButton</span>) -&gt; ())</div><div class="line"></div><div class="line">    cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                         action: methodA,</div><div class="line">                         <span class="keyword">for</span>: .touchUpInside)</div><div class="line">    anotherCyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                                action: methodB,</div><div class="line">                                <span class="keyword">for</span>: .touchUpInside)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">(<span class="number">_</span> button: UIButton)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> btnLabel = button.titleLabel?.text ?? <span class="string">"nil"</span></div><div class="line">    <span class="built_in">print</span>(btnLabel)</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>#selector()</code> &amp; <code>Seletcor(&quot;&quot;)</code></li>
</ul>
<p>通过上面的 Demo，也可以看出 <code>#selector()</code> 更加安全、清晰，但是 <code>Seletcor(&quot;&quot;)</code> 并不是一无是处。当我们需要调用标准库中的私有方法时，只能通过字符串来构造。</p>
<p>为了方便测试，此处自定义了一个 <code>CustomViewController</code>。其中带有私有方法：<code>@objc private func privateFunc()</code> 以及 <code>func defaultFunc()</code>。此处使用的 <code>ViewController</code> 继承自 <code>CustomViewController</code>：</p>
<p>CustomViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">privateFunc</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">defaultFunc</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">CustomViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> anotherCyanButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                             action: #selector(defaultFunc),</div><div class="line">                             <span class="keyword">for</span>: .touchUpInside)</div><div class="line">        anotherCyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                                    action: <span class="type">Selector</span>(<span class="string">"privateFunc"</span>),</div><div class="line">                                    <span class="keyword">for</span>: .touchUpInside)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为父类的私有方法对子类来说是不可见的，直接使用 <code>#selector()</code> 无法通过编译，但这个方法确实存在，所以这里只能使用字符串来构造 Selector。</p>
<p>当然这里 Xcode 会提示警告，但仍然可以编译通过并运行，所以这并不是官方提倡的行为。这是我在将系统边缘返回改写全屏返回时，发现私有的 <code>handleNavigationTransition:</code> 方法不能通过 <code>#selector()</code>，因此使用了字符串代替。</p>
<h2 id="Syntax-Sugar"><a href="#Syntax-Sugar" class="headerlink" title="Syntax Sugar"></a>Syntax Sugar</h2><p>配合 Swift 的 Extension，可以使用其管理当前控制器的所有 Selector：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line">fileprivate <span class="class"><span class="keyword">extension</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> redButtonClick = #selector(<span class="type">ViewController</span>.redButtonClick(<span class="number">_</span>:))</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> cyanButtonClick = #selector(<span class="type">ViewController</span>.cyanButtonClick)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">CustomViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> cyanButton: <span class="type">UIButton</span>!</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> redButton: <span class="type">UIButton</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        cyanButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                             action: .cyanButtonClick,</div><div class="line">                             <span class="keyword">for</span>: .touchUpInside)</div><div class="line">        redButton.addTarget(<span class="keyword">self</span>,</div><div class="line">                                    action: .redButtonClick,</div><div class="line">                                    <span class="keyword">for</span>: .touchUpInside)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cyanButtonClick</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">redButtonClick</span><span class="params">(<span class="number">_</span> button: UIButton)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> btnLabel = button.titleLabel?.text ?? <span class="string">"nil"</span></div><div class="line">        <span class="built_in">print</span>(btnLabel)</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="getter-amp-setter"><a href="#getter-amp-setter" class="headerlink" title="getter &amp; setter"></a>getter &amp; setter</h2><p>Swift 3.0 中加入了 Selector 引用变量（不可为常量）的 getter 和 setter 方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">let</span> lastName: <span class="type">String</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> fullName: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(firstName) \(lastName)"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.firstName = firstName</div><div class="line">        <span class="keyword">self</span>.lastName = lastName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">fileprivate <span class="class"><span class="keyword">extension</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> firstNameGetter = #selector(getter: <span class="type">Person</span>.firstName)</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> firstNameSetter = #selector(setter: <span class="type">Person</span>.firstName)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_26" target="_blank" rel="external">Using Swift with Cocoa and Objective-C (Swift 3.0.1)</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" target="_blank" rel="external">SE-0022</a></li>
<li><a href="http://swifter.tips/selector/" target="_blank" rel="external">SELECTOR</a></li>
<li><a href="https://medium.com/swift-programming/swift-selector-syntax-sugar-81c8a8b10df3#.pkwxpy65w" target="_blank" rel="external">Swift: Selector Syntax Sugar</a></li>
<li><a href="http://swift.gg/2016/06/02/swift-selector-syntax-sugar/" target="_blank" rel="external">Swift：Selector 语法糖</a></li>
<li><a href="http://swiftandpainless.com/selector-and-the-responder-chain/" target="_blank" rel="external">#selector() and the responder chain</a></li>
<li><a href="http://swift.gg/2016/04/20/selector-and-the-responder-chain/" target="_blank" rel="external">#selector() 和响应链</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md" target="_blank" rel="external">SE-0064</a></li>
<li><a href="http://www.jianshu.com/p/70ef96704f4e" target="_blank" rel="external">Swift 3必看：#selector获取属性的getter和setter方法</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Selectors in Swift&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>「周记」小幸运</title>
    <link href="https://maimieng.com/2017/8/"/>
    <id>https://maimieng.com/2017/8/</id>
    <published>2017-01-25T16:00:00.000Z</published>
    <updated>2017-01-26T16:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>也许当时忙着微笑和哭泣<br>忙着追逐天空中的流星<br>人理所当然的忘记<br></blockquote><br><a id="more"></a><br>由于快过年了，每天要回家帮家里的忙，所以这几天电脑打开的频率也少了。因此要更新的几篇文章也没有时间和精力整理，要学的课也没看，要重构的 App 也就先只做了个登录注册界面。倒是每天的运动量都达标了，因为每天往返一共要骑行 17 公里左右。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/weekly_journal_03_01.PNG" alt="户外单车"></p>
<p>这快两周时间，在前几天更新了两篇关于 iOS 开发的文章，很高兴的是收到了有史以来的第一笔打赏。倒不是因为钱的关系，而是觉得收到了肯定。很神奇的是，在我收到打赏的前一天，我打赏了 stormzhang，并给了他留言，张哥还回复我让我坚持下去。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/weekly_journal_03_02.PNG" alt="第一次收到打赏"></p>
<p>在第二天收到打赏之后，又收到了来自张哥的新年祝福，我便也回复了他。没想到的是张哥又一次回复了我，因为我知道张哥的粉丝数量级是很大的，如果每个人都和他继续发起对话，会占用他很多时间。而我也是出于感激才回复的他，没想到他还是那么认真的回复了我。因此我也决定以后每天登录公众号平台，看看有谁给我留言，我也会去尽力回复。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/weekly_journal_03_03.PNG" alt="张哥的再次回复"></p>
<p>在 1 月 20 日，特朗普就职美国总统，我也去找了他的就职演讲，并翻译给了大家。很高兴的是，微信公众号终于有了 100 位粉丝，虽然那篇文章的阅读量到现在只有 15 个人，3 个赞。但我也知足了，毕竟停更了至少三四个月，我会再思考公众号的定位，方便大家的学习。另外网易云的固步自封和糟糕的体验也让我很不爽，所以想慢慢将重心转到公众号。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/weekly_journal_03_04.PNG" alt="公众号的粉丝数突破两位数"></p>
<p>时间过得太快了，2 月中旬开学，只剩下半个月左右的时间。而我要做的事还有很多，计划总是赶不上变化。过年虽然热闹，但又越发觉得无趣。开学之后，我自己又想抽空来玩一玩硬件，准备为自己未来合租的房间搭建一套智能家居。目标是 Home Kit 控制，希望可以折腾下，也会将心得、经验分享出来。</p>
<blockquote>
<p>What’s the difference among FAVOR, LIKE &amp; LOVE?</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;也许当时忙着微笑和哭泣&lt;br&gt;忙着追逐天空中的流星&lt;br&gt;人理所当然的忘记&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Weekly Journal" scheme="https://maimieng.com/tags/Weekly-Journal/"/>
    
  </entry>
  
  <entry>
    <title>「翻译」2017.1.20 Donald Trump 就职美国总统演讲</title>
    <link href="https://maimieng.com/2017/7/"/>
    <id>https://maimieng.com/2017/7/</id>
    <published>2017-01-20T16:00:00.000Z</published>
    <updated>2017-02-08T17:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>The Inauguration of the 45th President of the United States<br></blockquote><br><a id="more"></a><br>CHIEF JUSTICE ROBERTS, PRESIDENT CARTER, PRESIDENT CLINTON, PRESIDENT BUSH, PRESIDENT OBAMA, FELLOW AMERICANS, AND PEOPLE OF THE WORLD, THANK YOU.</p>
<p>首席法官 Roberts，Carter 总统，Clinton 总统，Bush 总统，Obama 总统，美利坚同胞，以及全世界人民，谢谢你们。</p>
<p>WE, THE CITIZENS OF AMERICA, ARE NOW JOINED IN A GREAT NATIONAL EFFORT TO REBUILD OUR COUNTRY AND RESTORE ITS PROMISE FOR ALL OF OUR PEOPLE.</p>
<p>我们，美利坚的公民，现在正加入一项伟大的事业，来重建我们的国家，并恢复为所有我们的人民所作出的承诺。</p>
<p>TOGETHER, WE WILL DETERMINE THE COURSE OF AMERICA AND THE WORLD FOR MANY, MANY YEARS TO COME.</p>
<p>我们团结一致，将决定多年之后的美利坚以及世界的走向。</p>
<p>WE WILL FACE CHALLENGES.</p>
<p>我们将面对挑战。</p>
<p>WE WILL CONFRONT HARDSHIPS.  </p>
<p>我们将面临困境。</p>
<p>BUT WE WILL GET THE JOB DONE.</p>
<p>但我们终将完成使命。</p>
<p>EVERY FOUR YEARS, WE GATHER ON THESE STEPS TO CARRY OUT THE ORDERLY AND PEACEFUL TRANSFER OF POWER.</p>
<p>每四年，我们会进行这些步骤去将权力有序且和平的转交。</p>
<p>AND WE ARE GRATEFUL TO PRESIDENT OBAMA AND FIRST LADY MICHELLE OBAMA FOR THEIR GRACIOUS AID THROUGHOUT THIS TRANSITION.</p>
<p>而且我们感激 Obama 总统和 Michelle Obama 第一夫人在转交过程中的亲切帮助。</p>
<p>THEY HAVE BEEN MAGNIFICENT.</p>
<p>他们是伟大的。</p>
<p>THANK YOU.</p>
<p>感谢你们。</p>
<p>TODAY’S CEREMONY, HOWEVER, HAS VERY SPECIAL MEANING BECAUSE TODAY WE ARE NOT MERELY TRANSFERRING POWER FROM ONE ADMINISTRATION TO ANOTHER, OR FROM ONE PARTY TO ANOTHER.</p>
<p>但是，今天的仪式有着非常特殊的意义，因为今天我们不只是将权力从一个政府转交另一个，也不是从一个党派转交到另一个。</p>
<p>BUT WE ARE TRANSFERRING POWER FROM WASHINGTON, D.C. AND GIVING IT BACK TO YOU, THE PEOPLE.  </p>
<p>而是我们将权利从华盛顿首府转出，并将其归还于你们，人民。</p>
<p>FOR TOO LONG, A SMALL GROUP IN OUR NATION’S CAPITAL HAS REAPED THE REWARDS OF GOVERNMENT, WHILE THE PEOPLE HAVE BORNE THE COST.  </p>
<p>长久以来，我们国家首府的一小撮人收割了政府的赏金，而人民却承担着代价。</p>
<p>WASHINGTON FLOURISHED, BUT THE PEOPLE DID NOT SHARE IN ITS WEALTH.  </p>
<p>华盛顿富贵了，而人民却没有共享它的荣华。</p>
<p>POLITICIANS PROSPERED, BUT THE JOBS LEFT AND THE FACTORIES CLOSED.  </p>
<p>政客们赚的盆满钵满，而工作岗位流失，工厂面临倒闭。</p>
<p>THE ESTABLISHMENT PROTECTED ITSELF, BUT NOT THE CITIZENS OF OUR COUNTRY.</p>
<p>权势集团保护的是自身，而不是我们国家的公民。</p>
<p>THEIR VICTORIES HAVE NOT BEEN YOUR VICTORIES.</p>
<p>那是他们的成功，并不是你们的成功。</p>
<p>THEIR TRIUMPHS HAVE NOT BEEN YOUR TRIUMPHS, AND WHILE THEY CELEBRATED IN OUR NATION’S CAPITAL, THERE WAS LITTLE TO CELEBRATE FOR STRUGGLING FAMILIES ALL ACROSS OUR LAND.</p>
<p>那是他们的胜利，并不是你们的胜利，而且虽然他们在首府庆祝，但那根本不值得庆祝，因为我们的国土上还有许多的贫困家庭。</p>
<p>THAT ALL CHANGES STARTING RIGHT HERE, AND RIGHT NOW, BECAUSE THIS MOMENT IS YOUR MOMENT.  </p>
<p>这些都将在此刻此处改变，因为此刻正是你们的时刻。</p>
<p>IT BELONGS TO YOU.  </p>
<p>这一刻属于你们。</p>
<p>IT BELONGS TO EVERYONE GATHERED HERE TODAY, AND EVERYONE WATCHING ALL ACROSS AMERICA.  </p>
<p>这一刻属于每一个聚集在这里的人，以及美国每个角落的每一个正关注这里的人。</p>
<p>THIS IS YOUR DAY.  </p>
<p>这是你们的日子。</p>
<p>THIS IS YOUR CELEBRATION.  </p>
<p>这是你们的庆典。</p>
<p>AND THIS, THE UNITED STATES OF AMERICA, IS YOUR COUNTRY.  </p>
<p>而这里，美利坚合众国，是你们的国家。</p>
<p>WHAT TRULY MATTERS IS NOT WHICH PARTY CONTROLS OUR GOVERNMENT, BUT WHETHER OUR GOVERNMENT IS CONTROLLED BY THE PEOPLE.  </p>
<p>真正重要的不是哪个党派执政，而是我们的政府是否由人民掌控。</p>
<p>JANUARY 20TH, 2017 WILL BE REMEMBERED AS THE DAY THE PEOPLE BECAME THE RULERS OF THIS NATION AGAIN.  </p>
<p>2017 年 1 月 20 日将被铭记，因为今天人民又一次当家作主。</p>
<p>THE FORGOTTEN MEN AND WOMEN OF OUR COUNTRY WILL BE FORGOTTEN NO LONGER.  </p>
<p>那些我们国家的被遗忘的男男女女将不再被遗忘。</p>
<p>EVERYONE IS LISTENING TO YOU NOW.</p>
<p>此刻，每个人都将聆听你们。</p>
<p>YOU CAME BY THE TENS OF MILLIONS TO BECOME PART OF A HISTORIC MOVEMENT, THE LIKES OF WHICH THE WORLD HAS NEVER SEEN BEFORE.  </p>
<p>数千万人组成的你们将成为历史性运动的一部分，这将是世界上从未目睹的历史性运动。</p>
<p>AT THE CENTER OF THIS MOVEMENT IS A CRUCIAL CONVICTION, THAT A NATION EXISTS TO SERVE ITS CITIZENS.  </p>
<p>这场运动的核心是一个关键信念，即一个国家的存在意义便是为了服务于其公民。</p>
<p>AMERICANS WANT GREAT SCHOOLS FOR THEIR CHILDREN, SAFE NEIGHBORHOODS FOR THEIR FAMILIES, AND GOOD JOBS FOR THEMSELVES.</p>
<p>美国人希望他们的孩子可以在杰出的学校读书，希望他们的家人拥有安全的邻居，希望自己有一份好的工作。</p>
<p>THESE ARE JUST AND REASONABLE DEMANDS OF RIGHTEOUS PEOPLE AND A RIGHTEOUS PUBLIC.  </p>
<p>这些都是正直的人们和正直的公众提出的公正且合理的要求。</p>
<p>BUT FOR TOO MANY OF OUR CITIZENS, A DIFFERENT REALITY EXISTS.</p>
<p>但对于太多的公民来说，现实却大相径庭。</p>
<p>MOTHERS AND CHILDREN TRAPPED IN POVERTY IN OUR INNER CITIES, RUSTED OUT FACTORIES SCATTERED LIKE TOMBSTONES ACROSS THE LANDSCAPE OF OUR NATION.  </p>
<p>在我们的内部城市，贫穷困住母亲和孩子，在我们国家的各处，都分散着像墓碑一样的生锈的工厂。</p>
<p>AND EDUCATION SYSTEM FLUSH WITH CASH BUT WHICH LEAVES OUR YOUNG AND BEAUTIFUL STUDENTS DEPRIVED OF ALL KNOWLEDGE.  </p>
<p>而教育体系资金充裕，但却让我们风华正茂的学生被剥夺知识。</p>
<p>AND THE CRIME, AND THE GANGS, AND THE DRUGS THAT HAVE STOLEN TOO MANY LIVES AND ROBBED OUR COUNTRY OF SO MUCH UNREALIZED POTENTIAL.</p>
<p>而罪犯，枪支，和毒品，夺去了太多的生命，也抢走了我们国家太多未实现的潜能。</p>
<p>THIS AMERICAN CARNAGE STOPS RIGHT HERE AND STOPS RIGHT NOW.</p>
<p>这些美国的惨剧将止于此时此地。</p>
<p>WE ARE ONE NATION, AND THERE PAIN IS OUR PAIN.</p>
<p>我们同属一个国家，他们的痛苦就是我们的痛苦。</p>
<p>THEIR DREAMS ARE OUR DREAMS, AND THEIR SUCCESS WILL BE OUR SUCCESS.  </p>
<p>他们的梦想就是我们的梦想，而他们的成功也将是我们的成功。</p>
<p>WE SHARE ONE HEART, ONE HOME, AND ONE GLORIOUS DESTINY.</p>
<p>我们同享一心，同享一家，同享一个光荣的使命。</p>
<p>THE OATH OF OFFICE I TAKE TODAY IS AN OATH OF ALLEGIANCE TO ALL AMERICANS.  </p>
<p>今天我的宣誓就职是向所有美国人宣誓忠心。</p>
<p>FOR MANY DECADES WE’VE ENRICHED FOREIGN INDUSTRY AT THE EXPENSE OF AMERICAN INDUSTRY, SUBSIDIZED THE ARMIES OF OTHER COUNTRIES WHILE ALLOWING FOR THE VERY SAD DEPLETION OF OUR MILITARY.  </p>
<p>数十年来，我们用美国工业的代价振兴了外国的工业，补贴其他国家的军队而给我们的军队带来非常严重的损害。</p>
<p>WE’VE DEFENDED OTHER NATIONS’ BORDERS WHILE REFUSING TO DEFEND OUR OWN.  </p>
<p>我们保卫其他国家的边界而拒绝保卫自己。</p>
<p>AND WE’VE SPENT TRILLIONS AND TRILLIONS OF DOLLARS OVERSEAS WHILE AMERICA’S INFRASTRUCTURE HAS FALLEN INTO DISREPAIR AND DECAY.</p>
<p>而我们已经在海外花费了上万亿美元，而美国的基础设施已经陷入破烂不堪的境地。</p>
<p>WE’VE MADE OTHER COUNTRIES RICH, WHILE THE WEALTH, STRENGTH AND CONFIDENCE OF OUR COUNTRY HAS DISSIPATED OVER THE HORIZON.  </p>
<p>我们使得其他国家富裕起来，而我们国家的财富，力量，和自信却已消失在地平线上。</p>
<p>ONE BY ONE, THE FACTORIES SHUTTERED AND LEFT OUR SHORES, WITH NOT EVEN A THOUGHT ABOUT THE MILLIONS AND MILLIONS OF AMERICAN WORKERS THAT WERE LEFT BEHIND.</p>
<p>一个接一个的，工厂关闭并离开我们的海岸，甚至没有想过背后数以百万计的美国工人。</p>
<p>THE WEALTH OF OUR MIDDLE CLASS HAS BEEN RIPPED FROM THEIR HOMES, AND THEN REDISTRIBUTED ALL ACROSS THE WORLD.</p>
<p>我们中产阶级的财富从他们的家中被瓜分，并重新分配到全世界。</p>
<p>BUT THAT IS THE PAST, AND NOW WE ARE LOOKING ONLY TO THE FUTURE.</p>
<p>但这将成为过去，而现在我们将只着眼于未来。</p>
<p>WE ASSEMBLED HERE TODAY ARE ISSUING A NEW DECREE TO BE HEARD IN EVERY CITY, IN EVERY FOREIGN CAPITAL, AND IN EVERY HALL OF POWER.  </p>
<p>今天我们聚集于此将颁发一项新的法令，来让每个城市，每个外国首都，以及每个权力府第都能听到。</p>
<p>FROM THIS DAY FORWARD, A NEW VISION WILL GOVERN OUR LAND.</p>
<p>从今天起，一个新的视角将统领我们的国土。</p>
<p>FROM THIS DAY FORWARD IT’S GOING TO BE ONLY AMERICA FIRST, AMERICA FIRST.</p>
<p>从今天起将只有美国优先，美国优先。</p>
<p>EVERY DECISION ON TRADE, ON TAXES, ON IMMIGRATION, ON FOREIGN AFFAIRS, WILL BE MADE TO BENEFIT AMERICAN WORKERS AND AMERICAN FAMILIES.</p>
<p>每一个关于贸易、税收、移民、外国事务的决定，将受益于美国工人和美国家庭。  </p>
<p>WE MUST PROTECT OUR BORDERS FROM THE RAVAGES OF OTHER COUNTRIES MAKING OUR PRODUCTS, STEALING OUR COMPANIES, AND DESTROYING OUR JOBS.  </p>
<p>我们必须保护我们的边境不受其他国家掠夺：制造我们的产品，盗窃我们的公司，并破坏我们的工作岗位。</p>
<p>PROTECTION WILL LEAD TO GREAT PROSPERITY AND STRENGTH.  </p>
<p>这些保护将带来伟大的繁荣和富强。</p>
<p>I WILL FIGHT FOR YOU WITH EVERY BREATH IN MY BODY, AND I WILL NEVER, EVER LET YOU DOWN.  </p>
<p>我将尽所有力气为你们争取，并绝不、从不让你失望。</p>
<p>AMERICA WILL START WINNING AGAIN, WINNING LIKE NEVER BEFORE.  </p>
<p>美利坚将再次迎来胜利，前所未有的胜利。</p>
<p>WE WILL BRING BACK OUR JOBS, WE WILL BRING BACK OUR BORDERS, WE WILL BRING BACK OUR WEALTH, AND WE WILL BRING BACK OUR DREAMS.  </p>
<p>我们将找回工作岗位，我们将找回界限，我们将找回财富，我们将带回梦想。</p>
<p>WE WILL BUILD NEW ROADS AND HIGHWAYS AND BRIDGES AND AIRPORTS AND TUNNELS AND RAILWAYS, ALL ACROSS OUR WONDERFUL NATION.  </p>
<p>我们将修建新的道路、高速公路、桥梁、机场、隧道、以及铁轨，遍及我们伟大的祖国。</p>
<p>WE WILL GET OUR PEOPLE OFF OF WELFARE AND BACK TO WORK, REBUILDING OUR COUNTRY WITH AMERICAN HANDS AND AMERICAN LABOR.</p>
<p>我们将让我们的人民不再依赖福利并回到工作，用美国人的双手和劳动力来重建我们的国家。</p>
<p>WE WILL FOLLOW TWO SIMPLE RULES.</p>
<p>我们将遵守两项基本的原则。</p>
<p>BUY AMERICAN AND HIRE AMERICAN.</p>
<p>购买美国制造，以及雇佣美国人。</p>
<p>WE WILL SEEK FRIENDSHIP AND GOODWILL WITH THE NATIONS OF THE WORLD, BUT WE DO SO WITH THE UNDERSTANDING THAT IT IS THE RIGHT OF ALL NATIONS TO PUT THEIR OWN INTERESTS FIRST.  </p>
<p>我们将同世界上的其他国家寻求友谊和美好，但是我们将带着对「将自己的利益置于首位是所有国家的权利」的理解去做。</p>
<p>WE DO NOT SEEK TO IMPOSE OUR WAY OF LIFE ON ANYONE, BUT RATHER TO LET IT SHINE AS AN EXAMPLE, WE WILL SHINE FOR EVERYONE TO FOLLOW.  </p>
<p>我们不会将自己的生存方式强加于任何人之上，但会使其作为榜样发光，我们将照耀每个去追随的人。</p>
<p>WE WILL RE-ENFORCE OLD ALLIANCES AND FORM NEW ONES, AND UNITE THE CIVILIZED WORLD AGAINST RADICAL ISLAMIC TERRORISM, WHICH WE WILL ERADICATE COMPLETELY FROM THE FACE OF THE EARTH!  </p>
<p>我们将强化旧的盟友，建立新的盟友，并团结文明世界，以对抗激进的伊斯兰恐怖主义，我们将把他们从地球表面完全根除！</p>
<p>AT THE BEDROCK OF OUR POLITICS WILL BE A TOTAL ALLEGIANCE TO THE UNITED STATES OF AMERICA AND THROUGH OUR LOYALTY TO OUR COUNTRY WE WILL REDISCOVER OUR LOYALTY TO EACH OTHER.  </p>
<p>我们的政治根基将是完全效忠于美利坚合众国，并通过对祖国的忠心，我们将重现找回对彼此的忠心。</p>
<p>WHEN YOU OPEN YOUR HEART TO PATRIOTISM, THERE IS NO ROOM FOR PREJUDICE.  </p>
<p>当你对爱国敞开心扉，偏见便不再存在。</p>
<p>THE BIBLE TELLS US HOW GOOD AND PLEASANT IT IS WHEN GOD’S PEOPLE LIVE TOGETHER IN UNITY.  </p>
<p>圣经告诉我们，当上帝的子民团结一致将是多么的美好和愉悦。</p>
<p>WE MUST SPEAK OUR MINDS OPENLY, DEBATE OUR DISAGREEMENTS HONESTLY, BUT ALWAYS PURSUE SOLIDARITY.  </p>
<p>我们必须不加掩饰地说出心声，诚实地讨论不同意见，但永远追求团结。</p>
<p>WHEN AMERICA IS UNITED, AMERICA IS TOTALLY UNSTOPPABLE.  </p>
<p>当美利坚团结一致，美利坚将势不可挡。</p>
<p>THERE SHOULD NO FEAR.</p>
<p>恐惧将荡然无存。</p>
<p>WE ARE PROTECTED AND WE WILL ALWAYS BE PROTECTED.  </p>
<p>我们将受到保护，我们也将永远受到保护。</p>
<p>WE WILL BE PROTECTED BY THE GREAT MEN AND WOMEN OF OUR MILITARY AND LAW ENFORCEMENT.  </p>
<p>伟大的军队和执法机关的男男女女将保护我们。</p>
<p>AND MOST IMPORTANTLY, WE WILL BE PROTECTED BY GOD.  </p>
<p>而且最重要的是，上帝也会保护我们。</p>
<p>FINALLY, WE MUST THINK BIG AND DREAM EVEN BIGGER.  </p>
<p>最后，我们必须敢于想象，拥有更宏伟的梦想。</p>
<p>IN AMERICA WE UNDERSTAND THAT A NATION IS ONLY LIVING AS LONG AS IT IS STRIVING.  </p>
<p>在美国，我们明白一个国家只有奋斗而才能生存。</p>
<p>WE WILL NO LONGER ACCEPT POLITICIANS WHO ARE ALL TALK AND NO ACTION, CONSTANTLY<br>COMPLAINING BUT NEVER DOING ANYTHING ABOUT IT.  </p>
<p>我们将不再接受那些纸上谈兵的政客，总是抱怨却不去解决问题。</p>
<p>THE TIME FOR EMPTY TALK IS OVER.</p>
<p>纸上谈兵的时代已经结束了。</p>
<p>NOW ARRIVES THE HOUR OF ACTION.</p>
<p>现在是实践的时代。</p>
<p>DO NOT ALLOW ANYONE TO TELL YOU THAT IT CANNOT BE DONE.  </p>
<p>决不允许任何人告诉你这不可能。</p>
<p>NO CHALLENGE CAN MATCH THE HEART AND FIGHT AND SPIRIT OF AMERICA.  </p>
<p>没有任何挑战能对抗美利坚的雄心壮志。</p>
<p>WE WILL NOT FAIL.  </p>
<p>我们决不会失败。</p>
<p>OUR COUNTRY WILL THRIVE AND PROSPER AGAIN.  </p>
<p>我们的国家将再度繁荣昌盛。</p>
<p>WE STAND AT THE BIRTH OF A NEW MILLENIUM, READY TO UNLOCK THE MYSTERIES OF SPACE, TO FREE THE EARTH FROM THE MISERIES OF DISEASE, AND TO HARNESS THE ENERGIES, INDUSTRIES AND TECHNOLOGIES OF TOMORROW.  </p>
<p>我们伫立在新千年的开端，准备好揭开太空之谜，准备好解放全世界于疾病的痛苦，准备好掌控未来的能源、工业和科技。</p>
<p>A NEW NATIONAL PRIDE WILL STIR OURSELVES, LIFT OUR SIGHTS AND HEAL OUR DIVISION.  </p>
<p>我们将油然而生一种新的国家自豪感，扩大我们的视野，减少我们的分歧。</p>
<p>IT’S TIME TO REMEMBER THAT OLD WISDOM OUR SOLDIERS WILL NEVER FORGET, THAT WHETHER WE ARE BLACK OR BROWN OR WHITE, WE ALL BLEED THE SAME RED BLOOD OF PATRIOTS.  </p>
<p>是时候铭记战士们永不忘怀的古老智慧，不论我们的肤色是黑色、棕色、或是白色，我们全都流淌着红色的爱国之血。</p>
<p>WE ALL ENJOY THE SAME GLORIOUS FREEDOMS, AND WE ALL SALUTE THE SAME GREAT AMERICAN FLAG.</p>
<p>我们都享受着同样光荣的自由，我们也都向伟大的美利坚国旗致敬。</p>
<p>AND WHETHER A CHILD IS BORN IN THE URBAN SPRAWL OF DETROIT OR THE WIND-SWEPT PLAINS OF NEBRASKA, THEY LOOK UP AT THE SAME NIGHT SKY, THEY FILL THEIR HEART WITH THE SAME DREAMS, AND THEY ARE INFUSED WITH THE BREATH OF LIFE BY THE SAME ALMIGHTY CREATOR.  </p>
<p>无论是出生在 Detroit 城市地区还是 Nebraska 大风扫过的平原的孩子，他们仰望同一片夜空，他们心存同样的梦想，他们充满了来自同一个全能造物主的生命气息。</p>
<p>SO TO AMERICANS IN EVERY CITY NEAR AND FAR, SMALL AND LARGE, FROM MOUNTAIN TO MOUNTAIN, FROM OCEAN TO OCEAN, HEAR THESE WORDS.  </p>
<p>所以对于在任何城市的美国人，无论你所在的城市或近或远，或大或小，山区或是海边，请听到这些话。</p>
<p>YOU WILL NEVER BE IGNORED AGAIN.</p>
<p>你将不再会被忽略。</p>
<p>YOUR VOICE, YOUR HOPES AND YOUR DREAMS WILL DEFINE OUR AMERICAN DESTINY.  </p>
<p>你的声音，你的希望，你的梦想将决定美利坚的命运。</p>
<p>AND YOUR COURAGE AND GOODNESS AND LOVE WILL FOREVER GUIDE US ALONG THE WAY.  </p>
<p>你的勇气、善良和爱将永远指引我们前进。</p>
<p>TOGETHER, WE WILL MAKE AMERICA STRONG AGAIN.  </p>
<p>团结一致，我们将使美利坚再一次强大。</p>
<p>WE WILL MAKE AMERICA WEALTHY AGAIN.</p>
<p>我们将使美利坚再一次富强。</p>
<p>WE WILL MAKE AMERICA PROUD AGAIN.  </p>
<p>我们将使美利坚再一次骄傲。</p>
<p>WE WILL MAKE AMERICA SAFE AGAIN.</p>
<p>我们将使美利坚再一次安全。</p>
<p>AND, YES, TOGETHER, WE WILL MAKE AMERICA GREAT AGAIN.</p>
<p>而且，是的，团结一致，我们将使美利坚再一次伟大。</p>
<p>THANK YOU.  </p>
<p>谢谢大家</p>
<p>GOD BLESS YOU.</p>
<p>愿上帝保佑你。</p>
<p>AND GOD BLESS AMERICA.</p>
<p>愿上帝保佑美利坚。</p>
<p>THANK YOU.</p>
<p>谢谢大家。</p>
<p>GOD BLESS AMERICA.</p>
<p>愿上帝保佑美利坚。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;The Inauguration of the 45th President of the United States&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Translation" scheme="https://maimieng.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中的 bounds &amp; frame</title>
    <link href="https://maimieng.com/2017/6/"/>
    <id>https://maimieng.com/2017/6/</id>
    <published>2017-01-19T16:00:00.000Z</published>
    <updated>2017-02-26T05:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>bounds &amp; frame<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 iOS 开发中，视图的 bounds 和 frame 是其最基本的属性。两者的类型均为 <code>CGRect</code>，即包含原点和宽高信息。那么这两个属性有什么区别和联系呢？为了搞清楚这一点，也为了方便以后的参考，所以总结于此。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h3><blockquote>
<p>The frame rectangle, which describes the view’s location and size in its <strong>superview’s</strong> coordinate system.</p>
</blockquote>
<p>根据苹果的官方文档，frame 是控件相对于其<strong>父视图</strong>坐标系得出的位置和大小。</p>
<h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><p>其实提到 frame 和 bounds，不得不说的还有一个属性便是 center。</p>
<blockquote>
<p>The center of the frame.</p>
</blockquote>
<p>根据苹果的官方文档，center 是自身控件 <strong>frame</strong> 的中心。</p>
<h3 id="bounds"><a href="#bounds" class="headerlink" title="bounds"></a>bounds</h3><blockquote>
<p>The bounds rectangle, which describes the view’s location and size in its own coordinate system.</p>
</blockquote>
<p>根据苹果的官方文档，bounds 是控件相对于其<strong>自身</strong>坐标系得出的位置和大小。默认 bounds 中的原点为 (0, 0)。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>概念的总结总是抽象的，不如一个 Demo 生动，因此写了一个 Demo 来验证以上的概念。该 Demo 您可以在 <a href="https://github.com/kingcos/bounds-frame-Demo" target="_blank" rel="external">kingcos/bounds-frame-Demo</a> 下载并使用 Xcode 运行。为了快速构建，该例中使用了 Storyboard。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_01.png" alt="Demo"></p>
<p>该 Demo 中，红色和蓝色按钮的父控件为 UIView，您可以在下图中看到，即蓝色选中的视图控件。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_02.png" alt="控件层次"></p>
<p>通过 Demo 中的数据，我们可以很清楚的知道 frame、bounds 以及 center 之间的关系：</p>
<ul>
<li>frame 和 bounds 中的 size 是相同且同时变化的</li>
<li>当子控件的左上角（即原点）与其父控件为同一点时，frame 和 bounds 是相同的</li>
<li>frame 中的原点为当前控件在父控件中的坐标</li>
<li>bounds 中的原点为当前控件在其以自身为准的坐标系中的坐标，默认为 (0, 0)</li>
<li>center 为 frame 的中心，即相对于父控件</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>验证了概念，也大致了解了 frame 和 bounds 的区别，那么在实际应用中又有什么差别呢？在 Demo 的基础上，新增了下方的一个 UIView，背景色为 Light Gray（如控件层次图中蓝色选中的视图）。并在该 UIView 中嵌套了一个子控件，即棕色的 UILabel。在该棕色 UILabel 中，又使用代码创建了子控件 UIView，并将其初始化为 <code>UIView(frame: CGRect(x: 0, y: 0, width: 20, height: 20))</code>，且背景为黑色。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_03.png" alt="Demo"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_04.png" alt="控件层次"></p>
<p>为了方便演示，在棕色 UILabel 上方加上了一个 UISegmentedControl，用来快速切换设置的不同属性，以方便比较。默认即初始状态为：黑色控件、棕色 Label、浅灰控件三者的原点统一。</p>
<h4 id="Bounds"><a href="#Bounds" class="headerlink" title="Bounds"></a>Bounds</h4><p>当点选 Bounds，设置棕色 Label 的 bounds 原点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brownLabel.bounds.origin = <span class="type">CGPoint</span>(x: -<span class="number">20</span>, y: -<span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>虽然原点变化了，但是该控件的位置并没有发生改变，这是因为 bounds 以自身为参照，仅仅把原点坐标改变，不会影响自身。但是我们添加到该控件内部的黑色控件，就会发生偏移。偏移的动画如下图所示：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_05.gif" alt="改变 bounds"></p>
<h4 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h4><p>当点选 Frame，设置棕色 Label 的 frame 原点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brownLabel.frame.origin = <span class="type">CGPoint</span>(x: -<span class="number">20</span>, y: -<span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>由于 frame 是参照父控件，所以一旦更改原点，那么棕色控件本身就会发生偏移。而其内部的子控件是按照其父控件定位的，所以也会跟着偏移，但相对棕色控件的位置不变。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/ios_frame&amp;bounds_06.gif" alt="改变 frame"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>bounds 和 frame 其实是 iOS 开发中很基本的知识点，但有时会对初学者造成困惑。背诵概念是很容易忘记的，通过实际的代码和 Demo 才能对知识掌握更加清晰、牢靠。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.apple.com/reference/uikit/uiview/1622621-frame" target="_blank" rel="external">frame - Apple Inc.</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uiview/1622627-center" target="_blank" rel="external">center - Apple Inc.</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uiview/1622580-bounds" target="_blank" rel="external">bounds - Apple Inc.</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;bounds &amp;amp; frame&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的 UIAppearance</title>
    <link href="https://maimieng.com/2017/5/"/>
    <id>https://maimieng.com/2017/5/</id>
    <published>2017-01-18T16:00:00.000Z</published>
    <updated>2017-01-20T02:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>UIAppearance in Swift<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>UIAppearance，即用户界面外观，是 iOS 中 UIKit 的一个协议。外观对于用户体验是至关重要的一点，NSHipster 的 Mattt Thompson 在 UIAppearance 一文中说：<strong>Users will pay a premium for good-looking software.</strong>（用户乐意为高颜值的软件额外付费）。</p>
<p>使用 UIAppearance 协议可以得到一个类的外观代理（proxy）。我们可以调用类的外观代理来更简单地自定义一个实例的外观。不过由于官方文档仍是 Objective-C 的例子，这里就总结一下 Swift 中的使用。这里为了方便演示，我创建了一个 Demo，您可以在 <a href="https://github.com/kingcos/UIAppearance-Demo" target="_blank" rel="external">kingcos/UIAppearance-Demo</a> 下载，并在 Xcode 中运行。</p>
<p>该 Demo 为纯代码，不涉及 Storyboard 和 XIB。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_01.png" alt="原始界面"></p>
<p>其中自定义了两个 TabBar 控制器，MM 和 VV TabBar 控制器的初始外观（后续主要针对 TabBarItem 的修改）如下所示。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_02.png" alt="MMTabBarController"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_03.png" alt="VVTabBarController"></p>
<h2 id="全局修改外观"><a href="#全局修改外观" class="headerlink" title="全局修改外观"></a>全局修改外观</h2><p>全局修改即修改该类型的<strong>所有</strong>实例的外观。</p>
<p>这里的 Demo 以 <code>UITabBarItem</code> 为例，如果我们需要修改整个应用中所有的 <code>UITabBarItem</code>  外观，即全局修改，那么我们直接使用以下方法即可获取该类的外观代理，进而进行修改。注意调用该方法的为<strong>类</strong>，而非实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">appearance</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>将修改外观（此处以字体大小为例）的操作放在一个方法中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setGlobalAppearance</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> attrsNormal = [<span class="type">String</span> : <span class="type">Any</span>]()</div><div class="line">    attrsNormal[<span class="type">NSFontAttributeName</span>] = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">30</span>)</div><div class="line">    </div><div class="line">    <span class="type">UITabBarItem</span>.appearance().setTitleTextAttributes(attrsNormal, <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>viewDidLoad</code> 方法中调用该方法并运行，我们即可看到两种 TabBar 控制器的 TabBarItem 的字体均受到了影响。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_04.png" alt="MMTabBarController"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_05.png" alt="VVTabBarController"></p>
<h2 id="部分修改外观"><a href="#部分修改外观" class="headerlink" title="部分修改外观"></a>部分修改外观</h2><p>部分修改即修改该类型的<strong>某些</strong>实例的外观。</p>
<p>在 Demo 中，我们可以使用以下方法，传入 UIAppearance 容器类型，即可修改该容器内部的相应类型实例的外观。需要注意的是，这里的参数为数组，即传入多个不同类型也是允许的。同样注意调用该方法的为<strong>类</strong>，而非实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">9.0</span>, *)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">appearance</span><span class="params">(whenContainedInInstancesOf containerTypes: [UIAppearanceContainer.<span class="keyword">Type</span>])</span></span> -&gt; <span class="type">Self</span></div></pre></td></tr></table></figure>
<p>将修改外观（此处以字体大小为例）的操作放在一个方法中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setLocalAppearance</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> attrsNormal = [<span class="type">String</span> : <span class="type">Any</span>]()</div><div class="line">    attrsNormal[<span class="type">NSFontAttributeName</span>] = <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">30</span>)</div><div class="line">    </div><div class="line">    <span class="type">UITabBarItem</span>.appearance(whenContainedInInstancesOf: [<span class="type">MMTabBarController</span>.<span class="keyword">self</span>]).setTitleTextAttributes(attrsNormal, <span class="keyword">for</span>: <span class="type">UIControlState</span>.normal)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>viewDidLoad</code> 方法中调用该方法并运行，我们即可看到只有作为参数的 MMTabBarController 的 TabBarItem 的字体受到了影响。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_06.png" alt="MMTabBarController"></p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_07.png" alt="VVTabBarController"></p>
<h2 id="自定义-UIView-子类的实现"><a href="#自定义-UIView-子类的实现" class="headerlink" title="自定义 UIView 子类的实现"></a>自定义 UIView 子类的实现</h2><p>通过以上的 Demo，我们可以看出，通过 UIAppearance 可以很便捷且统一的管理界面外观。系统中遵守 UIAppearance 的方法和属性可以在 <a href="https://gist.github.com/mattt/5135521" target="_blank" rel="external">mattt/uiappearance-selector.md</a> 查到，那我们如何使自定义的 UIView 类也能用 UIAppearance 管理呢？</p>
<p>这里以自定义按钮为例，为了方便演示，直接使用了 Demo 中跳转的两个按钮。新建一个 MMButton 的类，继承 UIButton。UIView 本身已经实现了 UIAppearance 和 UIAppearanceContainer 协议，所以我们只需要添加需要 UIAppearance 修改的属性即可。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_08.png" alt="UIView 已实现了 UIAppearance 和 UIAppearanceContainer 协议"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MMButton</span>: <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> btnBorderWidth: <span class="type">CGFloat</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> layer.borderWidth</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            layer.borderWidth = newValue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里是以按钮的边框宽度为例，该属性为<strong>计算属性</strong>。同时需要在定义前加上 <code>dynamic</code>，以赋予该处 Swift 代码的<strong>运行时（runtime）</strong>特性。</p>
<p>这样便可以使用 <code>appearance()</code> 来全局修改 MMButton 的该属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">MMButton</span>.appearance().btnBorderWidth = <span class="type">CGFloat</span>(<span class="number">10.0</span>)</div></pre></td></tr></table></figure>
<p>效果即如图所示：</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/uiappearance_09.png" alt="自定义 MMButton"></p>
<p>需要注意的是，可以支持修改的属性只能为 <code>id</code>，<code>NSInteger</code>，<code>NSUInteger</code>，<code>CGFloat</code>，<code>CGPoint</code>，<code>CGSize</code>，<code>CGRect</code>，<code>UIEdgeInsets</code> 或 <code>UIOffset</code>（官方提供的均为 Objective-C 类型）。</p>
<blockquote>
<p>极端特殊的情况下，你也可以参考文末的 UIAppearance proxy for custom objects，其中 LombaX 提供了继承自 NSObject 的普通类的 appearance 实现。由于 UIAppearance 多用于 UIView 的子类，所以本文不再探究，但给出参考。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 UIAppearance 协议可以很方便的自定义外观。当然，UIAppearance 并不是外观修改的唯一选择。在 Mattt Thompson 的 UIAppearance 一文中也提到了几个替代 UIAppearance 的第三方库，通过把样式和内容分开（很像 CSS 和 HTML 的关系）来定义外观，更加清晰。在为 App 开发主题抑或是夜间模式时，也可以选择轻量级颜色框架 <a href="https://github.com/ViccAlexander/Chameleon" target="_blank" rel="external">ViccAlexander/Chameleon</a>，其已经在 GitHub 上拿到了超过 7000+ Stars。</p>
<p>UIAppearance 中还有两个方法本文没有涉及：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">appearance</span><span class="params">(<span class="keyword">for</span>: UITraitCollection, whenContainedInInstancesOf: [UIAppearanceContainer.<span class="keyword">Type</span>])</span></span></div><div class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">appearance</span><span class="params">(whenContainedInInstancesOf: [UIAppearanceContainer.<span class="keyword">Type</span>])</span></span></div></pre></td></tr></table></figure>
<p>这两个方法是关于 Trait Collection，和多屏适配相关。目前这块的相关中文资料不是太多，我会找时间进行搜索、总结，届时再与大家分享。</p>
<p>另外本文略有涉及 Swift 和 Objective-C 的兼容，<code>dynamic</code> 关键字便可以保证和 Objective-C 里动态调用时相同的<strong>运行时（runtime）</strong>特性。为大家所熟知的还有 <code>@objc</code>，关于这两者（<code>dynamic</code> &amp; <code>@objc</code>）的区别，您可以参考文末中喵神的 @OBJC 和 DYNAMIC。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.apple.com/reference/uikit/uiappearance" target="_blank" rel="external">UIAppearance - Apple Inc.</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uiappearancecontainer" target="_blank" rel="external">UIAppearanceContainer - Apple Inc.</a></li>
<li><a href="http://nshipster.com/uiappearance/" target="_blank" rel="external">UIAppearance - NSHipster</a></li>
<li><a href="https://gist.github.com/mattt/5135521" target="_blank" rel="external">mattt/uiappearance-selector.md</a></li>
<li><a href="http://stackoverflow.com/questions/15732885/uiappearance-proxy-for-custom-objects" target="_blank" rel="external">UIAppearance proxy for custom objects - StackOverflow</a></li>
<li><a href="http://swifter.tips/objc-dynamic/" target="_blank" rel="external">@OBJC 和 DYNAMIC</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;UIAppearance in Swift&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>「周记」逃避</title>
    <link href="https://maimieng.com/2017/4/"/>
    <id>https://maimieng.com/2017/4/</id>
    <published>2017-01-14T16:00:00.000Z</published>
    <updated>2017-01-15T16:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>爱，是折磨人的东西。<br></blockquote><br><a id="more"></a><br>很遗憾，科二挂在了最后直角转弯。所以只能等开学再来考了。</p>
<p>在每个假期回家前，我基本上都会找一部短剧来追，以缓解路上四个多小时无聊时间。这次看的是日剧《逃避虽可耻但有用》。其实在放假前有和舍友断断续续看过一些片段，题材比较新颖，加上男主也是程序猿，所以就下载了放在路上看。整个剧 11 集，算的是一部比较短小的剧。看后也是感慨很多，也能感受到日本社会的秩序，总之是一部很暖心的爱情剧。</p>
<p>这一周总算是回到家了，在家免不了会惰性很大。不过这也算是大学最后一个假期了，今年的暑假就要出去找实习了。所以我计划寒假能够有时间来巩固基础，并对目前手头的项目进行一个分析，方便开学后的开发。</p>
<blockquote>
<p>我看透了很多，多么希望遇到一个开明的人。听我诉说，然后，跟我一起离开这里。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;爱，是折磨人的东西。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Weekly Journal" scheme="https://maimieng.com/tags/Weekly-Journal/"/>
    
  </entry>
  
  <entry>
    <title>「周记」患得患失</title>
    <link href="https://maimieng.com/2017/3/"/>
    <id>https://maimieng.com/2017/3/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2017-01-15T15:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>怕得不到，又，怕得到了会失去。<br></blockquote><br><a id="more"></a><br>2017 年的第一周就这样过去了。这一周，考完了大三上学期唯一一门考试——《计算机组成原理》。不过由于想在回家前把驾照的科目二考过，因此便没有直接回家。</p>
<p>6 号晚上，看了同学参加的街舞社表演，略有感慨。生活真的不只是 Code，有很多精彩的地方，每个人都在努力。我们只看到他表演的精彩，却不知道背后的付出。要去尊重每个人的努力。虽然每个人都有所擅长，有所不擅长。但哪怕环境再差，也要拥抱阳光。</p>
<p>7 号，为了听同学唱歌，下载了「全民 K 歌」。发现大家唱歌也都挺好的。唱歌对我来说也算是难题，特别是自从我发现自己唱不上高音（变声之后），去 KTV 唱歌总会遇到高音，就会很尴尬。不过既然大家也都唱的不错，我也想去努力练习唱歌。不过和大家直接在宿舍用软件录歌不一样，我做不到直接在宿舍唱歌，所以我跑到房顶，一个人在冷风中录歌。可能是「只有我一个人的时候，我才愿意放下。」</p>
<p>在新年第一天知道自己又一次成为「Single Dog」之后，没有觉得多难受，只是释然。昨晚又和同学聊天，发现自己被看的清清楚楚，可能我就是这么容易被看穿吧。</p>
<blockquote>
<p>我不是一个爱冒险的人，只有成功率大于一定程度时，我才愿意迈出去。</p>
</blockquote>
<p>下一周重要的就是拿下科目二，然后回家，今年在家也许会很「闲」吧。如果真的「走不了」，那就让我再「整理整理」吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;怕得不到，又，怕得到了会失去。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Weekly Journal" scheme="https://maimieng.com/tags/Weekly-Journal/"/>
    
  </entry>
  
  <entry>
    <title>阅读 UIColor-Hex-Swift 源码</title>
    <link href="https://maimieng.com/2017/2/"/>
    <id>https://maimieng.com/2017/2/</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-01-08T12:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Read the mind behind the code.<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Swift 3.0</li>
<li>Xcode 8.2.1</li>
<li>UIColor Hex Swift 3.0.2</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/UIColor-Hex-Swift_code_01.png" alt="yeahdongcn/UIColor-Hex-Swift"></p>
<p><a href="https://github.com/yeahdongcn/UIColor-Hex-Swift/" target="_blank" rel="external"><strong>yeahdongcn/UIColor-Hex-Swift</strong></a> 是一个使用 Swift 3.0 编写并开源在 GitHub 上的 iOS 第三方库。核心为不到 200 行代码，即可以使用 RGBA 十六进制数／字符串创建颜色（<code>UIColor</code>）。其支持通过 CocoaPods 管理，目前在 GitHub 上已经拥有 683 Stars，说明该库已经帮助了不少开发者使用在了项目中。而我作为一个新手，就来仔细阅读一下该库的源码，看看是否有值得借鉴的地方。</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>利用枚举，通过遵守 <code>Error</code> 协议，来定义统一的错误处理。Swift 中的 <code>Error</code> 协议也有说明，通过遵守该协议即可使错误在 Swift 的错误处理系统中保持一致性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UIColorInputError</span> : <span class="title">Error</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> missingHashMarkAsPrefix,</div><div class="line">    unableToScanHexValue,</div><div class="line">    mismatchedHexStringLength</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>Swift 中的扩展（extension）能够很方便地扩充而不破坏原有的类。特别是在官方提供的类上，使用 extension 可以很容易的加上我们的自定义方法以及<strong>计算</strong>属性（扩展不支持存储属性）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="便利构造器"><a href="#便利构造器" class="headerlink" title="便利构造器"></a>便利构造器</h2><p>便利构造器（Convenience initializers）与指定构造器（Designated initializers）不同。便利构造器是次要的，即不是必需的。也可以在便利构造器的内部调用指定构造器。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(hex3: <span class="type">UInt16</span>, alpha: <span class="type">CGFloat</span> = <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">let</span> divisor = <span class="type">CGFloat</span>(<span class="number">15</span>)</div><div class="line">    <span class="keyword">let</span> red     = <span class="type">CGFloat</span>((hex3 &amp; <span class="number">0xF00</span>) &gt;&gt; <span class="number">8</span>) / divisor</div><div class="line">    <span class="keyword">let</span> green   = <span class="type">CGFloat</span>((hex3 &amp; <span class="number">0x0F0</span>) &gt;&gt; <span class="number">4</span>) / divisor</div><div class="line">    <span class="keyword">let</span> blue    = <span class="type">CGFloat</span>( hex3 &amp; <span class="number">0x00F</span>      ) / divisor</div><div class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(red: red, green: green, blue: blue, alpha: alpha)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>一般的单行注释和多行注释都已为人所知。但如何与官方注释保持一致性和规范性，我个人却在之前没有了解到。在 Xcode 8 支持了 markdown 语法后，有人已经开始通过 Playground 制作很多带样式的代码教程。结合 Xcode 自带的规范，可以达到和官方保持一致的效果。关于具体的标记样式可以查看文末的参考。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/UIColor-Hex-Swift_code_02.png" alt="带样式的 Xcode 注释"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> The shorthand three-digit hexadecimal representation of color.</div><div class="line"> #RGB defines to the color #RRGGBB.</div><div class="line"> </div><div class="line"> - parameter hex3: Three-digit hexadecimal value.</div><div class="line"> - parameter alpha: 0.0 - 1.0. The default is 1.0.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(hex3: <span class="type">UInt16</span>, alpha: <span class="type">CGFloat</span> = <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">let</span> divisor = <span class="type">CGFloat</span>(<span class="number">15</span>)</div><div class="line">    <span class="keyword">let</span> red     = <span class="type">CGFloat</span>((hex3 &amp; <span class="number">0xF00</span>) &gt;&gt; <span class="number">8</span>) / divisor</div><div class="line">    <span class="keyword">let</span> green   = <span class="type">CGFloat</span>((hex3 &amp; <span class="number">0x0F0</span>) &gt;&gt; <span class="number">4</span>) / divisor</div><div class="line">    <span class="keyword">let</span> blue    = <span class="type">CGFloat</span>( hex3 &amp; <span class="number">0x00F</span>      ) / divisor</div><div class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(red: red, green: green, blue: blue, alpha: alpha)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>Travis CI，是一个专门为开源项目打造的持续集成环境。最为显著的标示就是在很多 GitHub 等开源的项目 README 中，有很多简介项目的标签。我也正准备将自己的项目建立 Travis CI。</p>
<p><img src="http://7xkam0.com1.z0.glb.clouddn.com/blog/UIColor-Hex-Swift_code_03.png" alt="Travis CI 标签"></p>
<h2 id="十六进制转-RGB"><a href="#十六进制转-RGB" class="headerlink" title="十六进制转 RGB"></a>十六进制转 RGB</h2><p>以六位十六进制转换 RGB 为例。<code>&amp;</code> 是按位与运算符。<code>&gt;&gt;</code> 是右移运算符。通过 <code>(hex6 &amp; 0xFF0000) &gt;&gt; 16</code>，<code>(hex6 &amp; 0x00FF00) &gt;&gt;  8</code>，<code>hex6 &amp; 0x0000FF</code>，分别把  RR、GG、BB 位上的数字提取。由于 RGB 最大值为 255.0，iOS 中 UIColor 的初始化方法必须按与 255.0 的比例作为参数，因此比上除数 255.0。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     The six-digit hexadecimal representation of color of the form #RRGGBB.</div><div class="line">     </div><div class="line">     - parameter hex6: Six-digit hexadecimal value.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(hex6: <span class="type">UInt32</span>, alpha: <span class="type">CGFloat</span> = <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">let</span> divisor = <span class="type">CGFloat</span>(<span class="number">255</span>)</div><div class="line">        <span class="keyword">let</span> red     = <span class="type">CGFloat</span>((hex6 &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span>) / divisor</div><div class="line">        <span class="keyword">let</span> green   = <span class="type">CGFloat</span>((hex6 &amp; <span class="number">0x00FF00</span>) &gt;&gt;  <span class="number">8</span>) / divisor</div><div class="line">        <span class="keyword">let</span> blue    = <span class="type">CGFloat</span>( hex6 &amp; <span class="number">0x0000FF</span>       ) / divisor</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: red, green: green, blue: blue, alpha: alpha)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508" target="_blank" rel="external">Error Handling</a><br><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html#//apple_ref/doc/uid/TP40014097-CH24-ID151" target="_blank" rel="external">Extensions</a><br><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html" target="_blank" rel="external">Initialization</a><br><a href="https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html" target="_blank" rel="external">Markup Formatting Reference</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Read the mind behind the code.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>回顾 2016，展望 2017</title>
    <link href="https://maimieng.com/2017/1/"/>
    <id>https://maimieng.com/2017/1/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-01-02T16:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>New Year, New Start.<br></blockquote><br><a id="more"></a></p>
<blockquote>
<p>今天是 2017 年 1 月 1 日，其实在昨天我已经起草了一份年终总结。每次的年终总结总要回想一年的时光，可又哪是一时半会可以总结的好的呢？</p>
</blockquote>
<p>2016 年，我从大二升到大三。这一年，有很多的感慨，有得到一些，也失去一些。纵然 2016 已经过去，那么现在就是时候就做个总结，记下展望。</p>
<h2 id="回顾-2016"><a href="#回顾-2016" class="headerlink" title="回顾 2016"></a>回顾 2016</h2><h3 id="百度-IFE-amp-FCC"><a href="#百度-IFE-amp-FCC" class="headerlink" title="百度 IFE &amp; FCC"></a>百度 IFE &amp; FCC</h3><p>在 2016 年 3 月到 4 月的一个月时间，我召集了几个学习前端的同学一起参加<a href="http://ife.baidu.com/" target="_blank" rel="external">百度前端技术学院</a>。虽然当时也在 FreeCodeCamp 上学习前端的基础知识，但遗憾的是我们并没有坚持下去。最近在完成课程设计中，开发前端页面中使用了 Element UI 和 Vue.js，由于对前端的不了解，发现了很多坑。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/from2016to2017_01.png" alt="Team Bug"></p>
<h4 id="体会："><a href="#体会：" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>代码规范的重要性</li>
<li>前端中，JavaScript 是一个难点，重点</li>
<li>前端的 UI 框架和 JS 框架都需要学习</li>
<li>前端组件化，前后端分离</li>
</ol>
<h3 id="CET-6"><a href="#CET-6" class="headerlink" title="CET-6"></a>CET-6</h3><p>比起四级前的疯狂学习（至少抄了 100 页单词，做了 20 套卷子），六级的复习就仅仅在考前的三周，临近考试的一周还得了感冒，于是就放弃复习。那次六级又是第一次听力改革，加上收音耳机不给力，考完就没有报太大的信心。结果是考了 446 分，不算高，但也算是过了及格线。平时学英语的途径也就只有翻译电台的演讲，并没有其他刻意的学习。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/from2016to2017_02.png" alt="Twitter 推文"></p>
<h4 id="体会：-1"><a href="#体会：-1" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>英语是一种工具，要掌握好</li>
<li>未来要拓展除英文之外的语种（例如：日语）</li>
<li>语言的学习不应该是为了考试分数，而是应该追求实学（奶爸文章有感）</li>
</ol>
<h3 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h3><p>2016 年暑假的第一个月是卓越班的 Java 培训。虽然我已经了解 Java 的基本使用，但在这一个月体验培训也很有感触。</p>
<h4 id="体会：-2"><a href="#体会：-2" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>专心才能学好。在这一个月的时间，从早到晚，几乎都在教室，虽然天气很热，但是这样集中时间干一件事确实学习速度很快，干劲很足</li>
<li>培训的弊端。培训由于时间的紧凑，没有太多时间留给个人去思考，而是灌输式地教学。「别问为什么，你只要会用就行」，这样确实加速了开发，但是这样没有<strong>主动地探索式</strong>的学习，我个人是觉得不太牢靠。当然培训也存在其他问题，但也有很多好处，见仁见智</li>
</ol>
<h3 id="国奖"><a href="#国奖" class="headerlink" title="国奖"></a>国奖</h3><p>在小学、初中、高中从来没有拿过第一的我，在大学里终于算是「扳回一局」。之所以带引号，是因为我也知道大学课程很水，成绩更水。有的老师要求苛刻，有的可能全部给过。学生们也是抱着 60 分万岁，多一分犯罪的态度。毕竟大学除了学习还有很多甚至更重要的事情。</p>
<p>而我把国家奖学金仅仅当作一种肯定。以那样的高考分数进到这样一所学校，我<strong>没有任何</strong>「炫耀」的资本。这两年算是勤勤恳恳地学过来了，虽然「成绩」并不优异，但这个奖算是对我的一种肯定，一种鼓励。</p>
<h4 id="体会：-3"><a href="#体会：-3" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>只要方向正确，努力终会有所回报</li>
<li>要学会适当的自我营销</li>
</ol>
<h3 id="电台"><a href="#电台" class="headerlink" title="电台"></a>电台</h3><p>网易云上的电台是我 2015 年 4 月 18 日开设的。到现在已经快两年了，奥巴马总统也快要卸任了。一周一更的速度其实并不快，但是近几个月也停更了。也很感谢支持、订阅我的朋友，可我最近的弃更确实对不住你们的期待。我想在最近思考下电台和公众号的未来，绝不会放弃这样的平台。</p>
<h4 id="体会：-4"><a href="#体会：-4" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>坚持，坚持，再坚持</li>
<li>有些事情看似对自己毫无意义，但在无形中就能帮到他人</li>
</ol>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>2016 年，我一共写了 38 篇博客。在接近年终的时候，我开始下定决心学习 iOS，并把学习过程的中的一些问题的解决总结成文，发表出去。这一想法的起始于暑假培训时写的两篇 Java 的文章，我开始思考博客的意义。博客不应该是一个记笔记的地方，而是个人思想传播的途径。<strong>在学习过程解决疑问，却很值得记录，与他人分享。</strong></p>
<p>我很享受这样一个写作、分享的过程。虽然一篇文章我常常需要打开十几个网页，对比学习，并用 Xcode 写下 Demo，再进行测试。但是每在简书或是掘金收到一次喜欢或是收藏都会十分激动。虽然可能有一些虚荣，但是如果虚荣能促使一个人进步，那么我觉得也是不错的。</p>
<p>当然现在的写作速度很慢，有时候又被很多事情拖着，未来一定会继续更新！希望能够帮到更多的人。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/from2016to2017_03.png" alt="简书个人主页"></p>
<h4 id="体会：-5"><a href="#体会：-5" class="headerlink" title="体会："></a>体会：</h4><ol>
<li>写技术文章一定要经得起考证</li>
<li>技术文章一定要严谨，重视细节</li>
<li>有时候，一句简单的评论就能给作者带来好心情（这点是我自己感受到的）</li>
</ol>
<h2 id="展望-2017"><a href="#展望-2017" class="headerlink" title="展望 2017"></a>展望 2017</h2><h3 id="驾照"><a href="#驾照" class="headerlink" title="驾照"></a>驾照</h3><p>2017 年第一个展望便是在离校前把驾照考下来。虽然考过驾照，家里也没有车能让我开，但确实是一个必备技能了。我报驾照的时间确实有些晚，已经没有太多时间拖延，所以第一个展望就留给驾照吧。</p>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>2017 年，最重要的可能就是实习了。即将踏入职场，现在的我很兴奋，很憧憬。我知道自己可能进不了 BAT 这样的巨头，也进不了那些大家耳熟能详的互联网公司。剩下的时间也没多少了，只希望自己能找到一份热情的工作吧！但起码要够自己租房和生活的支出。</p>
<h3 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h3><p>计划 2017 年至少写 30 篇技术文章。另外看另一位大神的博客，准备开始周记计划，即每周总结。</p>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>2017 年我会多读书，并写下笔记，与大家分享。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>2016 年，我的 <a href="https://github.com/kingcos" target="_blank" rel="external">GitHub</a> 上终于够了 10 颗星。2017 我希望这个数字达到 100。我相信这个目标并不难，因为已经有计划开始写开源项目了。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/from2016to2017_04.png" alt="GitHub"></p>
<h3 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h3><p>新的一年，我也希望自己能够坚持锻炼身体，坚持早起，坚持学习。</p>
<hr>
<p>最后呢，谢谢 FF 所说的「<strong><em>好感并不等于喜欢</em></strong>」。另外我也会尽力和一些人保持联系，而不是像以前那样时间长了，就断了联系。</p>
<p>寒假的计划也放在这里吧：</p>
<ol>
<li>完成 Swift 设计模式相应的文章</li>
<li>学习基础算法</li>
<li>读完两本书</li>
<li>在课程设计基础上完善项目并开源</li>
<li>拿到驾照</li>
<li>开更电台 &amp; 公众号</li>
</ol>
<blockquote>
<p>一切尚早，我，还在路上。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;New Year, New Start.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Plan" scheme="https://maimieng.com/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>研读 CSAPP 之一： A Tour of Computer Systems</title>
    <link href="https://maimieng.com/2016/38/"/>
    <id>https://maimieng.com/2016/38/</id>
    <published>2016-12-23T16:00:00.000Z</published>
    <updated>2016-12-26T00:59:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>第一章：计算机系统之旅<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS 10.12.3 Beta</li>
<li>CS: APP 3e Eng</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习越深入时，就越发觉得基础不牢靠。有幸找到一本神书，CS:APP 第三版的英文原版。由于几乎已经习惯阅读英文，虽可能速度较慢，但可以免受翻译者思维的干扰。书很好，但还是希望沉下心，好好阅读，做好笔记，融会贯通。</p>
<p><strong>需要注意的是：该研读系列为个人总结，不免有一些错误，希望您能提出意见或建议，我都会细心研究，做出改正。谢谢！</strong></p>
<h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.1.png" alt="1.1"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.2.png" alt="1.2"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.3.png" alt="1.3"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.4.png" alt="1.4"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.5.png" alt="1.5"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.6.png" alt="1.6"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.7.png" alt="1.7"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.8.png" alt="1.8"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.9.png" alt="1.9"></p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/csapp_1_1.10.png" alt="1.10"></p>
<h2 id="练习题解"><a href="#练习题解" class="headerlink" title="练习题解"></a>练习题解</h2><blockquote>
<p>虽然书中有练习的答案，但我仍尝试自己解决，并将问题和解法发布在此与大家交流。</p>
</blockquote>
<h3 id="Practice-Problem-1-1"><a href="#Practice-Problem-1-1" class="headerlink" title="Practice Problem 1.1"></a>Practice Problem 1.1</h3><blockquote>
<p>假设你是一位卡车司机，被雇佣运输一车土豆从 BI 地到 MM 地，两地距离 2500km。由于限速，你预估自己能以 100km/hr 的速度行驶，所以全程需要 25 小时。</p>
</blockquote>
<h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><blockquote>
<p>你听新闻说，MM 地刚刚取消限速，相当于全程中的 1500km，你的卡车能以 150km/hr 的速度行驶。那么全程的加速比是多少？</p>
</blockquote>
<h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><blockquote>
<p>你可以为你的卡车购买一个新的涡轮增压器。经销商处有不同的型号，但是速度越快，价格也就越贵。如果想在全程拥有 1.67* 的加速比，那么你需要以多快的速度行驶？</p>
</blockquote>
<h3 id="Practice-Problem-1-2"><a href="#Practice-Problem-1-2" class="headerlink" title="Practice Problem 1.2"></a>Practice Problem 1.2</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;第一章：计算机系统之旅&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="https://maimieng.com/tags/CSAPP/"/>
    
      <category term="Reading" scheme="https://maimieng.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的字符串截取</title>
    <link href="https://maimieng.com/2016/37/"/>
    <id>https://maimieng.com/2016/37/</id>
    <published>2016-12-13T16:00:00.000Z</published>
    <updated>2016-12-14T10:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Substring in Swift 3.0<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS 10.12.2 Beta</li>
<li>Xcode 8.2 Beta</li>
<li>Swift 3.0</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近更文的频率也是越来越慢，除去已到期末的缘故，加上在忙老师的项目，自己的时间便被压缩殆尽。不过好在 <a href="https://github.com/kingcos/Swift-3-Design-Patterns" target="_blank" rel="external">Swift 设计模式</a>基本上已经更新完毕，下来就准备补齐每个模式对应的说明。</p>
</blockquote>
<p>在尝试使用 Swift 实现《大话设计模式》一书中的<a href="https://github.com/kingcos/Swift-3-Design-Patterns/blob/master/24-Interpreter_Pattern.playground/Contents.swift" target="_blank" rel="external">解释器模式</a>时，书中的 Demo 多次使用了截取字符串的方法，当然，Swift 作为一门先进的编程语言不会缺少这一常用的方法。然而在使用中，可能由于 Swift 是一门较为注重（类型）安全的语言，其字符串截取方法使用方式与 Java 等编程语言便有一些语法上的不同。在 Swift 自身的迭代过程中，这部分的语法变化也很大。所以这次就来简单研究一下 Swift 中的字符串截取。需要注意的是，虽然 Swift 也可以使用 NSString 类型的字符串，而且两者可以很容易的桥接，但考虑到个人对 Objective-C 的了解程度，便暂时不探讨。</p>
<h2 id="String-Index"><a href="#String-Index" class="headerlink" title="String.Index"></a>String.Index</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><blockquote>
<p>索引与下标，即 index 和 subscript。一般来说，两者的概念是类似的，不过个人觉得索引有泛指的概念，而下标是具体的。</p>
</blockquote>
<p>Swift 中字符串的索引类型并不是其他语言中的整型（int），而是 String.Index。String.Index，即标注字符串的索引类型。在 Swift 的标准库中，可以看到其本质是 <code>String.CharacterView.Index</code> 的别名。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// The index type for subscripting a string.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Index</span> = <span class="type">String</span>.<span class="type">CharacterView</span>.<span class="type">Index</span></div></pre></td></tr></table></figure>
<p>再进一步查看 <code>String.CharacterView</code>，即创建给定字符串的<strong>字符</strong>视图类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">CharacterView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/// Creates a view of the given string.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> text: <span class="type">String</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常用的 <code>&quot;maimieng.com&quot;.characters</code> 的类型其实就是 <code>String.CharacterView</code> 类型。<code>.characters</code> 将字符串内容转化为字符序列的视图。</p>
<h3 id="start-amp-end"><a href="#start-amp-end" class="headerlink" title="start &amp; end"></a>start &amp; end</h3><p>字符串必然是一个字符的有限序列，Swift 为了方便开发者迅速定位，便集成了 <code>startIndex</code> 和 <code>endIndex</code>。但是需要注意的是：<code>startIndex</code> 是指字符串的第一个字符的下标，而 <code>endIndex</code> 是指字符串的最后一个字符<strong>之后</strong>的下标。当字符串为空时，<code>startIndex</code> 和 <code>endIndex</code> 相同。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(str.characters.<span class="built_in">count</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(str.startIndex)</div><div class="line"><span class="built_in">print</span>(str.endIndex)</div><div class="line"></div><div class="line"><span class="comment">// 12</span></div><div class="line"><span class="comment">// Index(_base: Swift.String.UnicodeScalarView.Index(_position: 0), _countUTF16: 1)</span></div><div class="line"><span class="comment">// Index(_base: Swift.String.UnicodeScalarView.Index(_position: 12), _countUTF16: 0)</span></div></pre></td></tr></table></figure>
<p>从上面的 Demo 也可以看出，<code>startIndex</code> 的位置为 0，而 <code>endIndex</code> 的位置为 12，等同于字符串的长度，而<strong>不是</strong>字符串长度减一。</p>
<p>除了给出了起始和结尾的下标，Swift 也提供了根据下标定位其他索引的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(after i: String.Index)</span></span> -&gt; <span class="type">String</span>.<span class="type">Index</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(before i: String.Index)</span></span> -&gt; <span class="type">String</span>.<span class="type">Index</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> i: String.Index, offsetBy n: String.IndexDistance)</span></span> -&gt; <span class="type">String</span>.<span class="type">Index</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> i: String.Index, offsetBy n: String.IndexDistance, limitedBy limit: String.Index)</span></span> -&gt; <span class="type">String</span>.<span class="type">Index</span>?</div></pre></td></tr></table></figure>
<p>这样就可以通过给出的 <code>startIndex</code> 和 <code>endIndex</code> 来定位到其他的下标了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="comment">// 返回传入下标之后的下标</span></div><div class="line"><span class="built_in">print</span>(str.index(after: str.startIndex))</div><div class="line"><span class="comment">// 返回传入下标之前的下标</span></div><div class="line"><span class="built_in">print</span>(str.index(before: str.endIndex))</div><div class="line"></div><div class="line"><span class="comment">// 返回传入下标偏移后的下标（偏移量可正可负可为 0）</span></div><div class="line"><span class="built_in">print</span>(str.index(str.startIndex, offsetBy: <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment">// print(str.index(str.endIndex, offsetBy: 10))</span></div><div class="line"><span class="comment">// 作用同上，但如果超过传入的界限返回 nil</span></div><div class="line"><span class="built_in">print</span>(str.index(str.endIndex, offsetBy: <span class="number">10</span>, limitedBy: str.endIndex) ?? <span class="string">"越界"</span>)</div></pre></td></tr></table></figure>
<p>下标之间的间距，也可以利用 <code>func distance(from start: String.Index, to end: String.Index) -&gt; String.IndexDistance</code> 方法求出：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">distance</span>(from: str.startIndex, to: str.endIndex))</div><div class="line"><span class="comment">// 12</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">distance</span>(from: str.endIndex, to: str.startIndex))</div><div class="line"><span class="comment">// -12</span></div></pre></td></tr></table></figure>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>Range 即范围，Swift 中实现了 Comparable 协议的类型都可以用 Range 来表示范围。以下的 Range 特指：<code>Range&lt;String.Index&gt;</code>。</p>
<p>Range 的构造方法是 <code>init(uncheckedBounds bounds: (lower: Bound, upper: Bound))</code>。即传入一个元组，返回一个范围。需要注意的是：这个范围 Swift 是不会检查的，需要程序员自觉维护。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="comment">// 前闭后开</span></div><div class="line"><span class="keyword">let</span> rangeA = <span class="type">Range</span>(uncheckedBounds: (str.startIndex, str.endIndex))</div><div class="line"><span class="built_in">print</span>(rangeA)</div><div class="line"><span class="comment">// Index(_base: Swift.String.UnicodeScalarView.Index(_position: 0), _countUTF16: 1)..&lt;Index(_base: Swift.String.UnicodeScalarView.Index(_position: 12), _countUTF16: 0)</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(str.substring(with: rangeA))</div><div class="line"><span class="comment">// maimieng.com</span></div><div class="line"></div><div class="line"><span class="comment">// 即使范围首尾颠倒，也没有报错</span></div><div class="line"><span class="keyword">let</span> rangeB = <span class="type">Range</span>(uncheckedBounds: (str.endIndex, str.startIndex))</div><div class="line"><span class="built_in">print</span>(rangeB)</div><div class="line"><span class="comment">// Index(_base: Swift.String.UnicodeScalarView.Index(_position: 12), _countUTF16: 0)..&lt;Index(_base: Swift.String.UnicodeScalarView.Index(_position: 0), _countUTF16: 1)</span></div><div class="line"><span class="comment">// 但在使用中会出错</span></div><div class="line"><span class="comment">// fatal error: Can't form Range with upperBound &lt; lowerBound</span></div><div class="line"><span class="comment">// str.substring(with: rangeB)</span></div></pre></td></tr></table></figure>
<p>在上面的 Demo 中，从输出中也可以看出，<code>init(uncheckedBounds bounds: (lower: Bound, upper: Bound))</code> 构造的范围是一个<strong>前闭后开</strong>的区间。</p>
<p>Swift 中，字符串本身也能构造出 Range，例如：得到字符串子串的范围，若不存在则返回 nil：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="comment">// 返回前闭后开的范围</span></div><div class="line"><span class="built_in">print</span>(str.range(of: <span class="string">".com"</span>) ?? <span class="string">"不存在"</span>)</div><div class="line"><span class="comment">// Index(_base: Swift.String.UnicodeScalarView.Index(_position: 8), _countUTF16: 1)..&lt;Index(_base: Swift.String.UnicodeScalarView.Index(_position: 12), _countUTF16: 0)</span></div></pre></td></tr></table></figure>
<h2 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h2><p>在 Range 一节的 Demo 中，已经使用了 <code>substring(with:)</code> 方法测试范围的使用。Swift 中的字符串截取与其他语言其实是相似的，都是根据索引或索引范围来截取，只是 Swift 中的索引的类型不是整型，稍有麻烦。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"maimieng.com"</span></div><div class="line"></div><div class="line"><span class="comment">// 截取传入范围（左开右闭）的子串</span></div><div class="line"><span class="keyword">let</span> range = <span class="type">Range</span>(uncheckedBounds: (str.startIndex, str.endIndex))</div><div class="line"><span class="built_in">print</span>(str.substring(with: range))</div><div class="line"></div><div class="line"><span class="comment">// 从传入的索引开始截取到末尾（含 str.startIndex 元素）</span></div><div class="line"><span class="built_in">print</span>(str.substring(from: str.startIndex))</div><div class="line"><span class="comment">// 从传入的索引的前一个位置开始截取到头部（不含 str.endIndex 元素）</span></div><div class="line"><span class="built_in">print</span>(str.substring(to: str.endIndex))</div><div class="line"></div><div class="line"><span class="comment">// maimieng.com</span></div><div class="line"><span class="comment">// maimieng.com</span></div><div class="line"><span class="comment">// maimieng.com</span></div></pre></td></tr></table></figure>
<p>以上的 Demo 便是 Swift 中最基本的截取字符串使用。然而有时候条件一多，代码的重复率也会增加，那么可以利用 Swift 中的 extension 来扩展原有的 String，让 Swift 的 String 可以像 C#、Java 一样截取字符串，需要注意的是 这里的 IndexDistance 实际上是 String.CharacterView.IndexDistance 的别名，而 String.CharacterView.IndexDistance 又是 Int 类型的别名。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">substring</span><span class="params">(from: IndexDistance)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: from)</div><div class="line">        <span class="keyword">return</span> str.substring(from: index)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">substring</span><span class="params">(to: IndexDistance)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> index = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: to + <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> str.substring(to: index)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">substring</span><span class="params">(with range: Range&lt;IndexDistance&gt;)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> lower = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: range.lowerBound)</div><div class="line">        <span class="keyword">let</span> upper = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: range.upperBound)</div><div class="line">        <span class="keyword">let</span> range = <span class="type">Range</span>(uncheckedBounds: (lower, upper))</div><div class="line">        <span class="keyword">return</span> str.substring(with: range)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">substring</span><span class="params">(<span class="number">_</span> lower: IndexDistance, <span class="number">_</span> range: IndexDistance)</span></span> -&gt; <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">let</span> lowerIndex = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: lower)</div><div class="line">        <span class="keyword">let</span> upperIndex = <span class="keyword">self</span>.index(lowerIndex, offsetBy: range)</div><div class="line">        <span class="keyword">let</span> range = <span class="type">Range</span>(uncheckedBounds: (lowerIndex, upperIndex))</div><div class="line">        <span class="keyword">return</span> str.substring(with: range)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(str.substring(to: <span class="number">0</span>) ?? <span class="string">"nil"</span>)</div><div class="line"><span class="built_in">print</span>(str.substring(from: <span class="number">2</span>) ?? <span class="string">"nil"</span>)</div><div class="line"><span class="built_in">print</span>(str.substring(with: <span class="number">0</span>..&lt;<span class="number">1</span>) ?? <span class="string">"nil"</span>)</div><div class="line"><span class="built_in">print</span>(str.substring(<span class="number">1</span>, <span class="number">2</span>) ?? <span class="string">"nil"</span>)</div><div class="line"></div><div class="line"><span class="comment">// m</span></div><div class="line"><span class="comment">// imieng.com</span></div><div class="line"><span class="comment">// m</span></div><div class="line"><span class="comment">// ai</span></div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Documentation &amp; API Reference</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Substring in Swift 3.0&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的值类型与引用类型</title>
    <link href="https://maimieng.com/2016/36/"/>
    <id>https://maimieng.com/2016/36/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2016-11-28T16:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Value Type &amp; Reference Type<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS 10.12.2 Beta</li>
<li>Xcode 8.2 Beta</li>
<li>Swift 3.0</li>
</ul>
</li>
</ul>
<p><strong>2016-11-28 Update: 调整了行文顺序，并增加了一部分图文。</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学设计模式中，发现 Swift 中的 struct，class 以及 enum 在一般的使用中能够做到互相替换，因此探究其背后的逻辑就十分有必要。而这一问题又引出了 Swift 中的值类型和引用类型的区别。在网上搜寻一番，虽然也找到很多很棒的资料，不过有的有些过时，或是比较分散，因此总结一篇，以便自己加深印象，也方便与大家交流。</p>
<p>由于 Swift 中的 struct 为值类型，class 为引用类型，因此文中以这两种类型为代表来具体阐述。</p>
<h2 id="stack-amp-heap"><a href="#stack-amp-heap" class="headerlink" title="stack &amp; heap"></a>stack &amp; heap</h2><p>内存（RAM）中有两个区域，栈区（stack）和堆区（heap）。<strong>在 Swift 中，值类型，存放在栈区；引用类型，存放在堆区。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RectStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rectCls = <span class="type">RectClass</span>()</div><div class="line"><span class="keyword">var</span> rectStrct = <span class="type">RectStruct</span>()</div></pre></td></tr></table></figure>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_01.png" alt="stack &amp; heap in RAM"></p>
<h2 id="值类型-amp-引用类型"><a href="#值类型-amp-引用类型" class="headerlink" title="值类型 &amp; 引用类型"></a>值类型 &amp; 引用类型</h2><h3 id="值类型（Value-Type）"><a href="#值类型（Value-Type）" class="headerlink" title="值类型（Value Type）"></a>值类型（Value Type）</h3><p><strong>值类型，即每个实例保持一份数据拷贝。</strong></p>
<p>在 Swift 中，典型的有 struct，enum，以及 tuple 都是值类型。而平时使用的 <code>Int</code>，    <code>Double</code>，<code>Float</code>，<code>String</code>，<code>Array</code>，<code>Dictionary</code>，<code>Set</code> 其实都是用结构体实现的，也是值类型。</p>
<p>Swift 中，值类型的赋值为深拷贝（Deep Copy），值语义（Value Semantics）即新对象和源对象是独立的，当改变新对象的属性，源对象不会受到影响，反之同理。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_02.png" alt="值类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CoordinateStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> coordA = <span class="type">CoordinateStruct</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line"><span class="keyword">var</span> coordB = coordA</div><div class="line"></div><div class="line">coordA.x = <span class="number">100.0</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"coordA.x -&gt; \(coordA.x)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"coordB.x -&gt; \(coordB.x)"</span>)</div><div class="line"></div><div class="line"><span class="comment">// coordA.x -&gt; 100.0</span></div><div class="line"><span class="comment">// coordB.x -&gt; 0.0</span></div></pre></td></tr></table></figure>
<p>如果声明一个值类型的<strong>常量</strong>，那么就意味着该常量是不可变的（无论内部数据为 <code>var</code>/<code>let</code>）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> coordC = <span class="type">CoordinateStruct</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</div><div class="line"><span class="comment">// WRONG: coordC.x = 100.0</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在 Swift 3.0 中，可以使用 <code>withUnsafePointer(to:_:)</code> 函数来打印<strong>值类型</strong>变量的内存地址，这样就能看出两个变量的内存地址并不相同。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;coordA) &#123; <span class="built_in">print</span>(<span class="string">"\($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;coordB) &#123; <span class="built_in">print</span>(<span class="string">"\($0)"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// 0x000000011df6ec10</span></div><div class="line"><span class="comment">// 0x000000011df6ec20</span></div></pre></td></tr></table></figure>
<p>在 Swift 中，双等号（<code>==</code> &amp; <code>!=</code>）可以用来比较变量存储的内容是否一致，如果要让我们的 <code>struct</code> 类型支持该符号，则必须遵守 <code>Equatable</code> 协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CoordinateStruct</span>: <span class="title">Equatable</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(<span class="keyword">left</span>: CoordinateStruct, <span class="keyword">right</span>: CoordinateStruct)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">left</span>.x == <span class="keyword">right</span>.x &amp;&amp; <span class="keyword">left</span>.y == <span class="keyword">right</span>.y)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> coordA != coordB &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"coordA != coordB"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// coordA != coordB</span></div></pre></td></tr></table></figure>
<h3 id="引用类型（Reference-Type）"><a href="#引用类型（Reference-Type）" class="headerlink" title="引用类型（Reference Type）"></a>引用类型（Reference Type）</h3><p><strong>引用类型，即所有实例共享一份数据拷贝。</strong></p>
<p>在 Swift 中，class 和闭包是引用类型。引用类型的赋值是浅拷贝（Shallow Copy），引用语义（Reference Semantics）即新对象和源对象的变量名不同，但其引用（指向的内存空间）是一样的，因此当使用新对象操作其内部数据时，源对象的内部数据也会受到影响。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_03.png" alt="引用类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> weight = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dogA = <span class="type">Dog</span>()</div><div class="line"><span class="keyword">var</span> dogB = dogA</div><div class="line"></div><div class="line">dogA.height = <span class="number">50.0</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"dogA.height -&gt; \(dogA.height)"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"dogB.height -&gt; \(dogB.height)"</span>)</div><div class="line"></div><div class="line"><span class="comment">// dogA.height -&gt; 50.0</span></div><div class="line"><span class="comment">// dogB.height -&gt; 50.0</span></div></pre></td></tr></table></figure>
<p>如果声明一个引用类型的<strong>常量</strong>，那么就意味着该常量的引用不能改变（即不能被同类型变量赋值），但指向的内存中所存储的<strong>变量</strong>是可以改变的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dogC = <span class="type">Dog</span>()</div><div class="line">dogC.height = <span class="number">50</span></div><div class="line"></div><div class="line"><span class="comment">// WRONG: dogC = dogA</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在 Swift 3.0 中，可以使用以下方法来打印<strong>引用类型</strong>变量指向的内存地址。从中即可发现，两个变量指向的是同一块内存空间。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="type">Unmanaged</span>.passUnretained(dogA).toOpaque())</div><div class="line"><span class="built_in">print</span>(<span class="type">Unmanaged</span>.passUnretained(dogB).toOpaque())</div><div class="line"></div><div class="line"><span class="comment">// 0x0000600000031380</span></div><div class="line"><span class="comment">// 0x0000600000031380</span></div></pre></td></tr></table></figure>
<p>在 Swift 中，三等号（<code>===</code> &amp; <code>!==</code>）可以用来比较引用类型的引用（即指向的内存地址）是否一致。也可以在遵守 <code>Equatable</code> 协议后，使用双等号（<code>==</code> &amp; <code>!=</code>）用来比较变量的内容是否一致。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (dogA === dogB) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"dogA === dogB"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// dogA === dogB</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> dogC !== dogA &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"dogC !== dogA"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// dogC !== dogA</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Animal</span>: <span class="title">Equatable</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(<span class="keyword">left</span>: Animal, <span class="keyword">right</span>: Animal)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">left</span>.height == <span class="keyword">right</span>.height &amp;&amp; <span class="keyword">left</span>.weight == <span class="keyword">right</span>.weight)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> dogC == dogA &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"dogC == dogA"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// dogC == dogA</span></div></pre></td></tr></table></figure>
<h3 id="参数-与-inout"><a href="#参数-与-inout" class="headerlink" title="参数 与 inout"></a>参数 与 inout</h3><h4 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h4><p>定义一个 <code>ResolutionStruct</code> 结构体，以及一个 <code>ResolutionClass</code> 类。这里为了方便打印对象属性，<code>ResolutionClass</code> 类遵从了 <code>CustomStringConvertible</code> 协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ResolutionStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResolutionClass</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ResolutionClass(height: \(height), width: \(width))"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><p>在 Swift 中，函数的参数默认为<strong>常量</strong>，即在函数体内只能访问参数，而不能修改参数值。具体来说：</p>
<ol>
<li>值类型作为参数传入时，函数体内部不能修改其值</li>
<li>引用类型作为参数传入时，函数体内部不能修改其指向的内存地址，但是可以修改其内部的变量值</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(sct: ResolutionStruct)</span></span> &#123;</div><div class="line"><span class="comment">//    WRONG: sct.height = 1080</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> sct = sct</div><div class="line">    sct.height = <span class="number">1080</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(clss: ResolutionClass)</span></span> &#123;</div><div class="line"><span class="comment">//    WRONG: clss = ResolutionClass()</span></div><div class="line">    clss.height = <span class="number">1080</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> clss = clss</div><div class="line">    clss = <span class="type">ResolutionClass</span>()</div><div class="line">    clss.height = <span class="number">1440</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是如果要改变参数值或引用，那么就可以在函数体内部直接<strong>声明同名变量</strong>，并把原有变量赋值于新变量，那么这个新的变量就可以更改其值或引用。那么在函数参数的作用域和生命周期是什么呢？我们来测试一下，定义两个函数，目的为交换内部的 <code>height</code> 和 <code>width</code>。</p>
<p><strong>值类型</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(resSct: ResolutionStruct)</span></span> -&gt; <span class="type">ResolutionStruct</span> &#123;</div><div class="line">    <span class="keyword">var</span> resSct = resSct</div><div class="line">    <span class="built_in">withUnsafePointer</span>(to: &amp;resSct) &#123; <span class="built_in">print</span>(<span class="string">"During calling: \($0)"</span>) &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> temp = resSct.height</div><div class="line">    resSct.height = resSct.width</div><div class="line">    resSct.width = temp</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> resSct</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iPhone4ResoStruct = <span class="type">ResolutionStruct</span>(height: <span class="number">960</span>, width: <span class="number">640</span>)</div><div class="line"><span class="built_in">print</span>(iPhone4ResoStruct)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;iPhone4ResoStruct) &#123; <span class="built_in">print</span>(<span class="string">"Before calling: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">print</span>(<span class="built_in">swap</span>(resSct: iPhone4ResoStruct))</div><div class="line"><span class="built_in">print</span>(iPhone4ResoStruct)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;iPhone4ResoStruct) &#123; <span class="built_in">print</span>(<span class="string">"After calling: \($0)"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// ResolutionStruct(height: 960.0, width: 640.0)</span></div><div class="line"><span class="comment">// Before calling: 0x00000001138d6f50</span></div><div class="line"><span class="comment">// During calling: 0x00007fff5a512148</span></div><div class="line"><span class="comment">// ResolutionStruct(height: 640.0, width: 960.0)</span></div><div class="line"><span class="comment">// ResolutionStruct(height: 960.0, width: 640.0)</span></div><div class="line"><span class="comment">// After calling: 0x00000001138d6f50</span></div></pre></td></tr></table></figure>
<p>小结：在调用函数前后，外界变量值并<strong>没有</strong>因为函数内对参数的修改而发生变化，而且函数体内参数的内存地址与外界<strong>不同</strong>。因此：<strong>当值类型的变量作为参数被传入函数时，相当于创建了新的常量并初始化为传入的变量值，该参数的作用域及生命周期仅存在于函数体内。</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(resCls: ResolutionClass)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"During calling: \(Unmanaged.passUnretained(resCls).toOpaque())"</span>)</div><div class="line">    <span class="keyword">let</span> temp = resCls.height</div><div class="line">    </div><div class="line">    resCls.height = resCls.width</div><div class="line">    resCls.width = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> iPhone5ResoClss = <span class="type">ResolutionClass</span>()</div><div class="line">iPhone5ResoClss.height = <span class="number">1136</span></div><div class="line">iPhone5ResoClss.width = <span class="number">640</span></div><div class="line"><span class="built_in">print</span>(iPhone5ResoClss)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Before calling: \(Unmanaged.passUnretained(iPhone5ResoClss).toOpaque())"</span>)</div><div class="line"><span class="built_in">swap</span>(resCls: iPhone5ResoClss)</div><div class="line"><span class="built_in">print</span>(iPhone5ResoClss)</div><div class="line"><span class="built_in">print</span>(<span class="string">"After calling: \(Unmanaged.passUnretained(iPhone5ResoClss).toOpaque())"</span>)</div><div class="line"></div><div class="line"><span class="comment">// ResolutionClass(height: 1136.0, width: 640.0)</span></div><div class="line"><span class="comment">// Before calling: 0x00006000000220e0</span></div><div class="line"><span class="comment">// During calling: 0x00006000000220e0</span></div><div class="line"><span class="comment">// ResolutionClass(height: 640.0, width: 1136.0)</span></div><div class="line"><span class="comment">// After calling: 0x00006000000220e0</span></div></pre></td></tr></table></figure>
<p>小结：在调用函数前后，外界变量值随函数内对参数的修改而发生变化，而且函数体内参数的内存地址与外界<strong>一致</strong>。因此：<strong>当引用类型的变量作为参数被传入函数时，相当于创建了新的常量并初始化为传入的变量引用，当函数体内操作参数指向的数据，函数体外也受到了影响。</strong></p>
<h4 id="inout"><a href="#inout" class="headerlink" title="inout"></a>inout</h4><p><code>inout</code>  是 Swift 中的关键字，可以放置于参数类型前，冒号之后。使用 <code>inout</code> 之后，函数体内部可以直接更改参数值，而且改变会保留。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(resSct: <span class="keyword">inout</span> ResolutionStruct)</span></span> &#123;</div><div class="line">    <span class="built_in">withUnsafePointer</span>(to: &amp;resSct) &#123; <span class="built_in">print</span>(<span class="string">"During calling: \($0)"</span>) &#125;</div><div class="line">    <span class="keyword">let</span> temp = resSct.height</div><div class="line">    resSct.height = resSct.width</div><div class="line">    resSct.width = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iPhone6ResoStruct = <span class="type">ResolutionStruct</span>(height: <span class="number">1334</span>, width: <span class="number">750</span>)</div><div class="line"><span class="built_in">print</span>(iPhone6ResoStruct)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;iPhone6ResoStruct) &#123; <span class="built_in">print</span>(<span class="string">"Before calling: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">swap</span>(resSct: &amp;iPhone6ResoStruct)</div><div class="line"><span class="built_in">print</span>(iPhone6ResoStruct)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;iPhone6ResoStruct) &#123; <span class="built_in">print</span>(<span class="string">"After calling: \($0)"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// ResolutionStruct(height: 1334.0, width: 750.0)</span></div><div class="line"><span class="comment">// Before calling: 0x000000011ce62f50</span></div><div class="line"><span class="comment">// During calling: 0x000000011ce62f50</span></div><div class="line"><span class="comment">// ResolutionStruct(height: 750.0, width: 1334.0)</span></div><div class="line"><span class="comment">// After calling: 0x000000011ce62f50</span></div></pre></td></tr></table></figure>
<p>小结：<strong>值类型变量作为参数传入函数，外界和函数参数的内存地址一致，函数内对参数的更改得到了保留。</strong></p>
<p>引用类型也可以使用 <code>inout</code> 参数，但意义不大。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(clss: <span class="keyword">inout</span> ResolutionClass)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"During calling: \(Unmanaged.passUnretained(clss).toOpaque())"</span>)</div><div class="line">    <span class="keyword">let</span> temp = clss.height</div><div class="line">    clss.height = clss.width</div><div class="line">    clss.width = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iPhone7PlusResClss = <span class="type">ResolutionClass</span>()</div><div class="line">iPhone7PlusResClss.height = <span class="number">1080</span></div><div class="line">iPhone7PlusResClss.width = <span class="number">1920</span></div><div class="line"><span class="built_in">print</span>(iPhone7PlusResClss)</div><div class="line"><span class="built_in">print</span>(<span class="string">"Before calling: \(Unmanaged.passUnretained(iPhone7PlusResClss).toOpaque())"</span>)</div><div class="line"><span class="built_in">swap</span>(clss: &amp;iPhone7PlusResClss)</div><div class="line"><span class="built_in">print</span>(iPhone7PlusResClss)</div><div class="line"><span class="built_in">print</span>(<span class="string">"After calling: \(Unmanaged.passUnretained(iPhone7PlusResClss).toOpaque())"</span>)</div><div class="line"></div><div class="line"><span class="comment">// ResolutionClass(height: 1080.0, width: 1920.0)</span></div><div class="line"><span class="comment">// Before calling: 0x000060000003e580</span></div><div class="line"><span class="comment">// During calling: 0x000060000003e580</span></div><div class="line"><span class="comment">// ResolutionClass(height: 1920.0, width: 1080.0)</span></div><div class="line"><span class="comment">// After calling: 0x000060000003e580</span></div></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<ol>
<li>使用 <code>inout</code> 关键字的函数，在调用时需要在该参数前加上 <code>&amp;</code> 符号</li>
<li><code>inout</code> 参数在传入时必须为变量，不能为常量或字面量（literal）</li>
<li><code>inout</code> 参数不能有默认值，不能为可变参数</li>
<li><code>inout</code> 参数不等同于函数返回值，是一种使参数的作用域超出函数体的方式</li>
<li>多个 <code>inout</code> 参数不能同时传入同一个变量，因为拷入拷出的顺序不定，那么最终值也不能确定</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> y = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></div><div class="line">    <span class="keyword">var</span> origin = <span class="type">Point</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> center: <span class="type">Point</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"center GETTER call"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="type">Point</span>(x: origin.x + width / <span class="number">2</span>,</div><div class="line">                         y: origin.y + height / <span class="number">2</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"center SETTER call"</span>)</div><div class="line">            origin.x = newValue.x - width / <span class="number">2</span></div><div class="line">            origin.y = newValue.y - height / <span class="number">2</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reset</span><span class="params">(center: <span class="keyword">inout</span> Point)</span></span> &#123;</div><div class="line">        center.x = <span class="number">0.0</span></div><div class="line">        center.y = <span class="number">0.0</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = <span class="type">Rectangle</span>(width: <span class="number">100</span>, height: <span class="number">100</span>, origin: <span class="type">Point</span>(x: -<span class="number">100</span>, y: -<span class="number">100</span>))</div><div class="line"><span class="built_in">print</span>(rect.center)</div><div class="line">rect.reset(center: &amp;rect.center)</div><div class="line"><span class="built_in">print</span>(rect.center)</div><div class="line"></div><div class="line"><span class="comment">// center GETTER call</span></div><div class="line"><span class="comment">// Point(x: -50.0, y: -50.0)</span></div><div class="line"></div><div class="line"><span class="comment">// center GETTER call</span></div><div class="line"><span class="comment">// center SETTER call</span></div><div class="line"></div><div class="line"><span class="comment">// center GETTER call</span></div><div class="line"><span class="comment">// Point(x: 0.0, y: 0.0)</span></div></pre></td></tr></table></figure>
<p><code>inout</code> 参数的传递过程：</p>
<ol>
<li>当函数被调用时，参数值被拷贝</li>
<li>在函数体内，被拷贝的参数修改</li>
<li>函数返回时，被拷贝的参数值被赋值给原有的变量</li>
</ol>
<p>官方称这个行为为：<code>copy-in copy-out</code> 或 <code>call by value result</code>。我们可以使用 KVO 或计算属性来跟踪这一过程，这里以计算属性为例。排除在调用函数之前与之后的 <code>center GETTER call</code>，从中可以发现：参数值先被获取到（setter 被调用），接着被设值（setter 被调用）。</p>
<p>根据 <code>inout</code> 参数的传递过程，可以得知：<code>inout</code> 参数的本质与引用类型的传参并不是同一回事。<code>inout</code> 参数打破了其生命周期，是一个可变浅拷贝。在 Swift 3.0 中，也彻底摒除了在逃逸闭包（Escape Closure）中被捕获。苹果官方也有如下的说明：</p>
<blockquote>
<p>As an optimization, when the argument is a value stored at a physical address in memory, the same memory location is used both inside and outside the function body. The optimized behavior is known as <em>call by reference</em>; it satisfies all of the requirements of the copy-in copy-out model while removing the overhead of copying. Write your code using the model given by copy-in copy-out, without depending on the call-by-reference optimization, so that it behaves correctly with or without the optimization.</p>
<p>作为一种优化，当参数是一个存储于内存中实际地址的值时，函数体内外共用相同的一块内存地址。该优化行为被称作<em>通过引用调用</em>；其满足 copy-in copy-out 模型的所有必需条件，同时消除了拷贝时的开销。不依赖于通过引用调用的优化，使用 copy-in copy-out 提供的模型来写代码，以便在进不进行优化时（都能）正确运行。</p>
</blockquote>
<h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><p>在实际使用中，其实值类型和引用类型并不是孤立的，有时值类型里会存在引用类型的变量，反之亦然。这里简要介绍这四种嵌套类型。</p>
<h4 id="值类型嵌套值类型"><a href="#值类型嵌套值类型" class="headerlink" title="值类型嵌套值类型"></a>值类型嵌套值类型</h4><p>值类型嵌套值类型时，赋值时创建了新的变量，两者是独立的，嵌套的值类型变量也会创建新的变量，这两者也是独立的。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_04.png" alt="值类型嵌套值类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> circleA = <span class="type">Circle</span>(radius: <span class="number">5.0</span>)</div><div class="line"><span class="keyword">var</span> circleB = circleA</div><div class="line">circleA.radius = <span class="number">10</span></div><div class="line"><span class="built_in">print</span>(circleA)</div><div class="line"><span class="built_in">print</span>(circleB)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleA) &#123; <span class="built_in">print</span>(<span class="string">"circleA: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleB) &#123; <span class="built_in">print</span>(<span class="string">"circleB: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleA.radius) &#123; <span class="built_in">print</span>(<span class="string">"circleA.radius: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleB.radius) &#123; <span class="built_in">print</span>(<span class="string">"circleB.radius: \($0)"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// Circle(radius: 10.0)</span></div><div class="line"><span class="comment">// Circle(radius: 5.0)</span></div><div class="line"><span class="comment">// circleA: 0x000000011dc6dc90</span></div><div class="line"><span class="comment">// circleB: 0x000000011dc6dc98</span></div><div class="line"><span class="comment">// circleA.radius: 0x000000011dc6dc90</span></div><div class="line"><span class="comment">// circleB.radius: 0x000000011dc6dc98</span></div></pre></td></tr></table></figure>
<h4 id="值类型嵌套引用类型"><a href="#值类型嵌套引用类型" class="headerlink" title="值类型嵌套引用类型"></a>值类型嵌套引用类型</h4><p>值类型嵌套引用类型时，赋值时创建了新的变量，两者是独立的，但嵌套的引用类型指向的是同一块内存空间，当改变值类型内部嵌套的引用类型变量值时（除了重新初始化），其他对象的该属性也会随之改变。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_05.png" alt="值类型嵌套引用类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointClass</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"(\(x), \(y))"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.x = x</div><div class="line">        <span class="keyword">self</span>.y = y</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> center: <span class="type">PointClass</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> circleA = <span class="type">Circle</span>(center: <span class="type">PointClass</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>))</div><div class="line"><span class="keyword">var</span> circleB = circleA</div><div class="line">circleA.center.x = <span class="number">10.0</span></div><div class="line"><span class="built_in">print</span>(circleA)</div><div class="line"><span class="built_in">print</span>(circleB)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleA) &#123; <span class="built_in">print</span>(<span class="string">"circleA: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleB) &#123; <span class="built_in">print</span>(<span class="string">"circleB: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleA.center: \(Unmanaged.passUnretained(circleA.center).toOpaque())"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleB.center: \(Unmanaged.passUnretained(circleB.center).toOpaque())"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Circle(center: (10.0, 0.0))</span></div><div class="line"><span class="comment">// Circle(center: (10.0, 0.0))</span></div><div class="line"><span class="comment">// circleA: 0x0000000118251fa0</span></div><div class="line"><span class="comment">// circleB: 0x0000000118251fa8</span></div><div class="line"><span class="comment">// circleA.center: 0x000060000003e100</span></div><div class="line"><span class="comment">// circleB.center: 0x000060000003e100</span></div></pre></td></tr></table></figure>
<h4 id="引用类型嵌套值类型"><a href="#引用类型嵌套值类型" class="headerlink" title="引用类型嵌套值类型"></a>引用类型嵌套值类型</h4><p>引用类型嵌套值类型时，赋值时创建了新的变量，但是新变量和源变量指向同一块内存，因此改变源变量的内部值，会影响到其他变量的值。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_06.png" alt="引用类型嵌套值类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> radius: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Radius:\(radius)"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(radius: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.radius = radius</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> circleA = <span class="type">Circle</span>(radius: <span class="number">0.0</span>)</div><div class="line"><span class="keyword">var</span> circleB = circleA</div><div class="line"></div><div class="line">circleA.radius = <span class="number">5.0</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(circleA)</div><div class="line"><span class="built_in">print</span>(circleB)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleA: \(Unmanaged.passUnretained(circleA).toOpaque())"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleB: \(Unmanaged.passUnretained(circleB).toOpaque())"</span>)</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleA.radius) &#123; <span class="built_in">print</span>(<span class="string">"circleA.radius: \($0)"</span>) &#125;</div><div class="line"><span class="built_in">withUnsafePointer</span>(to: &amp;circleB.radius) &#123; <span class="built_in">print</span>(<span class="string">"circleB.radius: \($0)"</span>) &#125;</div><div class="line"></div><div class="line"><span class="comment">// Radius:5.0</span></div><div class="line"><span class="comment">// Radius:5.0</span></div><div class="line"><span class="comment">// circleA: 0x000060000003bc80</span></div><div class="line"><span class="comment">// circleB: 0x000060000003bc80</span></div><div class="line"><span class="comment">// circleA.radius: 0x000060000003bc90</span></div><div class="line"><span class="comment">// circleB.radius: 0x000060000003bc90</span></div></pre></td></tr></table></figure>
<h4 id="引用类型嵌套引用类型"><a href="#引用类型嵌套引用类型" class="headerlink" title="引用类型嵌套引用类型"></a>引用类型嵌套引用类型</h4><p>引用类型嵌套引用类型时，赋值时创建了新的变量，但是新变量和源变量指向同一块内存，内部引用类型变量也指向同一块内存地址，改变引用类型嵌套的引用类型的值，也会影响到其他变量的值。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/swift_vrtype_07.png" alt="引用类型嵌套引用类型"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointClass</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.x = x</div><div class="line">        <span class="keyword">self</span>.y = y</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"(\(x), \(y))"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> center: <span class="type">PointClass</span></div><div class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Center:\(center)"</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(center: <span class="type">PointClass</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.center = center</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> circleA = <span class="type">Circle</span>(center: <span class="type">PointClass</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>))</div><div class="line"><span class="keyword">let</span> circleB = circleA</div><div class="line"></div><div class="line">circleA.center.x = <span class="number">5.0</span></div><div class="line"><span class="built_in">print</span>(circleA)</div><div class="line"><span class="built_in">print</span>(circleB)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"circleA: \(Unmanaged.passUnretained(circleA).toOpaque())"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleB: \(Unmanaged.passUnretained(circleB).toOpaque())"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleA.center: \(Unmanaged.passUnretained(circleA.center).toOpaque())"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"circleB.center: \(Unmanaged.passUnretained(circleB.center).toOpaque())"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Center:(5.0, 0.0)</span></div><div class="line"><span class="comment">// Center:(5.0, 0.0)</span></div><div class="line"><span class="comment">// circleA: 0x0000608000025fa0</span></div><div class="line"><span class="comment">// circleB: 0x0000608000025fa0</span></div><div class="line"><span class="comment">// circleA.center: 0x0000608000025820</span></div><div class="line"><span class="comment">// circleB.center: 0x0000608000025820</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章是我在着手写 <a href="https://maimieng.com/2016/37/">Swift 中的 struct &amp; class &amp; enum</a> 一文时抽离出来的一篇。主要还是围绕了值类型中的 struct 和引用类型中的 class，在本文 stack &amp; heap 一节中，只是简单描述，因为一直对此部分内容感到迷惑，也查阅很多资料，希望最近可以总结出来一篇小文，与大家分享。</p>
<table>
<thead>
<tr>
<th>When</th>
<th>值类型 Value Type</th>
<th>引用类型 Reference Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>==</code> 有意义时</td>
<td><code>===</code> 有意义时</td>
</tr>
<tr>
<td>2</td>
<td>独立</td>
<td>共享，可变</td>
</tr>
<tr>
<td>3</td>
<td>在多线程使用的数据</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>在本文的叙述中，可能有许多说法与您平时所用的术语略有差池，例如变量指向的内存空间，其实也等价于变量指向的内存地址。在行文过程中，查阅了很多国外的资料，也尽力将语言规范，以免产生歧义，如果有任何错误或建议，您都可以在评论中直接提出，我会研究学习，虚心接受，并作出相应整改。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.apple.com/videos/play/wwdc2015/414/" target="_blank" rel="external">WWDC 2015 Building Better Apps with Value Types in Swift</a><br><a href="https://developer.apple.com/swift/blog/?id=10" target="_blank" rel="external">Value and Reference Types</a><br><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-ID173" target="_blank" rel="external">In-Out Parameters</a><br><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545" target="_blank" rel="external">In-Out Parameters</a><br><a href="https://www.raywenderlich.com/112027/reference-value-types-in-swift-part-1" target="_blank" rel="external">Reference vs Value Types in Swift: Part 1/2</a></p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p><a href="https://www.raywenderlich.com/112027/reference-value-types-in-swift-part-2" target="_blank" rel="external">Reference vs Value Types in Swift: Part 2/2</a><br><a href="http://www.jianshu.com/p/70684b2e0c15" target="_blank" rel="external">Swift 3 必看：foundation 中数据引用类型改为值类型</a><br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md" target="_blank" rel="external">Mutability and Foundation Value Types</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Value Type &amp;amp; Reference Type&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云 Ubuntu 安装并远程访问 MySQL</title>
    <link href="https://maimieng.com/2016/35/"/>
    <id>https://maimieng.com/2016/35/</id>
    <published>2016-11-18T16:00:00.000Z</published>
    <updated>2016-11-22T07:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>道理都懂，但还是连不上的话你就应该来看看…<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>Ubuntu Server 14.04.01 LTS 64 位</li>
<li>DataGrip 2016.2</li>
</ul>
</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了完成作业，不让服务器闲置，决定把数据库放在远程。免去本地配置的麻烦，这次的配置是基于腾讯的学生云，系统选择的是 Ubuntu Server 14.04.01 LTS 64 位，顺便学习下命令行操作。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>安装和配置的步骤比较详细，如果你已经安装过 MySQL 可以跳过相应章节。</p>
<h3 id="配置服务器安全组"><a href="#配置服务器安全组" class="headerlink" title="配置服务器安全组"></a>配置服务器安全组</h3><p>服务器的安全组可以在腾讯云上修改、配置。因为 MySQL 默认远程访问端口为 3306，因此，我们至少要开放该端口。这里由于我的服务器仅供折腾，所以开放了所有端口，实际使用的服务器应当考虑到相应的安全问题。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ubuntu_mysql_1.png" alt="配置服务器安全组"></p>
<h3 id="设置服务器-root-账户密码"><a href="#设置服务器-root-账户密码" class="headerlink" title="设置服务器 root 账户密码"></a>设置服务器 root 账户密码</h3><p>在后面的使用中，我们需要 root 账户的权限，因此需要设置 root 账户的密码。腾讯云默认会提供一个 ubuntu 账户，在装系统时可以设置密码。</p>
<p>使用 ubuntu 账户登录服务器（0.0.0.0 替换为你的服务器 IP）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh ubuntu@0.0.0.0</div></pre></td></tr></table></figure>
<p>登录成功后，设置 root 账户密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd</div></pre></td></tr></table></figure>
<p>你需要先输入 ubuntu 账户密码，之后设置 root 账户密码。</p>
<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>安装时，若提示 <code>Do you want to continue? [Y/n]</code> 输入 Y 即可。在 MySQL 快安装完毕时，会跳出设置 root 密码的界面。该 root 为数据库的用户，而非服务器账户。注意区分和记忆密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div><div class="line">apt-get isntall mysql-client</div><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure>
<p>安装完成后，尝试连接 MySQL，使用 root 用户验证是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root –p</div></pre></td></tr></table></figure>
<h3 id="配置-MySQL-远程访问"><a href="#配置-MySQL-远程访问" class="headerlink" title="配置 MySQL 远程访问"></a>配置 MySQL 远程访问</h3><p>查看 3306 端口状态，在 MySQL 安装成功，但没有配置远程访问时，会显示 <code>127.0.0.1:3306</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an|grep 3306</div></pre></td></tr></table></figure>
<p>为保证安全，首先停止 MySQL。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql stop</div></pre></td></tr></table></figure>
<p>切换为 root 账户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su root</div></pre></td></tr></table></figure>
<p>使用 vim 打开 my.cnf。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/my.cnf</div></pre></td></tr></table></figure>
<p>将 <code>bind-address = 127.0.0.1</code> 注释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># bind-address = 127.0.0.1</div></pre></td></tr></table></figure>
<p>保存并退出后，启动 MySQL。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql start</div></pre></td></tr></table></figure>
<p>查看 3306 端口状态，现在应当显示 <code>0.0.0.0:3306</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an|grep 3306</div></pre></td></tr></table></figure>
<h3 id="新建用户并授权"><a href="#新建用户并授权" class="headerlink" title="新建用户并授权"></a>新建用户并授权</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 创建 kingcos 用户，设置密码为 123456</div><div class="line">CREATE USER kingcos IDENTIFIED BY '123456';</div><div class="line"></div><div class="line"># 授权</div><div class="line">GRANT ALL PRIVILEGES ON *.* TO 'kingcos'@'%'</div><div class="line">IDENTIFIED BY '123456'</div><div class="line">WITH GRANT OPTION;</div><div class="line"></div><div class="line"># 更新权限</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h3 id="尝试远程访问"><a href="#尝试远程访问" class="headerlink" title="尝试远程访问"></a>尝试远程访问</h3><p>这里以 JetBrains 的 DataGrip 2016.2 为例。</p>
<p>如图，即连接成功。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/ubuntu_mysql_2.png" alt="DataGrip 2016.2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;道理都懂，但还是连不上的话你就应该来看看…&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://maimieng.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>计组实验 - Cache</title>
    <link href="https://maimieng.com/2016/34/"/>
    <id>https://maimieng.com/2016/34/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-11T15:06:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>Analysis of L1 Cache<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>L1 Cache</li>
<li>Cache Simulator by <a href="https://github.com/jiangxincode" target="_blank" rel="external">jiangxincode</a></li>
</ul>
</li>
</ul>
<p>花了近乎一周时间，本是想用 Java 或 JavaScript 写一个 Cache 模拟器，但由于时间和精力有限，暂放弃。</p>
<p>不过为了实验效果，将老师所提供的 CacheSim 程序进行了微调（源程序未提供 License），并将结果数据绘成图表（使用 <a href="http://echarts.baidu.com" target="_blank" rel="external">ECharts</a>）。</p>
<p>虽然最后实验部分分数得了满分，但由于该程序可能存在一些问题，导致某些结果并非完全正确，实验结果仅供参考。</p>
<p>实验结果及相应分析可在下方网站中获取，相应的参考资料也在其中，这里不再赘述。</p>
<p><a href="https://maimieng.com/skipsrc/CacheSimulator">https://maimieng.com/skipsrc/CacheSimulator</a></p>
<p>以上的实验结果出自 <a href="https://github.com/jiangxincode/CacheSim" target="_blank" rel="external">jiangxincode/CacheSim</a> 程序，向开源致敬！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;Analysis of L1 Cache&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Technology" scheme="https://maimieng.com/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>初探 iOS 中自定义 UIView 的初始化过程</title>
    <link href="https://maimieng.com/2016/33/"/>
    <id>https://maimieng.com/2016/33/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2017-02-26T01:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>awakeFromNib()<br>init(frame:)<br>init(coder:)<br></blockquote><br><a id="more"></a></p>
<ul>
<li>Info:<ul>
<li>macOS 10.12.1</li>
<li>Xcode 8.2 Beta 1</li>
<li>Swift 3.0</li>
</ul>
</li>
</ul>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><blockquote>
<p>2017.02.27 - CS193p Lecture 04</p>
</blockquote>
<ul>
<li>通常，UIView 应尽可能避免重写构造器</li>
<li><code>init(frame:)</code>：纯代码（指定构造器）；<code>init(coder:)</code>：Storyboard（必需可失败构造器）。若需要构造器，需要同时重写这两个构造器：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 如果本类有自定义变量，则此处不可初始化他们，</span></div><div class="line">    <span class="comment">// 因为只有当初始化后才能调用自己的方法。</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line"></div><div class="line">    <span class="comment">// 初始化变量</span></div><div class="line"></div><div class="line">    setup()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</div><div class="line"></div><div class="line">    <span class="comment">// 初始化变量</span></div><div class="line"></div><div class="line">    setup()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>awakeFromNib()</code> 只在使用 Storyboard 的 UIView 中被调用。</li>
<li><code>awakeFromNib()</code> 并不是构造器，但它在初始化完成后立即被调用。</li>
<li>所有 Storyboard 中继承自 NSObject 的对象发送该消息。但顺序是不确定的，因此不能在这里调用其他任何 Storyboard 中的对象。</li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 StoryBoard 和 Xib 出现之后，iOS UI 开发出现了三足鼎立之势。本文不涉及 StoryBoard、Xib、纯代码的优劣之分。仅仅涉及几个初始化方法：<code>awakeFromNib()</code> &amp; <code>init(frame:)</code> &amp; <code>init(coder:)</code>，探讨他们何时调用，为何调用。</p>
<h2 id="Xib-amp-Nib"><a href="#Xib-amp-Nib" class="headerlink" title="Xib &amp; Nib"></a>Xib &amp; Nib</h2><p>ib 是 Interface Builder 的缩写，即界面构造器。这里简要说下，Xib 和 Nib 各是什么，有什么区别。</p>
<p>Xib 实际是一个 XML 文件，而 Nib 是二进制文件。当应用编译时，Xib 文件被翻译为 Nib。所以在 Xcode 中，我们可以自己新建 Xib 文件来构造 UI，而当编译时，Xcode 会自动生成相应的 Nib 文件，而不需我们额外关注。关于其详细介绍，您可以参考文末的资料。</p>
<blockquote>
<p>OK! Talk is cheap, show me the code!</p>
</blockquote>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>在下面的 Demo 中，统一将自定义 UIView 命名为 MyView。</p>
<p>MyView.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line">	<span class="comment">// methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Interface-Builder"><a href="#Interface-Builder" class="headerlink" title="Interface Builder"></a>Interface Builder</h3><p>如果使用 Interface Builder 拖控件，那么其默认属于 UIView 类型。为将其改为自定义控件，需要将 Utilities 中 Identity inspector 的 Custom Class 改为 MyView。</p>
<p><img src="https://o7y30w6c6.qnssl.com/blog/custom_uiview_1.png" alt="Custom Class 改为 MyView"></p>
<p>为了方便看出调用顺序，将 MyView.swift 改为如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line"></div><div class="line">        <span class="built_in">print</span>(<span class="string">"init(frame:)"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</div><div class="line"></div><div class="line">        <span class="built_in">print</span>(<span class="string">"init(coder:)"</span>)</div><div class="line">        <span class="comment">// fatalError("init(coder:) has not been implemented")</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line"></div><div class="line">        <span class="built_in">print</span>(<span class="string">"awakeFromNib()"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后运行即可在屏幕上看到该自定义 UIView，控制台输出：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(coder:)</div><div class="line">awakeFromNib()</div></pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过打印的输出，可以看出使用 Interface Builder 载入 View 不会调用 <code>init(frame:)</code> 方法，而是调用了 <code>init(coder:)</code>。<code>init(coder:)</code> 是 NSCoding 协议中的方法，NSCoding 是负责编码解码，归档处理的协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>)</div></pre></td></tr></table></figure>
<p>代码中的 <code>init(coder:)</code> 与平时见到的其他初始化方法有点不同：<code>required</code> 是指其为必要构造器，即子类「必须」重写该构造器，但当父类的构造器可以完全满足初始化时，也可不重写。<code>init?</code> 是指其为可失败构造器，即其可以 <code>return nil</code> 告知外界构造失败。若想详细了解 Swift 中的构造器，可以参考苹果官方文档。</p>
<p><code>init(coder:)</code> 的调用处于 Nib <strong>载入时</strong>，而 <code>awakeFromNib()</code> 的调用处于 Nib <strong>载入后</strong>。Nib 的载入过程如下：</p>
<ol>
<li>Nib 文件内容和引用的资源文件加载到内存；</li>
<li>反归档存储于 Nib 文件的图像数据对象并初始化；<ol>
<li>遵从 NSCoding 的对象（UIView &amp; UIViewController）调用 <code>init(coder:)</code></li>
<li>其他对象调用其他构造器方法</li>
</ol>
</li>
<li>建立对象间连接：Outlet &amp; Action</li>
<li>实现 <code>awakeFromNib()</code> 的对象调用该方法</li>
</ol>
<p>需要注意的是，<code>awakeFromNib()</code> 中需要调用父类的该方法以保证父类的进行额外初始化。而在本例中重写的 <code>init(coder:)</code> 目的主要是查看调用顺序，并没有加入特别的操作。因此在实际使用中，如果使用 Interface Builder，可以不重写该方法。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>MyView.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span>: <span class="title">UIView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line"></div><div class="line">        <span class="built_in">print</span>(<span class="string">"init(frame:)"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line"></div><div class="line">        <span class="built_in">print</span>(<span class="string">"awakeFromNib"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> myView = <span class="type">MyView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">50</span>, height: <span class="number">50</span>))</div><div class="line">        myView.backgroundColor =  .black</div><div class="line">        view.addSubview(myView)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后运行即可在屏幕上看到该自定义 UIView，控制台输出：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(frame:)</div></pre></td></tr></table></figure>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>通过纯代码创建自定义 UIView，便只调用 <code>init(frame:)</code> 方法，不涉及 Nib 的方法，因此不会调用 <code>awakeFromNib()</code> 和 <code>init(coder:)</code> 方法。而由于 <code>init(coder:)</code> 为必要构造器，因此重写 <code>init(frame:)</code> 时，必须实现该方法。</p>
<p>有时，为了便于从 Interface Builder 和纯代码都能创建自定义 UIView 对象，可以将 <code>init(coder:)</code> 方法改为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</div><div class="line">    <span class="comment">// fatalError("init(coder:) has not been implemented")</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若保留 <code>fatalError()</code>，则从 Nib 初始化时会无条件输出语句并停止运行。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>可能是强迫症作祟，学习中每遇到一个知识点，都想要查看官方文档或者 Google 出为什么，然后自己敲代码验证，再总结出一篇文章，投稿给简书、掘金。一篇文章有时要耗费一两天，因为查阅的资料都是略有过时且几乎全为英文，但自己挺享受这样的学习状态，也很享受分享给大家之后获得的收藏所带来的鼓励。最近也看了很多实习生的招聘，现在深感基础的重要，未来可能会倾向一些基础，例如数据结构、算法、网络等知识。也希望自己在寒假或下学期能找一份 iOS 实习，虽然自己也有所涉猎 Android 等其他的一些技术栈，但还是对 iOS 最感兴趣。Come on!</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/LoadingResources/CocoaNibs/CocoaNibs.html" target="_blank" rel="external">Nib Files</a><br><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID203" target="_blank" rel="external">Initialization</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;awakeFromNib()&lt;br&gt;init(frame:)&lt;br&gt;init(coder:)&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://maimieng.com/tags/Swift/"/>
    
      <category term="iOS" scheme="https://maimieng.com/tags/iOS/"/>
    
  </entry>
  
</feed>
